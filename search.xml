<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PostgraduateExam/计算机专业面试</title>
      <link href="/2020/08/15/PostgraduateExam/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E9%9D%A2%E8%AF%95/"/>
      <url>/2020/08/15/PostgraduateExam/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机专业面试"><a class="markdownIt-Anchor" href="#计算机专业面试"></a> 计算机专业面试</h1><h2 id="面试流程"><a class="markdownIt-Anchor" href="#面试流程"></a> 面试流程</h2><blockquote><p>流程：先自我介绍(英语 4、6 级，本科获奖情况、本科专业学习情况、专业能力，读研打算等)，然后是抽题目回答问题。如果有 N 个人参加复试，他们会准备 N 套题目，每套 5 题，开始之前每人抽套题的序号。</p></blockquote><h2 id="面试题整理"><a class="markdownIt-Anchor" href="#面试题整理"></a> 面试题整理</h2><blockquote><p>总的来说面试的范围很广：数据结构(多)、操作系统(多)、计算机组成原理(多)、网络、数据库、软件工程(多)、微机原理、编译原理(多)等等都会涉及，最好的方法还是本科的时候好好学习。</p></blockquote><p>我将计算机相关的面试题整理汇总在了这里：<a href="interview/README?id=%E6%8A%80%E6%9C%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E6%94%B6%E5%BD%95">点击查看</a></p><h2 id="往年面试题整理"><a class="markdownIt-Anchor" href="#往年面试题整理"></a> 往年面试题整理</h2><blockquote><p>往年面试题已经在相关学科面试题中做了标注（⭐），在这里就不重复写啦！祝大家考研上岸！</p></blockquote><p>传送门：<a href="interview/README?id=%E6%8A%80%E6%9C%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E6%94%B6%E5%BD%95">🚀</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PostgraduateExam/计算机专业英语</title>
      <link href="/2020/08/15/PostgraduateExam/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%8B%B1%E8%AF%AD/"/>
      <url>/2020/08/15/PostgraduateExam/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%8B%B1%E8%AF%AD/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机专业英语"><a class="markdownIt-Anchor" href="#计算机专业英语"></a> 计算机专业英语</h1><h2 id="计算机科学概论"><a class="markdownIt-Anchor" href="#计算机科学概论"></a> 计算机科学概论</h2><table><thead><tr><th>单词 / 词组</th><th>释义</th><th>单词 / 词组</th><th>释义</th></tr></thead><tbody><tr><td>Abstract</td><td>抽象的</td><td>Assertions</td><td>声明</td></tr><tr><td>Algorithm</td><td>算法</td><td>Assignment</td><td>赋值</td></tr><tr><td>Analog signal</td><td>模拟信号</td><td>Associative property</td><td>结合性</td></tr><tr><td>Applets</td><td>小应用程序</td><td>Asynchronous processing</td><td>异步处理</td></tr><tr><td>Application programming interfaces</td><td>应用编程接口</td><td>Attributes</td><td>属性</td></tr><tr><td>Architecture</td><td>体系结构</td><td>Authentication credentials</td><td>鉴别凭证</td></tr><tr><td>Argument</td><td>实参</td><td>Bandwidth</td><td>带宽</td></tr><tr><td>Arithmetic operation</td><td>算术运算</td><td>Base</td><td>基数</td></tr><tr><td>Artificial intelligence</td><td>人工智能</td><td>Batch processing</td><td>批处理</td></tr><tr><td>Artificial neural networks</td><td>人工神经网络</td><td>Best fit</td><td>最佳匹配</td></tr><tr><td>Assemble directives</td><td>汇编指令</td><td>Binary</td><td>二进制</td></tr><tr><td>Block</td><td>块</td><td>Boolean algebra</td><td>布尔代数</td></tr><tr><td>Booting</td><td>引导</td><td>Buffer overflow</td><td>缓存溢出</td></tr><tr><td>Bus topology</td><td>总线拓扑</td><td>Calling unit</td><td>调用单元</td></tr><tr><td>Cancellation error</td><td>消除误差</td><td>Captcha codes</td><td>验证码</td></tr><tr><td>Children</td><td>子节点</td><td>Cipher</td><td>密码</td></tr><tr><td>Circuits</td><td>电路</td><td>Clustering</td><td>聚类</td></tr><tr><td>Compilation process</td><td>编译过程</td><td>Component</td><td>构成要素</td></tr><tr><td>Composite variable</td><td>复合变量</td><td>Cryptography</td><td>密码系统</td></tr><tr><td>CPU scheduling algorithm</td><td>CPU调度算法</td><td>Data object</td><td>数据对象</td></tr><tr><td>Data compression</td><td>数据表示</td><td>Data type</td><td>数据类型</td></tr><tr><td>Declaration</td><td>声明</td><td>Demand paging</td><td>请求页面调度</td></tr><tr><td>Digital signature</td><td>数字签名</td><td>Discrete structure</td><td>离散结构</td></tr><tr><td>Distributed computer</td><td>分布式计算机</td><td>Dynamic partition</td><td>动态分区</td></tr><tr><td>Decimal notation</td><td>十进制记数法</td><td>Embedded system</td><td>嵌入式系统</td></tr><tr><td>Encapsulation</td><td>封装</td><td>Entities</td><td>实体</td></tr><tr><td>Even parity</td><td>偶校验</td><td>Event-controlled loops</td><td>事件控制循环</td></tr><tr><td>Excited state</td><td>兴奋状态</td><td>Exponential time</td><td>指数时间</td></tr><tr><td>Execution unit</td><td>执行单元</td><td>Filtering</td><td>过滤</td></tr><tr><td>Fingerprint</td><td>指纹分析</td><td>Fixed-partition technique</td><td>固定分区技术</td></tr><tr><td>Function model</td><td>功能模型</td><td>Geometric modeling technique</td><td>几何建模技术</td></tr><tr><td>Graphical user interface</td><td>图形用户界面</td><td>Graphics processor unit</td><td>图形处理单元（GPU）</td></tr><tr><td>Halting problem</td><td>停机问题</td><td>Hard disk drive</td><td>硬盘驱动</td></tr><tr><td>Hypertext markup language</td><td>超文本标记语言（HTML）</td><td>High defin ition multimedia interface</td><td>高清晰度多媒体接口（HDMI）</td></tr><tr><td>Imperative paradigm</td><td>命令式模型</td><td>Hypertext transfer protocol</td><td>超文本传输协议（HTTP）</td></tr><tr><td>Implementation phase</td><td>实现阶段</td><td>Human-computer communication</td><td>人机交互</td></tr><tr><td>Infinite loop</td><td>无限循环</td><td>Infinite recursion</td><td>无限递归</td></tr><tr><td>Information retrieval</td><td>信息检索</td><td>Instruction-level parallelism</td><td>指令级并行</td></tr><tr><td>Integrated circuit</td><td>集成电路</td><td>Interactive system</td><td>交互系统</td></tr><tr><td>Interoperability</td><td>互通性</td><td>Latency</td><td>延迟</td></tr><tr><td>Lexical ambiguity</td><td>词法二义性</td><td>Magnetic disk drive</td><td>磁盘驱动</td></tr><tr><td>Maintenance phase</td><td>维护阶段</td><td>Mantissa</td><td>尾数</td></tr><tr><td>Nested structure</td><td>嵌套结构</td><td>Natural language processing</td><td>自然语言处理</td></tr><tr><td>Number overflow</td><td>数字溢出</td><td>Numeric data</td><td>数据</td></tr><tr><td>Object-oriented methodology</td><td>面向对象方法</td><td>Object being served</td><td>受服务对象</td></tr><tr><td>Octal number</td><td>八进制数</td><td>Offset value</td><td>偏移值</td></tr><tr><td>Operating system</td><td>操作系统</td><td>Ordered list</td><td>有序列表</td></tr><tr><td>Parameter</td><td>参数</td><td>Parallel architectures</td><td>并行体系结构</td></tr><tr><td>Peripheral device</td><td>外围设备</td><td>Piggybacking</td><td>捎带确认</td></tr><tr><td>Portability</td><td>便携式</td><td>Preemptive scheduling</td><td>抢先调度</td></tr><tr><td>Prefix</td><td>前缀</td><td>Procedural programming</td><td>面向过程编程</td></tr><tr><td>Proprietary system</td><td>专有系统</td><td>Pseudocode statement</td><td>伪代码语句</td></tr><tr><td>Radix point</td><td>小数点</td><td>Random access memory</td><td>随机存取存储器（RAM）</td></tr><tr><td>Rational number</td><td>有理数</td><td>Real-time system</td><td>实时系统</td></tr><tr><td>Recurrence coding</td><td>迭代编码</td><td>Recursive algorithm</td><td>递归算法</td></tr><tr><td>Reference parameter</td><td>引用参数</td><td>Relational model</td><td>关系模型</td></tr><tr><td>Relative path name</td><td>相对路径名</td><td>Relocatable models</td><td>浮动模型</td></tr><tr><td>Rendering engine</td><td>渲染引擎</td><td>Repeater</td><td>中继器</td></tr><tr><td>Representational error</td><td>表示误差</td><td>Requirement phase</td><td>需求阶段</td></tr><tr><td>Reserved word</td><td>保留字</td><td>Resolution</td><td>分辨率</td></tr><tr><td>Response time</td><td>响应时间</td><td>Round-off error</td><td>舍入误差</td></tr><tr><td>Round-Robin scheduling</td><td>轮询调度</td><td>Schema</td><td>模式</td></tr><tr><td>Scientific notation</td><td>科学记数法</td><td>Search engine optimization</td><td>搜索引擎优化</td></tr><tr><td>Sector</td><td>扇区</td><td>Semantic network</td><td>语义网</td></tr><tr><td>Sequential circuit</td><td>时序电路</td><td>Sequential file access</td><td>顺序文件访问</td></tr><tr><td>Sequential search</td><td>顺序搜索</td><td>Significant digits</td><td>有效位</td></tr><tr><td>Serial</td><td>串行的</td><td>Software specification</td><td>软件规约</td></tr><tr><td>Sorted linked list</td><td>有序链表</td><td>Spatial compression</td><td>空间压缩</td></tr><tr><td>Spoofing</td><td>欺骗</td><td>Storage capacity</td><td>存储容量</td></tr><tr><td>Subprogram</td><td>子程序</td><td>Superscalar</td><td>超标量</td></tr><tr><td>Synchronous processing</td><td>同步处理</td><td>Surface acoustic wave touch screen</td><td>表面声波触摸屏</td></tr><tr><td>Tape</td><td>磁带</td><td>Ten’s complement</td><td>10的补码</td></tr><tr><td>Test case</td><td>测试用例</td><td>Text compression</td><td>文本压缩</td></tr><tr><td>Underflow</td><td>下溢</td><td>Uniform resource locator</td><td>统一资源定位符（URL）</td></tr><tr><td>Universal serial bus</td><td>通用串行总线（USB）</td><td>Vector graphic</td><td>矢量图形</td></tr><tr><td>Voiceprint</td><td>声波纹</td><td>Voice recognition</td><td>声音识别</td></tr><tr><td>Voice synthesis</td><td>语音合成</td><td>What-if analysis</td><td>模拟假设分析</td></tr><tr><td>Worst fit</td><td>最差匹配</td><td></td><td></td></tr><tr><td>agent</td><td>代理人</td><td></td><td></td></tr></tbody></table><h2 id="人工智能"><a class="markdownIt-Anchor" href="#人工智能"></a> 人工智能</h2><table><thead><tr><th>单词 / 词组</th><th>释义</th><th>单词 / 词组</th><th>释义</th></tr></thead><tbody><tr><td>Abduction</td><td>溯因推理</td><td>Abductive diagnosis</td><td>溯因诊断</td></tr><tr><td>Absolute error</td><td>绝对误差</td><td>Absorbing state</td><td>吸收态</td></tr><tr><td>Action constraints</td><td>动作约束</td><td>Action profile</td><td>动作组合</td></tr><tr><td>Active learning</td><td>主动学习</td><td>Active sensor</td><td>主动传感器</td></tr><tr><td>Actuator</td><td>执行器</td><td>Acyclic directed graph</td><td>无环有向图</td></tr><tr><td>Additive independence</td><td>累加独立性</td><td>Additive utilities</td><td>累加效用</td></tr><tr><td>Admissibility</td><td>可采纳性</td><td>Answer clause</td><td>答案子句</td></tr><tr><td>Answer extraction</td><td>解答抽取</td><td>Anytime algorithm</td><td>任意时间算法</td></tr><tr><td>Approximately correct</td><td>近似正确</td><td>Approximately optimal solution</td><td>近似最优解</td></tr><tr><td>Assumption</td><td>假说</td><td>Asymptotic complexity</td><td>渐进复杂度</td></tr><tr><td>Asynchronous value iteration</td><td>异步值迭代</td><td>Axiom schema</td><td>公理模式</td></tr><tr><td>Back-propagation learning</td><td>反向传播学习</td><td>Backtracking</td><td>回溯</td></tr><tr><td>Backward induction</td><td>逆向归纳法</td><td>Basic Formal Ontology</td><td>基本形式化本体</td></tr><tr><td>Bayesian classifier</td><td>贝叶斯分类器</td><td>Bias-free</td><td>无偏置</td></tr><tr><td>Branching factor</td><td>分支因子</td><td>Beam search</td><td>集束搜索</td></tr><tr><td>Binary feature</td><td>二元特征</td><td>Candidate elimination algorithm</td><td>候选删除算法</td></tr><tr><td>Canonical representation</td><td>标准表示</td><td>Cardinals</td><td>基数</td></tr><tr><td>Causal link</td><td>因果关系</td><td>Causality</td><td>因果关系，因果性</td></tr><tr><td>Causal mechanism</td><td>因果机制</td><td>Causal transduction</td><td>因果转换</td></tr><tr><td>Central limit theorem</td><td>中心极限定理</td><td>Chain rule</td><td>链式法则</td></tr><tr><td>Chance node</td><td>机会结点</td><td>Characteristic function</td><td>特征函数</td></tr><tr><td>Classification</td><td>分类</td><td>Cluster</td><td>簇</td></tr><tr><td>Clustering</td><td>聚类</td><td>Cognitive science</td><td>认知科学</td></tr><tr><td>Commonsense reasoning</td><td>常识推理</td><td>Command function</td><td>指令函数</td></tr><tr><td>Compound proposition</td><td>复合命题</td><td>Complements</td><td>替换</td></tr><tr><td>Conditional effect</td><td>有条件的影响</td><td>Conditional probability distribution</td><td>条件概率分布</td></tr><tr><td>Consistency-based diagnosis</td><td>基于一致性的诊断</td><td>Consistent</td><td>相容的</td></tr><tr><td>Constraint optimization problem</td><td>约束优化问题</td><td>Constraint satisfaction problem</td><td>约束满足问题</td></tr><tr><td>Context-specific independence</td><td>上下文特定的独立性</td><td>Contingent attribute</td><td>或有特性</td></tr><tr><td>Continuant</td><td>持存体</td><td>Continuous variable</td><td>连续变量</td></tr><tr><td>Cooperative system</td><td>协作系统</td><td>Credit-assignment problem</td><td>信度分配问题</td></tr><tr><td>Cross validation</td><td>交叉验证</td><td>Cumulative probability distribution</td><td>累积概率分布</td></tr><tr><td>Cycle check</td><td>环检查</td><td>Decision function</td><td>决策函数</td></tr><tr><td>Decision tree</td><td>决策树</td><td>Deduction</td><td>演绎</td></tr><tr><td>Denote</td><td>指示</td><td>Depth-bounded meta-interpreter</td><td>深度有界元解释器</td></tr><tr><td>Derivation</td><td>推导</td><td>Differentia</td><td>区别特征</td></tr><tr><td>Dimension</td><td>维度</td><td>Directed acyclic graph</td><td>有向无环图</td></tr><tr><td>Discount factor</td><td>折扣因子</td><td>Disjunction normal form</td><td>析取范式</td></tr><tr><td>Disposition</td><td>处置</td><td>Domain expert</td><td>领域专家</td></tr><tr><td>Domain ontology</td><td>领域本体</td><td>Domain splitting</td><td>域分割</td></tr><tr><td>Dominant strategy</td><td>支配策略</td><td>Dot product</td><td>点积</td></tr><tr><td>Dynamic decision network</td><td>动态决策网络</td><td>Dynamic programming</td><td>动态规划</td></tr><tr><td>Effect constraint</td><td>影响约束</td><td>Effect uncertainty dimension</td><td>影响不确定维度</td></tr><tr><td>Empirical frequency</td><td>经验频率</td><td>Endogenous frequency</td><td>内因变量</td></tr><tr><td>Ensemble learning</td><td>集成学习</td><td>Epistemological</td><td>认识论的</td></tr><tr><td>Event calculus</td><td>事件演算</td><td>Evolutionary algorithm</td><td>演化算法</td></tr><tr><td>Exogenous variable</td><td>外因变量</td><td>Exploit</td><td>利用</td></tr><tr><td>Explore</td><td>解释</td><td>Factor</td><td>因子</td></tr><tr><td>Feature</td><td>特征</td><td>Frame</td><td>框架</td></tr><tr><td>Fringe</td><td>边缘</td><td>Frontier</td><td>前沿</td></tr><tr><td>Game tree</td><td>博弈树</td><td>Genus</td><td>种类</td></tr><tr><td>Generalize</td><td>泛化</td><td>Gradient descent</td><td>梯度下降</td></tr><tr><td>Genetic algorithm</td><td>遗传算法</td><td>Greedy ascent</td><td>贪婪上升</td></tr><tr><td>Ground instance</td><td>基实例</td><td>Heuristic depth-first search</td><td>启发式深度优先搜索</td></tr><tr><td>Hierarchical control</td><td>分层控制</td><td>Horizon</td><td>时域</td></tr><tr><td>Hypothesis</td><td>假设</td><td>Imperfect information game</td><td>不完全信息博弈</td></tr><tr><td>Implications</td><td>蕴含</td><td>Incoming arc</td><td>入弧</td></tr><tr><td>Incremental gradient descent</td><td>增量梯度下降</td><td>Independent and identically distributed</td><td>独立同分布</td></tr><tr><td>Independent choice logic</td><td>独立选择逻辑</td><td>Indicator variable</td><td>指示变量</td></tr><tr><td>Individual-property-value</td><td>个体-属性-值</td><td>Induction</td><td>归纳</td></tr><tr><td>Inference</td><td>推理</td><td>Information gain</td><td>信息增益</td></tr><tr><td>Information set</td><td>信息集合</td><td>Initial-state constraint</td><td>初始状态约束</td></tr><tr><td>Integrity constraint</td><td>完整性约束</td><td>Intelligent tutoring system</td><td>智能指导系统</td></tr><tr><td>Interpolation</td><td>插值</td><td>Intersection</td><td>交</td></tr><tr><td>Intervention</td><td>干预</td><td>Involve</td><td>涉及</td></tr><tr><td>Iterative best improvement</td><td>迭代最佳改进</td><td>Iterative deepening</td><td>迭代深化</td></tr><tr><td>Joint probability distribution</td><td>联合概率分布</td><td>k-fold cross validation</td><td>K-折交叉验证</td></tr><tr><td>k-means algorithm</td><td>K-均值算法</td><td>knowledge base</td><td>知识库</td></tr><tr><td>knowledge is given</td><td>知识是给定的</td><td>knowledge is learned</td><td>知识是学习到的</td></tr><tr><td>language bias</td><td>语言偏置</td><td>latent tree model</td><td>潜在树模型</td></tr><tr><td>latent variable</td><td>潜在变量</td><td>leave-one-out cross-validation</td><td>留一法交叉验证</td></tr><tr><td>likelihood of the data</td><td>数据的似然性</td><td>linear regression</td><td>线性回归</td></tr><tr><td>linear separable</td><td>线性可分</td><td>liveness</td><td>活跃性</td></tr><tr><td>local optimum</td><td>局部最优</td><td>localization</td><td>定位</td></tr><tr><td>maintenance goal</td><td>维持性目标</td><td>mapping</td><td>映射</td></tr><tr><td>matrix multiplication</td><td>矩阵乘法</td><td>maximum a posteriori probability</td><td>最大化后验概率</td></tr><tr><td>maximum-likelihood estimate</td><td>最大似然估计</td><td>meta-interpreter</td><td>元解释器</td></tr><tr><td>meta-level</td><td>元级</td><td>minimum description length</td><td>最小描述长度</td></tr><tr><td>missing at random</td><td>随机缺失</td><td>modus ponens</td><td>假言推理</td></tr><tr><td>monitoring</td><td>监督</td><td>monotonic</td><td>单调的</td></tr><tr><td>multiple-path pruning</td><td>多路径剪枝</td><td>mutex constraint</td><td>互斥约束</td></tr><tr><td>negative example</td><td>负类样本</td><td>non-ground representation</td><td>非基表示</td></tr><tr><td>non-parametric distribution</td><td>非参数化分布</td><td>object aggregate</td><td>对象聚合</td></tr><tr><td>object property</td><td>对象属性</td><td>off policy</td><td>离策略</td></tr><tr><td>omniscient agent</td><td>全知 agent</td><td>optimal solution</td><td>最优解</td></tr><tr><td>ordinal</td><td>与顺序有关的</td><td>over fitting</td><td>过拟合</td></tr><tr><td>parametric distribution</td><td>参数分布</td><td>parametrized random variable</td><td>参数随机变量</td></tr><tr><td>partial-order planning</td><td>偏序规划</td><td>payoff matric</td><td>支付矩阵</td></tr><tr><td>percept stream</td><td>感知流</td><td>perception</td><td>感知器</td></tr><tr><td>perfect information</td><td>完全信息</td><td>pixel</td><td>像素</td></tr><tr><td>partial-order</td><td>偏序</td><td>planning horizon dimension</td><td>规划时域维度</td></tr><tr><td>plate model</td><td>平板模型</td><td>policy iteration</td><td>策略迭代</td></tr><tr><td>posterior probability</td><td>后验概率</td><td>pragmatics</td><td>语用</td></tr><tr><td>precision-recall curve</td><td>准确度-召唤率曲线</td><td>precondition constraint</td><td>先决条件约束</td></tr><tr><td>predicate symbol</td><td>谓词符号</td><td>preference elicitation</td><td>偏好引出</td></tr><tr><td>prior count</td><td>先验计数</td><td>prior probability</td><td>先验概率</td></tr><tr><td>probabilistic inference</td><td>概率推理</td><td>process aggregate</td><td>过程聚合</td></tr><tr><td>projection</td><td>投影</td><td>processual entity</td><td>过程性实体</td></tr></tbody></table><table><thead><tr><th>单词 / 词组</th><th>释义</th><th>单词 / 词组</th><th>释义</th></tr></thead><tbody><tr><td>property inheritance</td><td>属性继承</td><td>propositional definite clause resolution</td><td>命题确定子句解析</td></tr><tr><td>propositional satisfiability</td><td>命题可满足性</td><td>qualitative derivative</td><td>定性导出</td></tr><tr><td>qualitative reasoning</td><td>定性推理</td><td>quality</td><td>特征</td></tr><tr><td>quantitative reasoning</td><td>定量推理</td><td>random sampling</td><td>随机采样</td></tr><tr><td>range</td><td>范围</td><td>record linkage</td><td>记录关联</td></tr><tr><td>recursively enumerable</td><td>递归可数</td><td>regression planning</td><td>回归规划</td></tr><tr><td>reify</td><td>具体化</td><td>rejection sampling</td><td>舍选采样</td></tr><tr><td>rule of derivation</td><td>推导规则</td><td>scenario</td><td>情景</td></tr><tr><td>scope</td><td>范围</td><td>second-order logic</td><td>二阶逻辑</td></tr><tr><td>semantic interoperability</td><td>语义互操作</td><td>sensing uncertainty dimension</td><td>感知不确定维度</td></tr><tr><td>senor fusion</td><td>传感器融合</td><td>sound</td><td>可靠的</td></tr><tr><td>specialization</td><td>具体化算子</td><td>specific boundary</td><td>特定的边界</td></tr><tr><td>stable</td><td>稳定的</td><td>stochastic simulation</td><td>随机模拟</td></tr><tr><td>synthesis</td><td>综合</td><td>target feature</td><td>目标特征</td></tr><tr><td>temporal difference error</td><td>时间差分误差</td><td>terminological knowledge base</td><td>术语知识库</td></tr><tr><td>theorem</td><td>定理</td><td>total assignment</td><td>全赋值</td></tr><tr><td>unary constraint</td><td>一元约束</td><td>unconditional independent</td><td>无条件独立</td></tr><tr><td>uninformed search strategy</td><td>盲目搜索策略</td><td>universally quantified</td><td>全称量化</td></tr><tr><td>validation set</td><td>验证集</td><td>vanilla meta-interpreter</td><td>普通的元解释器</td></tr><tr><td>weakly dominated</td><td>弱支配</td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ToolBox/写博客必备神器</title>
      <link href="/2020/08/15/ToolBox/%E5%86%99%E5%8D%9A%E5%AE%A2%E5%BF%85%E5%A4%87%E7%A5%9E%E5%99%A8/"/>
      <url>/2020/08/15/ToolBox/%E5%86%99%E5%8D%9A%E5%AE%A2%E5%BF%85%E5%A4%87%E7%A5%9E%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="写博客必备神器"><a class="markdownIt-Anchor" href="#写博客必备神器"></a> 写博客必备神器</h1><p>完成了博客的搭建之后，接下来就是是内容创作了。而创作的过程中，我们又会有一系列的问题，比如：</p><ul><li>我们用什么工具来编写文章呢？</li><li>怎么才能快速生成格式化的 Markdown 表格？</li><li>怎么样才能使得截取的图片最为满意呢？</li><li>怎么样才能画出一些高逼格的图片呢？</li><li>这些图片的存储和处理怎么办呢？博客使用的图片何去何从？</li></ul><p>要解决这些问题其实并不难，无非就是引入不同的工具来帮助我们，好的工具可以让我们的创作事半功倍！</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200510195130.jpg" alt="写博客必备神器" /></p><h2 id="markdown-编辑器"><a class="markdownIt-Anchor" href="#markdown-编辑器"></a> Markdown 编辑器</h2><p>先来推荐一下我们要用的最重要的一个工具：Markdown 编辑器。我们需要使用它来完成所有的创作内容，本人尝试了非常多的编辑器，最终锁定在下面这款 Typora，因此推荐给大家。</p><ul><li>推荐工具：Typora</li><li>官方地址：<a href="https://www.typora.io/" target="_blank" rel="noopener">https://www.typora.io/</a></li><li>推荐理由：作为一款免费编辑器，可以说是相当的良心，是我目前所知道的最好用的免费编辑器了，没有之一！！！它支持多个主流的操作系统，不论你是 Windows 用户还是 Mac 用户，都能轻易的安装和使用它！除此之外，它还有多种不同的主题选择、导出一些常用格式（PDF、Word、HTML）等等非常有用的功能！</li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200510184711.png" alt="Markdown 编辑器" /></p><h2 id="markdown-表格生成器"><a class="markdownIt-Anchor" href="#markdown-表格生成器"></a> Markdown 表格生成器</h2><p>对于强迫症来说，写 Markdown 表格是一件很痛苦的事情，在语法对齐的问题上我真的是受尽了折磨，所以强烈推荐一个在线 Markdown 表格生成工具，它除了能快速生成格式化后的 Markdown 表格外，还支持导入各种数据，在线编辑，简直强大！</p><ul><li>推荐工具：Table Convert Online</li><li>官方地址：<a href="https://tableconvert.com/" target="_blank" rel="noopener">https://tableconvert.com/</a></li><li>推荐理由：作为一款免费在线工具，支持 Excel、JSON、HTML、CSV 甚至是从 URL 中提取 HTML 表格转为 Markdown 表格，多功能集一身，并且融合在一个界面，使用非常方便，不需要切换页面。还可以像编辑 Excel 一样编辑生成各种表格，不愧为表格中的瑞士军刀！</li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200510184802.png" alt="Markdown 表格生成器" /></p><h2 id="截图工具"><a class="markdownIt-Anchor" href="#截图工具"></a> 截图工具</h2><p>可能有些人和我以前一样，为了截图，会在电脑端登陆 QQ 或者微信，着实不太方便，而且有时候电脑因为开启的软件过多占用内存过大而造成卡顿，所以在这里，小编推荐一款自用很久的截图工具：Snipaste，自从知道这款软件，真的是爱不释手，大大提高了工作效率！</p><ul><li>推荐工具：Snipaste</li><li>官方地址：<a href="https://zh.snipaste.com/download.html" target="_blank" rel="noopener">https://zh.snipaste.com/download.html</a></li><li>推荐理由：能够非常方便的完成截图拥有强大的贴图功能，可以帮助我一边写文章一边阅读资料截图不仅是免费软件、而且没有广告支持中文，设置方便</li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200515163845.png" alt="image-20200515163844092" /></p><h2 id="画图工具"><a class="markdownIt-Anchor" href="#画图工具"></a> 画图工具</h2><p>对于我们这些写技术文章的博主来说，画画流程图、架构图是辅助描述文章内容的最佳途径，下面要推荐的 ProcessOn 就是目前我用得最多的画图工具。</p><ul><li>推荐工具：ProcessOn</li><li>官方地址：<a href="https://www.processon.com/i/5b04bae9e4b0da6de337fd8a" target="_blank" rel="noopener">https://processon.com/</a></li><li>推荐理由：难得的国产在线图片编辑器，支持多人协作。同时，还有大量好看的图标支持，可以让我们的绘图更加生动！</li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200510184858.png" alt="画图工具" /></p><h2 id="图片存储"><a class="markdownIt-Anchor" href="#图片存储"></a> 图片存储</h2><p>可能有人会问，为什么要图片存储呢？我们直接存项目目录下不就好了吗？虽然有道理，但是你尝试过截图进编辑器即可上传的感觉吗，使用下面的方法，让你立马体验！</p><ul><li>推荐工具：Typora - PicGo - Gitee - PictureBed</li><li>官方地址：<a href="ToolBox/Typora-PicGo-Gitee-PictureBed-Cool">Typora - PicGo - Gitee - PictureBed - Cool</a></li><li>推荐理由：简单好用、足够稳定，加载速度超快！</li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/CS-Notes/20200420192754.gif" alt="图片存储" /></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ToolBox/分享如何在论文中画插图</title>
      <link href="/2020/08/15/ToolBox/%E5%88%86%E4%BA%AB%E5%A6%82%E4%BD%95%E5%9C%A8%E8%AE%BA%E6%96%87%E4%B8%AD%E7%94%BB%E6%8F%92%E5%9B%BE/"/>
      <url>/2020/08/15/ToolBox/%E5%88%86%E4%BA%AB%E5%A6%82%E4%BD%95%E5%9C%A8%E8%AE%BA%E6%96%87%E4%B8%AD%E7%94%BB%E6%8F%92%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="在论文中如何画出漂亮的插图"><a class="markdownIt-Anchor" href="#在论文中如何画出漂亮的插图"></a> 在论文中如何画出漂亮的插图</h1><blockquote><p>专业的论文配图有哪些要求：</p></blockquote><p>一、<strong>规范性</strong>：选择的论文配图首先要规矩，符合期刊的投稿要求，然后在规矩的基础上再实现图表的美观和专业。</p><p>二、<strong>必要性</strong>：只放对文章有必要的解释说明或者辅助补充作用的图，不必要的配图不放。</p><p>三、<strong>代表性</strong>：即使是必要的图片，也不需要都放上去，只需要选出具有代表性的图片即可。</p><p>四、<strong>图片清晰度</strong>：这是很重要的一点，辛辛苦苦选出了有必要又具代表性的图片，最后如果因为图片不清晰导致被 pass 掉，那可就得不偿失了。</p><blockquote><p>如何在论文中画出漂亮的插图呢？</p></blockquote><h2 id="1-biorender"><a class="markdownIt-Anchor" href="#1-biorender"></a> 1. BioRender</h2><p>生物科学方面的多些，感兴趣的可以试试</p><ul><li><a href="https://biorender.com/" target="_blank" rel="noopener">https://biorender.com/</a></li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200527101241.png" alt="image-20200527101240649" /></p><h2 id="2-matplotlib"><a class="markdownIt-Anchor" href="#2-matplotlib"></a> 2. Matplotlib</h2><p>强烈推荐 Python 的绘图模块 <a href="https://matplotlib.org/" target="_blank" rel="noopener">matplotlib: python plotting</a> 。画出来的图真的是高端大气上档次，低调奢华有内涵~ 适用于从 2D 到 3D，从标量到矢量的各种绘图。能够保存成从 eps, pdf 到 svg, png, jpg 的多种格式。并且 Matplotlib 的绘图函数基本上都与 Matlab 的绘图函数名字都差不多，迁移的学习成本比较低。开源免费。</p><ul><li><a href="https://matplotlib.org/" target="_blank" rel="noopener">https://matplotlib.org/</a></li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200527100748.png" alt="image-20200527100738350" /></p><h2 id="3-seaborn"><a class="markdownIt-Anchor" href="#3-seaborn"></a> 3. Seaborn</h2><p>Seaborn 是基于 matplotlib 的图形可视化 python 包。它提供了一种高度交互式界面，便于用户能够做出各种有吸引力的统计图表。</p><ul><li><a href="http://seaborn.pydata.org/" target="_blank" rel="noopener">http://seaborn.pydata.org/</a></li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200527101651.png" alt="image-20200527101649592" /></p><h2 id="4-scikit-plot"><a class="markdownIt-Anchor" href="#4-scikit-plot"></a> 4. Scikit-plot</h2><p>这是一个机器学习的画图神器，几行代码就能画出高大上的机器学习图。</p><ul><li><a href="https://github.com/wugenqiang/scikit-plot" target="_blank" rel="noopener">https://github.com/wugenqiang/scikit-plot</a></li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200527102110.png" alt="image-20200527102107866" /></p><h2 id="5-latex"><a class="markdownIt-Anchor" href="#5-latex"></a> 5. Latex</h2><ul><li><a href="https://www.latex-project.org/" target="_blank" rel="noopener">https://www.latex-project.org/</a></li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200527102443.png" alt="image-20200527102442316" /></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ToolBox/XMind制作思维导图</title>
      <link href="/2020/08/15/ToolBox/XMind%E5%88%B6%E4%BD%9C%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
      <url>/2020/08/15/ToolBox/XMind%E5%88%B6%E4%BD%9C%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="xmind-制作思维导图"><a class="markdownIt-Anchor" href="#xmind-制作思维导图"></a> XMind 制作思维导图</h1><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>XMind 官网：<a href="https://www.xmind.cn/" target="_blank" rel="noopener">https://www.xmind.cn/</a></p><p>想要 <code>XMind: ZEN 2020</code> 全功能版的，可以右下角和我联系。</p><p><a href="https://www.xmind.cn/xmind2020/release-notes/" target="_blank" rel="noopener">XMind 2020 更新日志</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ToolBox/Win10安装与配置Tomcat</title>
      <link href="/2020/08/15/ToolBox/Win10%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AETomcat/"/>
      <url>/2020/08/15/ToolBox/Win10%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AETomcat/</url>
      
        <content type="html"><![CDATA[<h1 id="tomcat安装与配置win10"><a class="markdownIt-Anchor" href="#tomcat安装与配置win10"></a> Tomcat安装与配置（Win10）</h1><h2 id="下载"><a class="markdownIt-Anchor" href="#下载"></a> 下载</h2><p>Tomcat官网：<a href="https://tomcat.apache.org/" target="_blank" rel="noopener">https://tomcat.apache.org/</a></p><p><img src= "/img/loading.gif" data-src="https://keyon-photo-1256901694.cos.ap-beijing.myqcloud.com/markdown/20191113175502.png" alt="" /></p><p>Core: 64-bit Windows zip</p><h2 id="解压"><a class="markdownIt-Anchor" href="#解压"></a> 解压</h2><p>解压到电脑，要求路径非中文。例如 F:\Dev\apache-tomcat-9.0.27</p><h2 id="配置环境变量"><a class="markdownIt-Anchor" href="#配置环境变量"></a> 配置环境变量</h2><p>新增变量：</p><ul><li><p>变量名：CATALINA_BASE</p></li><li><p>变量值：tomcat根目录，例如 F:\Dev\apache-tomcat-9.0.27</p></li><li><p>变量名：CATALINA_HOME</p></li><li><p>变量值：tomcat根目录，例如 F:\Dev\apache-tomcat-9.0.27</p></li></ul><p>在Path环境变量中添加：</p><ul><li>%CATALINA_HOME%\lib</li><li>%CATALINA_HOME%\bin</li></ul><h2 id="验证"><a class="markdownIt-Anchor" href="#验证"></a> 验证</h2><p>打开命令行，输入startup启动tomcat。</p><p>等待日志输出完毕，服务器启动后，打开浏览器访问 localhost:8080，若成功打开Tomcat成功提示界面则配置完毕。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ToolBox/TamperMonkey使用指南</title>
      <link href="/2020/08/15/ToolBox/TamperMonkey%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2020/08/15/ToolBox/TamperMonkey%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="tampermonkey-使用指南"><a class="markdownIt-Anchor" href="#tampermonkey-使用指南"></a> TamperMonkey 使用指南</h1><blockquote><p>TamperMonkey 油猴，功能很强大，值得一试！下面介绍在 Chrome 浏览器下使用油猴的操作说明以及使用脚本，在其他浏览器上使用油猴的同仁可以参考这里：<a href="https://www.80note.com/categories/Tampermonkey/" target="_blank" rel="noopener">不同浏览器安装油猴的方法集合！</a></p></blockquote><h2 id="一-油猴是什么"><a class="markdownIt-Anchor" href="#一-油猴是什么"></a> 一、油猴是什么</h2><p>Tampermonkey 是一款浏览器脚本管理插件，支持大多常见浏览器，结合脚本大全网站 greasyfork，能够方便的实现脚本旳一键安装、自动更新、快速启用等便捷功能，通过用户脚本可以实现很多实用或有趣的功能。</p><p>「油猴」也可以通过安装各类脚本对网站进行定制。不过它能定制的不仅仅是网站的样式，还能实现更多更强大的功能，</p><ul><li>直接下载百度网盘文件</li><li>重新定制繁杂的微博页面</li><li>去掉视频播放广告</li><li>将网站默认的「二维码登录」改回「账号密码登录」</li><li>绕过搜索引擎的跳转提示</li><li>还原清新的小说阅读模式</li><li>豆瓣和 IMDb 互相显示评分</li></ul><h2 id="二-安装油猴"><a class="markdownIt-Anchor" href="#二-安装油猴"></a> 二、安装油猴</h2><p>先附上油猴的下载地址：<a href="https://tampermonkey.net/" target="_blank" rel="noopener">tampermonkey下载地址点这里</a></p><p>通过点击这个下载进行下载油猴脚本管理器（这里可能有的用户打不开，这是因为谷歌被限制的原因，可以的话尝试翻墙，不能翻墙的可以参考这里：<a href="https://www.80note.com/2019/05/811.html" target="_blank" rel="noopener">无需科学上网</a>）</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200516084119.png" alt="image-20200516084110265" /></p><p>这里左边是稳定版，右边是测试版，都可以下载，选择一个下载就可以。然后添加至 Chrome 即可：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200516084235.png" alt="image-20200516084234027" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200516084403.png" alt="image-20200516084359866" /></p><p>添加之后会发现，浏览器右上角有了一个图标：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200516084826.png" alt="image-20200516084824870" /></p><p>这里就是我们管理油猴的地方，到此安装已经结束。</p><h2 id="三-脚本资源获取途径"><a class="markdownIt-Anchor" href="#三-脚本资源获取途径"></a> 三、脚本资源获取途径</h2><p>先上干货，<a href="https://greasyfork.org/zh-CN/scripts" target="_blank" rel="noopener">https://greasyfork.org/zh-CN/scripts</a>，这是我平时寻找油猴脚本最喜欢的地方。</p><p>不过你也可以这样做：</p><p>1、点击图标，选中获取新脚本</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200516085130.png" alt="image-20200516085129577" /></p><p>进入到下面页面：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200516085230.png" alt="image-20200516085229543" /></p><p>2、点击红框内的地址，即可进入脚本资源网站，便可以寻找你想要的脚本啦！是不是很 nice 呢！</p><blockquote><p>好啦，下面进行添加优秀实用的脚本</p></blockquote><h2 id="四-实用脚本推荐"><a class="markdownIt-Anchor" href="#四-实用脚本推荐"></a> 四、实用脚本推荐</h2><h3 id="1-vip-视频免费观看"><a class="markdownIt-Anchor" href="#1-vip-视频免费观看"></a> 1、VIP 视频免费观看</h3><blockquote><p>具体功能：懒人专用，全网VIP视频免费破解去广告、全网音乐直接下载、百度网盘直接下载、知乎视频下载等多合一版。长期更新，放心使用。</p></blockquote><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200516090051.png" alt="image-20200516090049890" /></p><p>下载链接：<a href="https://greasyfork.org/zh-CN/scripts/370634-%E6%87%92%E4%BA%BA%E4%B8%93%E7%94%A8-%E5%85%A8%E7%BD%91vip%E8%A7%86%E9%A2%91%E5%85%8D%E8%B4%B9%E7%A0%B4%E8%A7%A3%E5%8E%BB%E5%B9%BF%E5%91%8A-%E5%85%A8%E7%BD%91%E9%9F%B3%E4%B9%90%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD-%E7%9F%A5%E4%B9%8E%E8%A7%86%E9%A2%91%E4%B8%8B%E8%BD%BD%E7%AD%89%E5%A4%9A%E5%90%88%E4%B8%80%E7%89%88-%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0-%E6%94%BE%E5%BF%83%E4%BD%BF%E7%94%A8" target="_blank" rel="noopener">点击这里</a></p><p>安装此脚本即可</p><p>然后点击油猴图标，点击管理面板，即可发现已经安装，下载来测试一下</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200516090424.png" alt="image-20200516090423723" /></p><p>点击左侧红色图标</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200516090642.png" alt="image-20200516090640383" /></p><p>即可跳转播放！要不要赶紧试试，去吧！</p><h3 id="2-百度网盘直链下载助手"><a class="markdownIt-Anchor" href="#2-百度网盘直链下载助手"></a> 2、百度网盘直链下载助手</h3><p><a href="https://greasyfork.org/zh-CN/scripts/389454-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%9B%B4%E9%93%BE%E4%B8%8B%E8%BD%BD%E5%8A%A9%E6%89%8B" target="_blank" rel="noopener">安装地址</a></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200516100855.png" alt="image-20200516100854660" /></p><p>效果图：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200516100948.png" alt="image-20200516100946680" /></p><p>!&gt; 失效了，好多好用的软件在正品面前还是，有条件的选择会员吧！</p><h3 id="3-知网下载助手"><a class="markdownIt-Anchor" href="#3-知网下载助手"></a> 3、知网下载助手</h3><p><a href="https://greasyfork.org/zh-CN/scripts/371938-%E7%9F%A5%E7%BD%91%E4%B8%8B%E8%BD%BD%E5%8A%A9%E6%89%8B" target="_blank" rel="noopener">知网下载助手安装地址</a></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200516092909.png" alt="image-20200516092908113" /></p><p>也可以安装这个下载，<a href="https://greasyfork.org/zh-CN/scripts/389343-%E4%B8%AD%E5%9B%BD%E7%9F%A5%E7%BD%91cnki%E7%A1%95%E5%8D%9A%E8%AE%BA%E6%96%87pdf%E4%B8%8B%E8%BD%BD" target="_blank" rel="noopener">安装地址</a></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200516093041.png" alt="image-20200516093039864" /></p><p>其他的自己去体验吧，嘿嘿嘿！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ToolBox/Typora-PicGo-Gitee-PictureBed-Cool</title>
      <link href="/2020/08/15/ToolBox/Typora-PicGo-Gitee-PictureBed-Cool/"/>
      <url>/2020/08/15/ToolBox/Typora-PicGo-Gitee-PictureBed-Cool/</url>
      
        <content type="html"><![CDATA[<h1 id="typorapicgogitee实现图片上传功能"><a class="markdownIt-Anchor" href="#typorapicgogitee实现图片上传功能"></a> Typora+PicGo+Gitee实现图片上传功能</h1><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><blockquote><p>使用举例：</p></blockquote><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/CS-Notes/20200420192754.gif" alt="" /></p><p>好了，功能是不是很满意？节省了很多时间是不是，很 nice！下面来具体实现：</p><h2 id="建立-gitee-图床"><a class="markdownIt-Anchor" href="#建立-gitee-图床"></a> 建立 Gitee 图床</h2><blockquote><p>注册 gitee 账号并创建一个仓库当图床</p></blockquote><p>（1）注册或登陆 Gitee</p><p>Gitee 官网网址：<a href="https://gitee.com/" target="_blank" rel="noopener">https://gitee.com/</a></p><p>注册账号在这里就不说明了啊，注册好账号之后登陆 Gitee</p><p>（2）新建仓库当图床</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/CS-Notes/20200420194750.png" alt="image-20200420194749470" /></p><p>然后改图片中的三处：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/CS-Notes/20200420195038.png" alt="image-20200420195037189" /></p><p>因为我已经建立了 PictureBed 这个仓库，所以提示已经存在。</p><h2 id="生成私人令牌"><a class="markdownIt-Anchor" href="#生成私人令牌"></a> 生成私人令牌</h2><p>点击设置里的私人令牌，点击生成私人令牌</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/CS-Notes/20200420195310.png" alt="image-20200420195308681" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/CS-Notes/20200420195400.png" alt="image-20200420195358945" /></p><p>提交即可，复制令牌，可以写在 text 文本中，稍后在 Gitee 图床配置中会用到！</p><p>!&gt; 注：令牌只会显示一次，如果不复制的话，就只能重新修改令牌，步骤：修改 --&gt; 重新生成令牌</p><h2 id="安装-picgo"><a class="markdownIt-Anchor" href="#安装-picgo"></a> 安装 PicGo</h2><p>这是一款图片上传的工具，目前支持微博图床，七牛图床，腾讯云，又拍云，GitHub，Gitee等图床，在这里，我们使用 Gitee 作为图床。</p><blockquote><p>下载 PicGo</p></blockquote><p>下载链接：<a href="https://github.com/Molunerfinn/picgo/releases" target="_blank" rel="noopener">https://github.com/Molunerfinn/picgo/releases</a></p><p>选个自己喜欢的版本，点击进入，找到后缀 <code>.exe</code> 的，点击后自动下载。或者直接使用最新版。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/CS-Notes/20200420193738.png" alt="image-20200420193736920" /></p><h2 id="picgo-配置-gitee-图床"><a class="markdownIt-Anchor" href="#picgo-配置-gitee-图床"></a> PicGo 配置 Gitee 图床</h2><p>（1）下载 Gitee 插件</p><p>注：若没有安装 node.js ，则会安装不了插件。因为插件下载需要使用到 node.js 的 npm！</p><blockquote><p>安装 node.js</p></blockquote><p>node.js 官网下载链接：<a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">https://nodejs.org/zh-cn/</a></p><p>安装好之后，打开 PicGo 软件，点击插件设置，搜索 gitee，选择第一个即可，右边的插件也可以，配置过程也差不多</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/CS-Notes/20200420204737.png" alt="image-20200420204736134" /></p><p>（2）配置 Gitee 图床</p><p>首先在 PicGo 设置中选择 Gitee 图床</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/CS-Notes/20200420204910.png" alt="image-20200420204908684" /></p><p>然后在图床设置中进行配置 Gitee 图床</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/CS-Notes/20200420205322.png" alt="image-20200420205320933" /></p><p>点击确定，就可以使用了，如果只想上传图片，到这一步就可以了，不过我还是推荐你继续往下看，因为真的很提高开发效率！</p><h2 id="typora-配置-gitee-图床"><a class="markdownIt-Anchor" href="#typora-配置-gitee-图床"></a> Typora 配置 Gitee 图床</h2><p>使用这一步，首先要下载安装 Typora，官网地址：<a href="https://www.typora.io/" target="_blank" rel="noopener">https://www.typora.io/</a> 直接安装即可，操作简单。</p><p>安装好 Typora 之后，打开进入 Typora，点击上方目录：文件 --&gt; 偏好设置  --&gt;  图像 --&gt; 配置图床</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/CS-Notes/20200420210515.png" alt="image-20200420210514149" /></p><p>关键一步：</p><p>当点击验证图片上传选项时，会提示你使用下面网址上传，记住它！比如我的是 <a href="http://127.0.0.1:36677/upload%EF%BC%8C%E8%A6%81%E4%BF%9D%E8%AF%81%E8%BF%99%E9%87%8C%E7%9A%84%E5%9C%B0%E5%9D%80%E5%92%8C" target="_blank" rel="noopener">http://127.0.0.1:36677/upload，要保证这里的地址和</a> PicGo 中的上传地址一致，所以要去 PicGo 中去验证，不一样就将 PicGo 中的地址改成这里的就可以了。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/CS-Notes/20200420210650.png" alt="image-20200420210648822" /></p><p>到 PicGo 中去验证：</p><p>点击 PicGo 设置 --&gt; 设置 Sever，若和 Typora 中图片上传地址不一样，改成 Typora 中的监听端口即可，然后确认。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/CS-Notes/20200420211122.png" alt="image-20200420211120698" /></p><blockquote><p>测试使用</p></blockquote><p>去前言部分看效果，测试嘛，你试试就知道啦！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ToolBox/Tools</title>
      <link href="/2020/08/15/ToolBox/Tools/"/>
      <url>/2020/08/15/ToolBox/Tools/</url>
      
        <content type="html"><![CDATA[<h1 id="toolbox-工具库"><a class="markdownIt-Anchor" href="#toolbox-工具库"></a> ToolBox 工具库</h1><h2 id="1-markdown"><a class="markdownIt-Anchor" href="#1-markdown"></a> 1 Markdown</h2><ul><li><a href="https://pandao.github.io/editor.md/" target="_blank" rel="noopener">Markdown 在线编辑器</a></li><li><a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="noopener">作业部落 Markdown</a></li><li><a href="https://typora.io/" target="_blank" rel="noopener">typora</a> 分享一个 Markdown 编辑器 typora，简洁高效，操作简单，界面美观，在书写文档的时候有全新的体验。<br />进一步了解可参考这篇博客<a href="https://blog.csdn.net/mingzhuo_126/article/details/79941450" target="_blank" rel="noopener">初识 Typora</a></li><li><a href="https://webdemo.myscript.com/" target="_blank" rel="noopener">myscript 网站可以手写公式，自动转为 LaTeX 语法</a></li></ul><h2 id="2-图片处理"><a class="markdownIt-Anchor" href="#2-图片处理"></a> 2 图片处理</h2><h3 id="21-图床"><a class="markdownIt-Anchor" href="#21-图床"></a> 2.1 图床</h3><ul><li><p><a href="https://sm.ms/" target="_blank" rel="noopener">sm.ms 免费图床</a></p><p>这个图床免费免注册，可以长期使用，很 nice</p></li><li><p><a href="https://imgchr.com/" target="_blank" rel="noopener">路过图床</a></p></li><li><p><a href="https://wugenqiang.github.io/articles/hexo-do-optimization-picture.html" target="_blank" rel="noopener">PicGo + Github 图床构建</a></p></li><li><p><a href="https://wugenqiang.github.io/articles/Typora-PicGo-Gitee-PictureBed-Cool.html" target="_blank" rel="noopener">Typora+PicGo+Gitee 实现图片上传功能</a></p></li></ul><h3 id="22-图标下载"><a class="markdownIt-Anchor" href="#22-图标下载"></a> 2.2 图标下载</h3><ul><li><p><a href="https://www.iconfont.cn/" target="_blank" rel="noopener">阿里矢量图标库 - 图标下载</a><br /><img src= "/img/loading.gif" data-src="https://wugenqiang.github.io/PictureBed/pictures/20190427114906.png" alt="" /></p></li><li><p><a href="https://icons8.cn/" target="_blank" rel="noopener">icon8 图标</a><br /><img src= "/img/loading.gif" data-src="https://wugenqiang.github.io/PictureBed/pictures/20190427115034.png" alt="" /></p></li><li><p><a href="https://www.vcg.com/" target="_blank" rel="noopener">视觉中国</a></p></li></ul><h3 id="23-photoshop-在线精简版"><a class="markdownIt-Anchor" href="#23-photoshop-在线精简版"></a> 2.3 Photoshop 在线精简版</h3><ul><li><a href="https://www.uupoop.com/" target="_blank" rel="noopener">Photoshop 在线精简版</a></li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/CS-Notes/20200423123413.png" alt="image-20200423123412686" /></p><h3 id="24-免费抠图工具"><a class="markdownIt-Anchor" href="#24-免费抠图工具"></a> 2.4 免费抠图工具</h3><ul><li><a href="https://www.gaoding.com/koutu" target="_blank" rel="noopener">稿定设计</a><br /><img src= "/img/loading.gif" data-src="https://wugenqiang.github.io/PictureBed/pictures/20190427112421.png" alt="" /></li></ul><h3 id="25-压缩图片"><a class="markdownIt-Anchor" href="#25-压缩图片"></a> 2.5 压缩图片</h3><ul><li><p><a href="https://www.picdiet.com/zh-cn" target="_blank" rel="noopener">Picdiet</a><br /><img src= "/img/loading.gif" data-src="https://wugenqiang.github.io/PictureBed/pictures/20190427112632.png" alt="" /></p></li><li><p><a href="https://squoosh.app/" target="_blank" rel="noopener">Squoosh</a><br />这是 Google 搞的一个免费开源在线压缩工具<br /><img src= "/img/loading.gif" data-src="https://wugenqiang.github.io/PictureBed/pictures/20190427114055.png" alt="" /></p></li></ul><h3 id="26-gif-图处理"><a class="markdownIt-Anchor" href="#26-gif-图处理"></a> 2.6 GIF 图处理</h3><ul><li><a href="http://">SOOGIF</a><br />网站不仅提供了 gif 图像处理, 还提供了许多 gif 资源<br /><img src= "/img/loading.gif" data-src="https://wugenqiang.github.io/PictureBed/pictures/20190427114338.png" alt="" /></li></ul><h3 id="27-waifu2x"><a class="markdownIt-Anchor" href="#27-waifu2x"></a> 2.7 Waifu2x</h3><ul><li><a href="http://waifu2x.udp.jp/" target="_blank" rel="noopener">Waifu2x</a></li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/CS-Notes/20200423123540.png" alt="image-20200423123538782" /></p><h2 id="3-文件格式转换"><a class="markdownIt-Anchor" href="#3-文件格式转换"></a> 3 文件格式转换</h2><ul><li><p><a href="https://cn.office-converter.com/" target="_blank" rel="noopener">Office Converter</a><br />支持视频、音频、图片、Office 文档等的文件转换工具<br /><img src= "/img/loading.gif" data-src="https://wugenqiang.github.io/PictureBed/pictures/gif007.gif" alt="Office Converter" /></p></li><li><p><a href="https://zh.pickfrom.net/" target="_blank" rel="noopener">PickFrom</a><br />不仅仅可以转换文件，而且可以截图、下载视频呢<br /><img src= "/img/loading.gif" data-src="https://wugenqiang.github.io/PictureBed/pictures/20190427105235.png" alt="" /></p></li><li><p><a href="https://smallpdf.com/" target="_blank" rel="noopener">Smallpdf</a><br />支持格式互转、压缩、合并、拆分 PDF<br /><img src= "/img/loading.gif" data-src="https://wugenqiang.github.io/PictureBed/pictures/20190427111522.png" alt="" /></p></li></ul><h2 id="4-在线短信接收"><a class="markdownIt-Anchor" href="#4-在线短信接收"></a> 4 在线短信接收</h2><ul><li><a href="https://www.pdflibr.com/" target="_blank" rel="noopener">在线短信接收</a> 云短信<br /><img src= "/img/loading.gif" data-src="https://wugenqiang.github.io/PictureBed/pictures/20190427104808.png" alt="在线短信接收" /></li></ul><h2 id="5-在线作图"><a class="markdownIt-Anchor" href="#5-在线作图"></a> 5 在线作图</h2><ul><li><a href="https://www.processon.com/" target="_blank" rel="noopener">在线作图ProcessOn</a>   支持流程图、思维导图、原型图、UML、网络拓扑图、组织结构图等</li><li><a href="https://app.diagrams.net/" target="_blank" rel="noopener">draw.io - 在线作图</a> 支持的类型比 Processon 更多，好看的既定样式也更多~</li></ul><h2 id="6-vpn分享"><a class="markdownIt-Anchor" href="#6-vpn分享"></a> 6 VPN分享</h2><ul><li><a href="https://wugenqiang.gitee.io/articles/FreeVpnToShare.html" target="_blank" rel="noopener">FreeVpnToShare</a></li></ul><h2 id="7-文件互传"><a class="markdownIt-Anchor" href="#7-文件互传"></a> 7 文件互传</h2><ul><li><a href="https://send.firefox.com/" target="_blank" rel="noopener">Firefox Send</a><br />端到端加密分享文件<br /><img src= "/img/loading.gif" data-src="https://wugenqiang.github.io/PictureBed/pictures/20190427110410.png" alt="" /></li><li><a href="http://cend.me/" target="_blank" rel="noopener">CendMe</a><br />局域网文件传送：直接文件传输，无需服务器参与，自动生成密码保护，接受任何尺寸立即传输同一网络上的设备</li></ul><p><img src= "/img/loading.gif" data-src="https://wugenqiang.github.io/PictureBed/pictures/20190427154718.png" alt="" /></p><h2 id="8-视频特效"><a class="markdownIt-Anchor" href="#8-视频特效"></a> 8 视频特效</h2><ul><li><a href="https://photomosh.com/" target="_blank" rel="noopener">视频特效 PhotoMosh </a><br />提供抖音风格的特效，可以对图片、视频进行简单的处理<br /><img src= "/img/loading.gif" data-src="https://wugenqiang.github.io/PictureBed/pictures/20190427112047.png" alt="" /></li></ul><h2 id="9-自媒体"><a class="markdownIt-Anchor" href="#9-自媒体"></a> 9 自媒体</h2><p>易撰：<a href="https://www.yizhuan5.com/" target="_blank" rel="noopener">https://www.yizhuan5.com/</a></p><p>新榜：<a href="https://www.newrank.cn/" target="_blank" rel="noopener">https://www.newrank.cn/</a></p><p>人人都是产品经理：<a href="http://www.woshipm.com/" target="_blank" rel="noopener">http://www.woshipm.com/</a></p><p>爱运营：<a href="https://www.iyunying.org/" target="_blank" rel="noopener">https://www.iyunying.org/</a></p><p>数英网：<a href="https://www.digitaling.com/" target="_blank" rel="noopener">https://www.digitaling.com/</a></p><p>topys-全球顶尖创业分享平台：<a href="https://www.topys.cn/" target="_blank" rel="noopener">https://www.topys.cn/</a></p><p>自媒体搜索引擎：</p><p>淘金阁：<a href="http://www.51taojinge.com/" target="_blank" rel="noopener">http://www.51taojinge.com/</a></p><h2 id="10-mp4-视频测试-url-地址"><a class="markdownIt-Anchor" href="#10-mp4-视频测试-url-地址"></a> 10 MP4 视频测试 URL 地址</h2><blockquote><p>URL：资源定位符（Uniform Resource Locators）</p></blockquote><h3 id="101-视频测试-url-地址"><a class="markdownIt-Anchor" href="#101-视频测试-url-地址"></a> 10.1 视频测试 URL 地址</h3><ul><li>地址一：<a href="http://vjs.zencdn.net/v/oceans.mp4" target="_blank" rel="noopener">http://vjs.zencdn.net/v/oceans.mp4</a></li></ul><p><video poster="https://wugenqiang.github.io/NoteBook/images/20190301125255914.png" src="http://vjs.zencdn.net/v/oceans.mp4" controls width="68%"></video></p><ul><li>地址二：<a href="http://mirror.aarnet.edu.au/pub/TED-talks/911Mothers_2010W-480p.mp4" target="_blank" rel="noopener">http://mirror.aarnet.edu.au/pub/TED-talks/911Mothers_2010W-480p.mp4</a></li></ul><p><video poster="https://wugenqiang.github.io/NoteBook/images/20190301125640791.png" src="http://mirror.aarnet.edu.au/pub/TED-talks/911Mothers_2010W-480p.mp4" controls width="68%"></video></p><ul><li>地址三：<a href="http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4" target="_blank" rel="noopener">http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4</a></li></ul><p><img src= "/img/loading.gif" data-src="https://wugenqiang.github.io/NoteBook/images/video-poster.png" alt="" /></p><h3 id="102-mp4-链接-url-获取"><a class="markdownIt-Anchor" href="#102-mp4-链接-url-获取"></a> 10.2 MP4 链接 URL 获取</h3><ul><li>地址一：<a href="https://www.sample-videos.com/index.php#sample-mp4-video" target="_blank" rel="noopener">https://www.sample-videos.com/index.php#sample-mp4-video</a></li><li>地址二：<a href="http://ultravideo.cs.tut.fi/#testsequences" target="_blank" rel="noopener">http://ultravideo.cs.tut.fi/#testsequences</a></li><li>地址三：<a href="http://video.mtime.com/" target="_blank" rel="noopener">http://video.mtime.com/</a></li></ul><h2 id="11-ctfcrypto"><a class="markdownIt-Anchor" href="#11-ctfcrypto"></a> 11 CTF(Crypto)</h2><p>CTF 是 Capture The Flag 的简称，中文咱们叫<strong>夺旗赛</strong>，其本意是西方的一种传统运动。在比赛上两军会互相争夺旗帜，当有一方的旗帜已被敌军夺取，就代表了那一方的战败。在信息安全领域的 CTF 是说，通过各种<strong>攻击手法</strong>，获取服务器后寻找指定的<strong>字段</strong>，或者文件中某一个固定格式的字段，这个字段叫做 <strong>flag</strong>，其形式一般为 flag{xxxxxxxx}，提交到裁判机就可以得分。</p><p>Crypto：crypto 模块的目的是为了提供通用的加密和哈希算法。用纯JavaScript代码实现这些功能不是不可能，但速度会非常慢。Nodejs用C/C++实现这些算法后，通过cypto这个模块暴露为JavaScript接口，这样用起来方便，运行速度也快。</p><ul><li><a href="http://ctf.ssleye.com/" target="_blank" rel="noopener">CTF Tools</a></li><li><a href="http://rumkin.com/tools/cipher/playfair.php" target="_blank" rel="noopener">playfair 在线加解密</a></li><li><a href="https://adworld.xctf.org.cn/" target="_blank" rel="noopener">Practice</a></li><li><a href="http://ascii.911cha.com/" target="_blank" rel="noopener">ASCII码表查询</a></li></ul><h2 id="12-色彩搭配"><a class="markdownIt-Anchor" href="#12-色彩搭配"></a> 12 色彩搭配</h2><ul><li><a href="https://flatuicolors.com/" target="_blank" rel="noopener">https://flatuicolors.com/</a></li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200511114220.png" alt="image-20200511114219322" /></p><h2 id="13-jquery-特效插件"><a class="markdownIt-Anchor" href="#13-jquery-特效插件"></a> 13 Jquery 特效插件</h2><ul><li><a href="http://www.jq22.com/" target="_blank" rel="noopener">http://www.jq22.com/</a></li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200511115056.png" alt="image-20200511115054865" /></p><h2 id="14-css-特效"><a class="markdownIt-Anchor" href="#14-css-特效"></a> 14 CSS 特效</h2><ul><li><a href="https://codepen.io/" target="_blank" rel="noopener">CodePen</a></li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200511115232.png" alt="image-20200511115231544" /></p><h2 id="15-获取图片"><a class="markdownIt-Anchor" href="#15-获取图片"></a> 15 获取图片</h2><ul><li><a href="http://www.win4000.com/" target="_blank" rel="noopener">美桌壁纸网</a></li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200527174026.png" alt="image-20200527174025485" /></p><h2 id="16-pdf-获取"><a class="markdownIt-Anchor" href="#16-pdf-获取"></a> 16 PDF 获取</h2><h3 id="161-鸠摩搜索"><a class="markdownIt-Anchor" href="#161-鸠摩搜索"></a> 16.1 鸠摩搜索</h3><ul><li><a href="https://www.jiumodiary.com/" target="_blank" rel="noopener">https://www.jiumodiary.com/</a></li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200611202548.png" alt="image-20200611202546950" /></p><h3 id="162-pdf-之家"><a class="markdownIt-Anchor" href="#162-pdf-之家"></a> 16.2 PDF 之家</h3><ul><li><a href="http://pdfzj.cn/" target="_blank" rel="noopener">http://pdfzj.cn/</a></li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200611202848.png" alt="image-20200611202847155" /></p><h3 id="163-计算机书籍控"><a class="markdownIt-Anchor" href="#163-计算机书籍控"></a> 16.3 计算机书籍控</h3><ul><li><a href="http://bestcbooks.com/" target="_blank" rel="noopener">http://bestcbooks.com/</a></li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200611203301.png" alt="image-20200611203259747" /></p><h3 id="164-淘链客"><a class="markdownIt-Anchor" href="#164-淘链客"></a> 16.4 淘链客</h3><ul><li><a href="http://www.toplinks.cc/" target="_blank" rel="noopener">http://www.toplinks.cc/</a></li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200611205829.png" alt="image-20200611205827909" /></p><h3 id="165-library-genesis"><a class="markdownIt-Anchor" href="#165-library-genesis"></a> 16.5 Library Genesis</h3><ul><li><a href="https://libgen.is/" target="_blank" rel="noopener">https://libgen.is/</a></li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200611210034.png" alt="image-20200611210033346" /></p><h3 id="166-electronic-library"><a class="markdownIt-Anchor" href="#166-electronic-library"></a> 16.6 Electronic library</h3><ul><li><a href="https://b-ok.asia/" target="_blank" rel="noopener">https://b-ok.asia/</a></li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200611210231.png" alt="image-20200611210229657" /></p><h3 id="167-itbook"><a class="markdownIt-Anchor" href="#167-itbook"></a> 16.7 ITBook</h3><ul><li><a href="https://itbook.download/" target="_blank" rel="noopener">https://itbook.download/</a></li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200612162551.png" alt="image-20200612162529703" /></p><h2 id="17-其他"><a class="markdownIt-Anchor" href="#17-其他"></a> 17 其他</h2><ul><li><a href="https://www.wntool.com/" target="_blank" rel="noopener">万能兔工具网</a></li><li><a href="https://www.tooleyes.com/" target="_blank" rel="noopener">工具网</a></li><li><a href="https://cmd5.la/" target="_blank" rel="noopener">MD5 解密</a></li><li><a href="http://scan.ssleye.com/" target="_blank" rel="noopener">SSL 漏洞在线检测工具</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ToolBox/ShortcutKey</title>
      <link href="/2020/08/15/ToolBox/ShortcutKey/"/>
      <url>/2020/08/15/ToolBox/ShortcutKey/</url>
      
        <content type="html"><![CDATA[<h1 id="shortcut-key"><a class="markdownIt-Anchor" href="#shortcut-key"></a> Shortcut Key</h1><p>键盘：IKBC Poker 升级版 61键位</p><p>DIP设置：1110</p><p>布局：（去除了CAPSLOCK键，替换成Fn）</p><p>工作层：Pn层</p><p>Pn编程自定义键位：</p><ul><li>CAPSLOCK -&gt; WIN</li></ul><p><img src= "/img/loading.gif" data-src="https://keyon-photo-1256901694.cos.ap-beijing.myqcloud.com/markdown/20191215161407.png" alt="" /></p><blockquote><p><a href="https://www.zhihu.com/question/24453206?sort=created" target="_blank" rel="noopener">如何评价iKBC的Poker键盘？</a></p></blockquote><h2 id="intellij-idea"><a class="markdownIt-Anchor" href="#intellij-idea"></a> IntelliJ IDEA</h2><ul><li><code>Ctrl+E</code> 最近修改的文件</li><li><code>Ctrl+J</code> 自动代码片段</li><li><code>Ctrl+Y</code> 删除当前行</li><li><code>Ctrl+D</code> 复制当前行到下一行</li><li><code>Ctrl+O</code> 重写或实现接口</li><li><code>Ctrl+Alt+O</code> 删除无用包</li><li><code>Ctrl+Alt+U</code> 查看类关系</li><li><code>Ctrl+F12</code> 查看当前类的方法</li><li><code>Ctrl+W</code> 选中当前单词</li><li><code>Ctrl+N</code> 类搜索</li></ul><h3 id="intellij-idea-maven"><a class="markdownIt-Anchor" href="#intellij-idea-maven"></a> IntelliJ IDEA - Maven</h3><p>查看项目JAR包依赖树</p><p>Diagrams -&gt; Show Dependencies</p><p><img src= "/img/loading.gif" data-src="https://keyon-photo-1256901694.cos.ap-beijing.myqcloud.com/markdown/20191024205551.png" alt="" /></p><p>排除某个依赖包</p><img src= "/img/loading.gif" data-src="https://keyon-photo-1256901694.cos.ap-beijing.myqcloud.com/markdown/20191024213355.png" style="zoom:50%;" /><h2 id="windows"><a class="markdownIt-Anchor" href="#windows"></a> Windows</h2><ul><li><code>Win+W</code> 打开Windows INK工作区（包含便签、草图板、屏幕草图）</li><li><code>Ctrl+W</code> 关闭当前应用</li><li><code>Win+D</code> 返回桌面</li></ul><h2 id="listary"><a class="markdownIt-Anchor" href="#listary"></a> Listary</h2><ul><li><code>双击Ctrl</code> 打开Listary搜索框</li></ul><h2 id="vscode"><a class="markdownIt-Anchor" href="#vscode"></a> VSCode</h2><ul><li><code>Ctrl+Shift+P</code> 打开全局命令面板</li><li><code>Ctrl+P</code> 列出最近打开的文件</li><li><code>Ctrl+Enter</code> 在当前行下插入新行</li><li><code>Ctrl+Shift+Enter</code> 在当前行上插入新行</li><li><code>Ctrl+Shift+K</code> 删除当前行</li><li><code>Ctrl+Shift+|</code> 匹配括号的闭合处，跳转</li><li><code>Ctrl+U</code> 返回上一个光标位置</li><li><code>Fn+HOME</code> 行首</li><li><code>Fn+END</code> 行尾</li></ul><h2 id="浏览器"><a class="markdownIt-Anchor" href="#浏览器"></a> 浏览器</h2><ul><li><code>Ctrl+Tab</code> 切换标签页</li><li><code>Ctrl+W</code> 关闭标签页</li><li><code>Ctrl+T</code> 新建标签页</li><li><code>Ctrl+L</code> 光标移动到搜索栏</li></ul><h2 id="vimium"><a class="markdownIt-Anchor" href="#vimium"></a> Vimium</h2><blockquote><p>常用快捷键：<a href="https://blog.csdn.net/weixin_34061555/article/details/88991933" target="_blank" rel="noopener">https://blog.csdn.net/weixin_34061555/article/details/88991933</a></p></blockquote><p>它支持很多网页上的常用操作：</p><ul><li><p>按 F 自动发现并标出可点击的链接和按钮，输入一个定位标记上的文字就能点击它</p></li><li><p>按 字母O 可以显示一个方便美观的搜索框，在里边可以随意检索历史记录和收藏夹，还能自定义搜索引擎来快速打开搜索页面、</p></li></ul><p>查找已打开的标签页、实时计算数学表达式等等。甚至可以按 Shift+Enter（上档键+回车）来删除选中的历史记录。</p><ul><li><p>按 J/K/H/L 来像 VIM 里移动光标一样滚动屏幕内容</p></li><li><p>按 “/” 显示页内查找浮层，输入“\r”可以做正则查找，“\w”会执行整词匹配，还有\R、\W、\i和\I等多种用法</p></li><li><p>按 V 进入自由选择模式后，能像 VIM 一样用 J/K/H/L等快捷键 修改文字的选择范围</p></li><li><p>按 “？”显示帮助对话框，快速查看所有设置过的快捷键</p></li></ul><p>需要操纵浏览器标签的时候，它可以：</p><ul><li><p>按 Shift+J、Shift+K、“g0” 或 “g$” 来切换到左侧、右侧、最左或最右的标签页</p></li><li><p>按 “^”（Shift+6）切换到最近访问的上一个标签页</p></li><li><p>按 X 关闭当前网页，然后按 Shift+X 可以恢复它。关闭网页时默认会保留一个窗口来避免浏览器退出</p></li><li><p>按 “M+字母” 创建标记，在别的网页就可以按 “`+字母” 切换到（或者打开）这个标记的网页</p></li><li><p>按 R 刷新网页，Shift+W 移动网页到下一个窗口，“yt” 复制标签页</p></li></ul><p>以上所有快捷键都可以解绑或重新绑定其它命令，也可以添加新的快捷键。</p><p>绑定快捷键到新的命令后，还可以做到切换网页静音、丢弃其它网页、切换网站的图片/JS功能权限、在无痕模式中重新打开等等。</p><h3 id="快捷键高级用法"><a class="markdownIt-Anchor" href="#快捷键高级用法"></a> 快捷键高级用法</h3><p>大部分命令都支持按下数字前缀来设置数量。比如 “5” 后跟 “Shift+X” 可以恢复 5 个最近关闭的标签页，</p><p>而依次按下 “-15X” 则会关闭当前和左侧的共 15 个标签页。</p><p>很多命令都具有参数来改变具体的操作细节，可以在绑定快捷键的时候指定参数。</p><p>如果需要在某些网页上禁用特定的快捷键，可以在扩展选项页面里制定相关规则。</p><p>筛选网址时可使用正则表达式，指定的快捷键列表支持“只禁用列表内”和“列表外全禁用”两种模式。</p><p>普通快捷键是通过JavaScript脚本程序识别的，存在被其它模块拦截的可能性。</p><p>如果需要让快捷键绝对生效，Vimium C 提供了 8 个全局快捷键，可以自由绑定到任意所需命令上。</p><p>但需要注意不支持按网址规则禁用全局快捷键。</p><p>Vimium C 还提供了一个用于浏览器地址栏的搜索引擎 “v”，在地址栏输入 “v+空格”即可进入搜索模式。</p><p>此模式类似于按 字母O 显示的搜索框，会自动检索历史记录和收藏夹，也能指定搜索引擎拼接想要的网址。</p><p>输入 “:t” + 空格 后还能查找已打开的标签页。</p><h3 id="中文处理的优化"><a class="markdownIt-Anchor" href="#中文处理的优化"></a> 中文处理的优化</h3><ul><li><p>支持识别网址中 GBK 编码的汉字（比如百度贴吧网址的贴吧名）进而在搜索框中搜索，可以自定义要识别的编码</p></li><li><p>在自由选择模式中，使 w、e、b 等处理词语的快捷键时，会在中文词语的开始/结束位置处停顿</p></li><li><p>浏览器语言设置为中文时，默认设置 百度搜索 为默认搜索引擎</p></li><li><p>“上一页”和“下一页”功能默认会识别中文里常用于翻页按钮的词语</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ToolBox/ShareToFreeDownloadPapers</title>
      <link href="/2020/08/15/ToolBox/ShareToFreeDownloadPapers/"/>
      <url>/2020/08/15/ToolBox/ShareToFreeDownloadPapers/</url>
      
        <content type="html"><![CDATA[<h1 id="分享免费下载论文的网站"><a class="markdownIt-Anchor" href="#分享免费下载论文的网站"></a> 分享免费下载论文的网站</h1><hr /><p>查找论文、下载论文，我们正常情况下立即会想到知网，但是下载起来着实不方便。今天给大家推荐几个免费下载论文的网站，真的是下载论文的利器，赶紧收藏使用吧！</p><hr /><h2 id="1-谷歌学术镜像"><a class="markdownIt-Anchor" href="#1-谷歌学术镜像"></a> 1. 谷歌学术镜像</h2><p><a href="http://ac.scmor.com/" target="_blank" rel="noopener">http://ac.scmor.com/</a></p><p><img src= "/img/loading.gif" data-src="https://wugenqiang.github.io/PictureBed/pictures/20190525171213.jpg" alt="" /></p><p>谷歌学术虽然好用，但无法正常登陆。不如试试谷歌学术镜像网站吧！单个链接容易失效，所以它丧心病狂地提供了多达 20 个的入口。只要显示【现在访问】的，就表明该镜像可用。</p><h2 id="2-百度学术"><a class="markdownIt-Anchor" href="#2-百度学术"></a> 2. 百度学术</h2><p><a href="http://xueshu.baidu.com/" target="_blank" rel="noopener">http://xueshu.baidu.com/</a></p><p><img src= "/img/loading.gif" data-src="https://wugenqiang.github.io/PictureBed/pictures/20190525172232.jpg" alt="" /></p><p>一个综合的学术资源检索网站，每篇论文会给出多种获取渠道，除了知网、万方、维普，还有道客巴巴、豆丁网、爱学术等。网站提供【求助全文】功能，可以向网友求助，作为应急使用还是不错的~</p><h2 id="3-上海研发公共服务平台"><a class="markdownIt-Anchor" href="#3-上海研发公共服务平台"></a> 3. 上海研发公共服务平台</h2><p><a href="http://lib.sstir.cn/" target="_blank" rel="noopener">http://lib.sstir.cn/</a></p><p><img src= "/img/loading.gif" data-src="https://wugenqiang.github.io/PictureBed/pictures/20190525172642.jpg" alt="" /></p><p>注册成功，就送 600 元知网充值金额！400 元万方充值金额！还送 2000 积分！ 每 1000 积分又可以送 200 元知网或万方的充值金额。一下子就拥有了 1400 元的论文下载基金。</p><p>!&gt; 官网升级啦！</p><p><a href="http://www.sstir.cn/" target="_blank" rel="noopener">http://www.sstir.cn/</a></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200611213438.png" alt="image-20200611213437201" /></p><h2 id="4-贵州数字图书馆"><a class="markdownIt-Anchor" href="#4-贵州数字图书馆"></a> 4. 贵州数字图书馆</h2><p><a href="http://www.gzlib.org/" target="_blank" rel="noopener">http://www.gzlib.org/</a></p><p><img src= "/img/loading.gif" data-src="https://wugenqiang.github.io/PictureBed/pictures/20190525172842.jpg" alt="" /></p><p>注册成功后，会给用户自动分配一个账号和密码。在线搜索论文，点击【电子全文】或【邮箱接收全文】，即可免费获取论文。类似网站：广西壮族自治区图书馆。</p><h2 id="5-sci-hub"><a class="markdownIt-Anchor" href="#5-sci-hub"></a> 5. SCI-HUB</h2><p><a href="http://tool.yovisun.com/scihub" target="_blank" rel="noopener">http://tool.yovisun.com/scihub</a></p><p><img src= "/img/loading.gif" data-src="https://wugenqiang.github.io/PictureBed/pictures/20190525173123.jpg" alt="" /></p><p>谷歌学术上的论文能搜到不一定能下载，用这个来自俄罗斯的学术网站吧，你可以称它为学术界的罗宾汉，专门“劫富济贫”，复制论文的链接/ DOI / Pubmed ID，即可免费获取 PDF 格式的论文。</p><h2 id="6-open-access-library"><a class="markdownIt-Anchor" href="#6-open-access-library"></a> 6. Open Access Library</h2><p><a href="http://www.oalib.com/" target="_blank" rel="noopener">http://www.oalib.com/</a></p><p><img src= "/img/loading.gif" data-src="https://wugenqiang.github.io/PictureBed/pictures/20190525173316.jpg" alt="" /></p><p>OALib 是一个开放存取资源图书馆，意味着可以免费下载学术论文。所有的文章都来自顶级的出版商和数据库，可以满足各个领域学者的需求。</p><h2 id="7-library-genesis"><a class="markdownIt-Anchor" href="#7-library-genesis"></a> 7. Library Genesis</h2><p><a href="http://libgen.io" target="_blank" rel="noopener">http://libgen.io</a></p><p><img src= "/img/loading.gif" data-src="https://wugenqiang.github.io/PictureBed/pictures/20190525173427.jpg" alt="" /></p><p>Library Genesis 是一个下载电子书的神奇网站，同时也提供学术论文的下载。指定搜索内容为【Scientific articles】，在【Links】里找到合适的链接，即可下载。</p><h2 id="8-喵咪论文"><a class="markdownIt-Anchor" href="#8-喵咪论文"></a> 8. 喵咪论文</h2><p><a href="https://lunwen.im/" target="_blank" rel="noopener">https://lunwen.im/</a></p><p><img src= "/img/loading.gif" data-src="https://wugenqiang.github.io/PictureBed/pictures/20190525173554.jpg" alt="" /></p><p>由于受不了学校论文检索的繁琐，有人做出了这个聚合的开放论文数据库网站。目前可检索的论文总量超过 6000W+，覆盖了 Elsevier、Springer Nature、Wiley-Blackwell 等重点出版机构，均可免费下载哦。</p><h2 id="9-虫部落"><a class="markdownIt-Anchor" href="#9-虫部落"></a> 9. 虫部落</h2><p><a href="https://scholar.chongbuluo.com/" target="_blank" rel="noopener">https://scholar.chongbuluo.com/</a></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200526120525.png" alt="image-20200526120501397" /></p><p>真的是特别方便，重点推荐（写于 2020 - 05 - 25）</p><table><tr><td bgcolor=#D1EEEE>工欲善其事必先利其器！利器准备好了，剩下的交给你了~</td></tr></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ToolBox/Postman使用指南</title>
      <link href="/2020/08/15/ToolBox/Postman%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2020/08/15/ToolBox/Postman%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="postman使用笔记"><a class="markdownIt-Anchor" href="#postman使用笔记"></a> Postman使用笔记</h1><p><a href="https://blog.csdn.net/fxbin123/article/details/80428216" target="_blank" rel="noopener">Postman使用方法详解</a></p><h2 id="测试带requestbody参数的接口"><a class="markdownIt-Anchor" href="#测试带requestbody参数的接口"></a> 测试带@RequestBody参数的接口</h2><p><a href="https://www.baidu.com/link?url=ERgrgh6XG9XnrktUxWnfpqfScoPNFweuNp86PSJDgL3RAkWmXFQ3oqyWWajA6sU9RGcQs44zozuUPhKplTSsppq-1KnqjqDN6YYkvc3ltJu&amp;wd=&amp;eqid=ae30d15b00455748000000035db58ea5" target="_blank" rel="noopener">https://www.baidu.com/link?url=ERgrgh6XG9XnrktUxWnfpqfScoPNFweuNp86PSJDgL3RAkWmXFQ3oqyWWajA6sU9RGcQs44zozuUPhKplTSsppq-1KnqjqDN6YYkvc3ltJu&amp;wd=&amp;eqid=ae30d15b00455748000000035db58ea5</a></p><p>测试接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(value = <span class="string">"/insertMsg"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> DataReturn <span class="title">insertData</span><span class="params">(@RequestBody DataMsg msg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> DataService.insertDataMsg(msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DataMsg类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataMsg</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> dataType;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置Headers</p><p><img src= "/img/loading.gif" data-src="https://keyon-photo-1256901694.cos.ap-beijing.myqcloud.com/markdown/20191027222358.png" alt="" /></p><p>Body选择raw，填写要发送的JSON数据。</p><p>注意数据类型要与接口对应的参数类一致。</p><p>例如int类型的参数，JSON中不要加引号。String类型的才加引号。</p><p><img src= "/img/loading.gif" data-src="https://keyon-photo-1256901694.cos.ap-beijing.myqcloud.com/markdown/20191027222945.png" alt="" /></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ToolBox/Matlab使用指南</title>
      <link href="/2020/08/15/ToolBox/Matlab%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2020/08/15/ToolBox/Matlab%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="matlab-使用指南"><a class="markdownIt-Anchor" href="#matlab-使用指南"></a> Matlab 使用指南</h1><p>MATLAB 是一种高级语言和交互式环境，全世界数以百万计的工程师和科学家都在使用它。它能够探索和可视化想法，并在各个领域进行协作，包括信号和图像处理，通信，管理系统和金融工程等等。</p><p><strong>提示：MATLAB 可多版本共存，安装包文件不要放在中文命名文件夹内！</strong></p><h2 id="一-功能概述"><a class="markdownIt-Anchor" href="#一-功能概述"></a> 一、功能概述</h2><ul><li><p>执行各种复杂的数学计算和繁重的工作</p></li><li><p>用于管理代码，文件和数据的开发环境</p></li><li><p>探索实现此解决方案的方法</p></li><li><p>各种数学函数，用于线性代数，统计，傅立叶分析，优化，滤波，数值积分…</p></li><li><p>绘制二维和三维图形函数以将数据可视化</p></li><li><p>使用 C ++，C 或 Java 编程语言设计和构建用户界面</p></li><li><p>能够测试和测量确切的功能和图形</p></li><li><p>通信信号处理，图像和视频的可能性</p></li><li><p>电信，控制，模糊，估计，统计，数据收集，模拟系统，</p></li></ul><h2 id="二-安装要求"><a class="markdownIt-Anchor" href="#二-安装要求"></a> 二、安装要求</h2><ul><li><p>操作系统 64 位：</p><p>Windows 10</p><p>Windows 7 Service Pack 1</p><p>Windows Server 2016</p><p>Windows Server 2019</p></li><li><p>CPU：</p><p>最低：任何 Intel 或 AMD x64 处理器</p><p>推荐任何具有四个逻辑核心和 AVX2 指令集</p><p>支持的 Intel 或 AMD x64 处理器</p></li><li><p>磁盘：</p><p>最小：仅 2 GB的 HDD 空间仅用于 MATLAB，典型安装为 4-6 GB</p><p>推荐：建议使用 SSD 完整安装所有 MathWorks 产品可能会占用 31GB 的磁盘空间</p></li><li><p>内存：</p><p>最低：4 GB</p><p>推荐：8 GB</p></li><li><p>GPU：</p><p>不需要特定的图形卡。</p><p>建议使用硬件加速的图形卡，该图形卡支持OpenGL 3.3和1GB GPU内存。</p><p>使用 Parallel Computing Toolbox 进行 GPU 加速需要 CUDA GPU</p><p>对于 Polyspace，建议每个内核 4 GB</p></li><li><p>注意：</p><p>从R2020a 开始支持</p><p>Windows Server 2019-从 R2020a 开始不支持 Windows Server 2012 和 Windows Server 2012 R2。对于 Polyspace，建议每个内核4 GB</p></li></ul><h2 id="三-软件安装"><a class="markdownIt-Anchor" href="#三-软件安装"></a> 三、软件安装</h2><p>前言：这里之所以要安装最新的 2020 版本，是因为 matlab 中的硬件支持工具是随着版本变化而变化的，所以要升级 matlab 版本</p><p>这里使用的是 MATLAB R2020a v9.8.0 中文版 64位</p><p>软件下载链接（天翼云盘）：<br /><a href="https://cloud.189.cn/t/U3MjimIFbYzu" target="_blank" rel="noopener">https://cloud.189.cn/t/U3MjimIFbYzu</a></p><p>在文件替换那一步容易出现问题，仔细查看安装教程。</p><h3 id="31-下载解压后打开-r2020a-文件夹"><a class="markdownIt-Anchor" href="#31-下载解压后打开-r2020a-文件夹"></a> 3.1 下载解压后打开 R2020a 文件夹</h3><p>重要提示：安装包不要放在中文命名的文件夹下！</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200703112554.png" alt="image-20200703112533270" /></p><h3 id="32-运行-setup"><a class="markdownIt-Anchor" href="#32-运行-setup"></a> 3.2 运行 setup</h3><p>右键以管理员身份运行 setup</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200703112748.png" alt="image-20200703112747567" /></p><h3 id="33-右上角下拉高级选项"><a class="markdownIt-Anchor" href="#33-右上角下拉高级选项"></a> 3.3 右上角下拉高级选项</h3><p><strong>选择我有文件安装密钥</strong></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200703112911.png" alt="image-20200703112910191" /></p><h3 id="34-勾选接受点击下一步"><a class="markdownIt-Anchor" href="#34-勾选接受点击下一步"></a> 3.4 勾选接受，点击下一步</h3><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200703113005.png" alt="image-20200703113004691" /></p><h3 id="35-输入密钥"><a class="markdownIt-Anchor" href="#35-输入密钥"></a> 3.5 输入密钥</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">09806-07443-53955-64350-21751-41297</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200703113132.png" alt="image-20200703113131342" /></p><h3 id="36-点击浏览"><a class="markdownIt-Anchor" href="#36-点击浏览"></a> 3.6 点击浏览</h3><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200703113229.png" alt="image-20200703113228070" /></p><h3 id="37-选择-crack-文件下的-license_standalonelic"><a class="markdownIt-Anchor" href="#37-选择-crack-文件下的-license_standalonelic"></a> 3.7 选择 crack 文件下的 license_standalone.lic</h3><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200703113416.png" alt="image-20200703113415773" /></p><p>点击下一步</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200703113450.png" alt="image-20200703113449347" /></p><h3 id="38-修改安装位置点击下一步30gb空间"><a class="markdownIt-Anchor" href="#38-修改安装位置点击下一步30gb空间"></a> 3.8 修改安装位置，点击下一步（30GB空间）</h3><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200703113635.png" alt="image-20200703113634549" /></p><h3 id="39-选择产品点击下一步"><a class="markdownIt-Anchor" href="#39-选择产品点击下一步"></a> 3.9 选择产品点击下一步</h3><p>小编默认安装全部，小伙伴可根据需求安装</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200703113741.png" alt="image-20200703113739997" /></p><h3 id="310-勾选添加快捷方式点击下一步"><a class="markdownIt-Anchor" href="#310-勾选添加快捷方式点击下一步"></a> 3.10 勾选添加快捷方式，点击下一步</h3><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200703113811.png" alt="image-20200703113811025" /></p><h3 id="311-开始安装"><a class="markdownIt-Anchor" href="#311-开始安装"></a> 3.11 开始安装</h3><p>点击开始安装</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200703113850.png" alt="image-20200703113848833" /></p><p>开始安装，耐心等待，四十分钟左右…</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200703114356.png" alt="image-20200703114355274" /></p><p>安装完成，点击关闭</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200703153450.png" alt="image-20200703153449013" /></p><h3 id="312-打开-crack-文件夹"><a class="markdownIt-Anchor" href="#312-打开-crack-文件夹"></a> 3.12 打开 crack 文件夹</h3><p>复制其下的 R2020a 里的 bin 文件夹至安装目录进行替换</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200703153734.png" alt="image-20200703153733097" /></p><h3 id="313-发送快捷方式"><a class="markdownIt-Anchor" href="#313-发送快捷方式"></a> 3.13 发送快捷方式</h3><p>此步骤自行查看桌面是否有快捷方式，如没有执行如下操作。再次打开软件安装目录，打开 bin 文件夹，右键发送快捷方式至桌面</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200703153944.png" alt="image-20200703153943106" /></p><h3 id="314-打开软件"><a class="markdownIt-Anchor" href="#314-打开软件"></a> 3.14 打开软件</h3><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200703154332.png" alt="image-20200703154330909" /></p><p>主页面：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200703154550.png" alt="image-20200703154549110" /></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ToolBox/Maven安装与配置</title>
      <link href="/2020/08/15/ToolBox/Maven%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/08/15/ToolBox/Maven%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="maven安装与配置"><a class="markdownIt-Anchor" href="#maven安装与配置"></a> Maven安装与配置</h1><h2 id="前提"><a class="markdownIt-Anchor" href="#前提"></a> 前提</h2><p>确保JDK已安装且配置了环境变量。</p><h2 id="下载"><a class="markdownIt-Anchor" href="#下载"></a> 下载</h2><p>打开Maven官网：<a href="https://maven.apache.org/download.cgi" target="_blank" rel="noopener">https://maven.apache.org/download.cgi</a></p><p><img src= "/img/loading.gif" data-src="https://keyon-photo-1256901694.cos.ap-beijing.myqcloud.com/markdown/20191113172043.png" alt="" /></p><h2 id="解压"><a class="markdownIt-Anchor" href="#解压"></a> 解压</h2><p>解压到电脑，路径要求非中文。例如 F:\Dev\apache-maven-3.6.2</p><h2 id="配置环境变量"><a class="markdownIt-Anchor" href="#配置环境变量"></a> 配置环境变量</h2><p>新增变量：</p><ul><li>变量名：M2_HOME</li><li>变量值：maven根目录，例如 F:\Dev\apache-maven-3.6.2</li></ul><p>在Path环境变量中添加：</p><ul><li>内容：%M2_HOME%\bin</li></ul><h2 id="验证"><a class="markdownIt-Anchor" href="#验证"></a> 验证</h2><p>打开命令行，运行mvn -v，若正常输出maven版本信息，则环境变量配置成功。</p><h2 id="配置仓库"><a class="markdownIt-Anchor" href="#配置仓库"></a> 配置仓库</h2><p>在maven根目录新建文件夹RepMaven，作为本地仓库。</p><p>打开F:\Dev\apache-maven-3.6.2\conf\settings.xml，找到&lt;localRepository&gt;，将注释删除，配置路径。</p><p><img src= "/img/loading.gif" data-src="https://keyon-photo-1256901694.cos.ap-beijing.myqcloud.com/markdown/20191113174619.png" alt="" /></p><h2 id="配置国内镜像"><a class="markdownIt-Anchor" href="#配置国内镜像"></a> 配置国内镜像</h2><p>还是settings.xml，找到mirrors标签，在该标签内添加镜像仓库。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>        </span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ToolBox/LaTex使用指南</title>
      <link href="/2020/08/15/ToolBox/LaTex%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2020/08/15/ToolBox/LaTex%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="latex-语法使用指南"><a class="markdownIt-Anchor" href="#latex-语法使用指南"></a> LaTex 语法使用指南</h1><p>💭 <a href="https://wugenqiang.gitee.io/file-storage/pdf.js/web/viewer.html?file=../../LaTex/LaTex%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%EF%BC%88%E6%96%87%E6%A1%A3%EF%BC%89.pdf" target="_blank" rel="noopener">LaTex 中文介绍.pdf（全）</a></p><h2 id="1-公式显示位置"><a class="markdownIt-Anchor" href="#1-公式显示位置"></a> 1 公式显示位置</h2><h3 id="11-行内公式"><a class="markdownIt-Anchor" href="#11-行内公式"></a> 1.1 行内公式</h3><p>在公式两边各自加上一个美元符号即是行内公式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是文本 $a^2+b^2&#x3D;c^2$ 这是文本</span><br></pre></td></tr></table></figure><p>效果：</p><p>这是文本 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mn>2</mn></msup><mo>+</mo><msup><mi>b</mi><mn>2</mn></msup><mo>=</mo><msup><mi>c</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">a^2+b^2=c^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> 这是文本</p><h3 id="12-行间公式"><a class="markdownIt-Anchor" href="#12-行间公式"></a> 1.2 行间公式</h3><p>在公式两边各自加上两个美元符号即是行间公式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是文本 $$a^2+b^2&#x3D;c^2$$ 这是文本</span><br></pre></td></tr></table></figure><p>效果：</p><p>这是文本 $$a<sup>2+b</sup>2=c^2$$ 这是文本</p><h2 id="2-数学符号"><a class="markdownIt-Anchor" href="#2-数学符号"></a> 2 数学符号</h2><h3 id="21-上下标"><a class="markdownIt-Anchor" href="#21-上下标"></a> 2.1 上下标</h3><p>在 LaTex 中用 <code>^</code> 和 <code>_</code> 表明上下标。</p><p>注意：如果上下标只对其后面的一个字符起作用，如果上下标的内容超过一个字符，则需要用花括号 <code>{}</code> 包裹，否则上下标只对后面的一个符号起作用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$p^3_&#123;ij&#125;\qquad\sum_&#123;K&#x3D;1&#125;^3ka^x+y\qquad\neq a^&#123;x+y&#125;$$</span><br></pre></td></tr></table></figure><p>效果：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>p</mi><mrow><mi>i</mi><mi>j</mi></mrow><mn>3</mn></msubsup><mspace width="2em"/><munderover><mo>∑</mo><mrow><mi>K</mi><mo>=</mo><mn>1</mn></mrow><mn>3</mn></munderover><mi>k</mi><msup><mi>a</mi><mi>x</mi></msup><mo>+</mo><mi>y</mi><mspace width="2em"/><mi mathvariant="normal">≠</mi><msup><mi>a</mi><mrow><mi>x</mi><mo>+</mo><mi>y</mi></mrow></msup></mrow><annotation encoding="application/x-tex">p^3_{ij}\qquad\sum_{K=1}^3ka^x+y\qquad\neq a^{x+y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0954490000000003em;vertical-align:-1.294336em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.383108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8011130000000004em;"><span style="top:-1.855664em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">K</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.294336em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.821331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.821331em;"><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span></span></span></span></span></span></span></span></span></p><h3 id="22-导数符号"><a class="markdownIt-Anchor" href="#22-导数符号"></a> 2.2 导数符号</h3><p>导数符号 <code>'</code> 是一个特殊的上标，可以适当连用表示多阶导数，也可以在其后连用上标：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$f(x)&#x3D;x^2 \quad f&#39;(x)&#x3D;2x \quad f&#39;&#39;^&#123;2&#125;&#x3D;4$</span><br></pre></td></tr></table></figure><p>效果：</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup><mspace width="1em"/><msup><mi>f</mi><mo mathvariant="normal">′</mo></msup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mn>2</mn><mi>x</mi><mspace width="1em"/><msup><mi>f</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo><mn>2</mn></mrow></msup><mo>=</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">f(x)=x^2 \quad f&#x27;(x)=2x \quad f&#x27;&#x27;^{2}=4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:1em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span></p><h4 id="221-偏导数"><a class="markdownIt-Anchor" href="#221-偏导数"></a> 2.2.1 偏导数</h4><p>偏导符号 ∂</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$\frac&#123;\partial&#125;&#123;\partial θ_j&#125;J(θ_0,θ_1)$</span><br></pre></td></tr></table></figure><p>效果：</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi mathvariant="normal">∂</mi><mrow><mi mathvariant="normal">∂</mi><msub><mi>θ</mi><mi>j</mi></msub></mrow></mfrac><mi>J</mi><mo stretchy="false">(</mo><msub><mi>θ</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>θ</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\frac{\partial}{\partial θ_j}J(θ_0,θ_1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4224279999999998em;vertical-align:-0.5423199999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.02778em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5423199999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathdefault" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><h4 id="222-条件偏导"><a class="markdownIt-Anchor" href="#222-条件偏导"></a> 2.2.2 条件偏导</h4><p>偏导符号 ∂</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$\left.\frac&#123;\partial f(x,y)&#125;&#123;\partial x&#125;\right|_&#123;x&#x3D;0&#125;$</span><br></pre></td></tr></table></figure><p>效果：</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><mrow><mi mathvariant="normal">∂</mi><mi>x</mi></mrow></mfrac><mo fence="true">∣</mo></mrow><mrow><mi>x</mi><mo>=</mo><mn>0</mn></mrow></msub></mrow><annotation encoding="application/x-tex">\left.\frac{\partial f(x,y)}{\partial x}\right|_{x=0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.8677em;vertical-align:-0.6997149999999999em;"></span><span class="minner"><span class="minner"><span class="mopen nulldelimiter"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault mtight">x</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">x</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.167985em;"><span style="top:-1.955985em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.561985em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.167985em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6500149999999999em;"><span></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.2486069999999999em;"><span style="top:-2.0002850000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6997149999999999em;"><span></span></span></span></span></span></span></span></span></span></p><h3 id="23-分式"><a class="markdownIt-Anchor" href="#23-分式"></a> 2.3 分式</h3><p>如果是简单的根式，可以写成<code>斜分式</code>的形式,如 <code>3/8</code>。</p><p>在 latex 中分式一般使用 <code>\frac{分子}{分母}</code> 来书写，不过这种分式的大小在行间公式是正常显示大小，而在行内被极度压缩了。</p><p>amsmath 提供了方便的命令 <code>\dfrac{分子}{分母}</code> ，令用户能够在行内使用正常大小的行内公式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">斜分式: $3&#x2F;8$</span><br><span class="line"></span><br><span class="line">压缩分式：$\frac&#123;3&#125;&#123;8&#125;$</span><br><span class="line"></span><br><span class="line">显示正常大小：$\dfrac&#123;3&#125;&#123;8&#125;$</span><br></pre></td></tr></table></figure><p>效果：</p><p>斜分式: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn><mi mathvariant="normal">/</mi><mn>8</mn></mrow><annotation encoding="application/x-tex">3/8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mord">/</span><span class="mord">8</span></span></span></span></p><p>压缩分式：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>3</mn><mn>8</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{3}{8}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p>显示正常大小：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>3</mn><mn>8</mn></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\dfrac{3}{8}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">8</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><h3 id="24-根式"><a class="markdownIt-Anchor" href="#24-根式"></a> 2.4 根式</h3><p>一般的根式使用 <code>\sqrt{…}</code> 表示，表示 n 次方根式写成 <code>\sqrt[n]{…}</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$\sqrt&#123;x&#125; \Leftrightarrow x^&#123;1&#x2F;2&#125;</span><br><span class="line">\quad \sqrt[3]&#123;2&#125;</span><br><span class="line">\quad \sqrt&#123;x^&#123;2&#125;+\sqrt&#123;y&#125;&#125;</span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>效果：</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msqrt><mi>x</mi></msqrt><mo>⇔</mo><msup><mi>x</mi><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mn>2</mn></mrow></msup><mspace width="1em"/><mroot><mn>2</mn><mn>3</mn></mroot><mspace width="1em"/><msqrt><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msqrt><mi>y</mi></msqrt></mrow></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{x} \Leftrightarrow x^{1/2}\quad \sqrt[3]{2}\quad \sqrt{x^{2}+\sqrt{y}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.23972em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">x</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⇔</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2606359999999999em;vertical-align:-0.35341599999999995em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">/</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mord sqrt"><span class="root"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7868839999999999em;"><span style="top:-2.964664em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size6 size1 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.90722em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">2</span></span></span><span style="top:-2.86722em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.13278em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.886584em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mord" style="padding-left:1em;"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.70306em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-2.66306em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.33693999999999996em;"><span></span></span></span></span></span></span></span><span style="top:-2.846584em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60z M1001 80H40000v40H1012z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35341599999999995em;"><span></span></span></span></span></span></span></span></span></p><p>特殊的分式形式，如二项式结构，由 amsmath 宏包的 \binom 命令生成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Pascal&#39;s rule is</span><br><span class="line">$$</span><br><span class="line">\binom&#123;n&#125;&#123;k&#125;&#x3D;\binom&#123;n-1&#125;&#123;k&#125;+\binom&#123;n-1&#125;&#123;k-1&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>效果：</p><p>Pascal’s rule is</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><mi>n</mi><mi>k</mi></mfrac><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><mi>k</mi></mfrac><mo fence="true">)</mo></mrow><mo>+</mo><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></mfrac><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\binom{n}{k}=\binom{n-1}{k}+\binom{n-1}{k-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="mord"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1075599999999999em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="mord"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="mord"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214400000000002em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span><span style="top:-3.6770000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span></span></span></span></p><h3 id="25-无穷大符号"><a class="markdownIt-Anchor" href="#25-无穷大符号"></a> 2.5 无穷大符号</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ \infty $</span><br></pre></td></tr></table></figure><p>这个是个缩写，原单词（infinity）</p><p>效果：</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span></p><h3 id="26-省略号"><a class="markdownIt-Anchor" href="#26-省略号"></a> 2.6 省略号</h3><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">符号</th><th style="text-align:left">效果</th></tr></thead><tbody><tr><td style="text-align:left">水平省略号</td><td style="text-align:left">\dots</td><td style="text-align:left">…</td></tr><tr><td style="text-align:left">水平省略号</td><td style="text-align:left">\cdots</td><td style="text-align:left">⋯</td></tr><tr><td style="text-align:left">竖直省略号</td><td style="text-align:left">\vdots</td><td style="text-align:left">⋮</td></tr><tr><td style="text-align:left">斜排省略号</td><td style="text-align:left">\ddots</td><td style="text-align:left">⋱</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$a_1,a_2,\dots,a_n$</span><br><span class="line"></span><br><span class="line">$a_1,a_2,\cdots,a_n$</span><br></pre></td></tr></table></figure><p>效果：</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">a_1,a_2,\dots,a_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">a_1,a_2,\cdots,a_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p>\cdots 和 \dots 是完全等效的，它们既能用在公式中，也用在文本里作为<strong>省略号</strong>。</p><p>除此之外，在矩阵中可能会用到竖排的 ⋮ (\vdots) 和斜排的 ⋱ (\ddots)。</p><h3 id="27-关系符"><a class="markdownIt-Anchor" href="#27-关系符"></a> 2.7 关系符</h3><p>LaTex 常见的关系符号除了可以直接输入的 =, &gt;, &lt;，其他符号用命令输入，常用的有不等于: ≠ (\ne)，大于等于号:  ≥  (\ge) 和小于等于号: ≤ (\le)，约等于号: ≈  (\approx)，等价 ≡ (\equiv)，正比:  ∝ (\propto)，相似:  ∼ (\sim) 等等。</p><p>LaTex 还提供了自定义二元关系符的命令 <code>\stackrel</code>，用于将一个符号叠加在原有的二元关系符之上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">f_n(x) \stackrel&#123;*&#125;&#123;\approx&#125; 1</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>效果：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mi>n</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mover><mo><mo>≈</mo></mo><mo>∗</mo></mover><mn>1</mn></mrow><annotation encoding="application/x-tex">f_n(x) \stackrel{*}{\approx} 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.358816em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mop op-limits"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.108816em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">≈</span></span></span><span style="top:-3.6831199999999997em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∗</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p><h3 id="28-巨算子"><a class="markdownIt-Anchor" href="#28-巨算子"></a> 2.8 巨算子</h3><p>积分号，求和号等符号称为**<a href="http://texdoc.net/texmf-dist/doc/latex/lshort-chinese/lshort-zh-cn.pdf#54" target="_blank" rel="noopener">巨算子</a>**。</p><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">符号</th><th style="text-align:left">效果</th></tr></thead><tbody><tr><td style="text-align:left">积分号</td><td style="text-align:left">\int</td><td style="text-align:left">∫</td></tr><tr><td style="text-align:left">求和号</td><td style="text-align:left">\sum</td><td style="text-align:left">∑</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\sum_&#123;i&#x3D;1&#125;^n \quad</span><br><span class="line">\int_0^&#123;\frac&#123;\pi&#125;&#123;2&#125;&#125; \quad</span><br><span class="line">\oint_0^&#123;\frac&#123;\pi&#125;&#123;2&#125;&#125; \quad</span><br><span class="line">\prod_\epsilon </span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>效果：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mspace width="1em"/><msubsup><mo>∫</mo><mn>0</mn><mfrac><mi>π</mi><mn>2</mn></mfrac></msubsup><mspace width="1em"/><msubsup><mo>∮</mo><mn>0</mn><mfrac><mi>π</mi><mn>2</mn></mfrac></msubsup><mspace width="1em"/><munder><mo>∏</mo><mi>ϵ</mi></munder></mrow><annotation encoding="application/x-tex">\sum_{i=1}^n \quad\int_0^{\frac{\pi}{2}} \quad\oint_0^{\frac{\pi}{2}} \quad\prod_\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:1em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5969800000000005em;"><span style="top:-2.08805em;margin-left:-0.44445em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span><span style="top:-4.112900000000001em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915428571428572em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9119499999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:1em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∮</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5969800000000005em;"><span style="top:-2.08805em;margin-left:-0.44445em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span><span style="top:-4.112900000000001em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915428571428572em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9119499999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:1em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8999949999999999em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">ϵ</span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∏</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.250005em;"><span></span></span></span></span></span></span></span></span></span></p><p>巨算符的上下标用作其<strong>上下限</strong>。行间公式中，积分号默认将上下限放在右上角和右下角，求和号默认在上下方；行内公式一律默认在右上角和右下角。<strong>可以在巨算符后使用 \limits 手动令上下限显示在上下方</strong>，\nolimits 则相反，即不显示在上下方，也就是显示在右上角，右下角。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\sum\nolimits_&#123;i&#x3D;1&#125;^n \quad</span><br><span class="line">\int\limits_0^&#123;\frac&#123;\pi&#125;&#123;2&#125;&#125; \quad</span><br><span class="line">\prod\nolimits_\epsilon </span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>效果：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mspace width="1em"/><munderover><mo>∫</mo><mn>0</mn><mfrac><mi>π</mi><mn>2</mn></mfrac></munderover><mspace width="1em"/><msub><mo>∏</mo><mi>ϵ</mi></msub></mrow><annotation encoding="application/x-tex">\sum\nolimits_{i=1}^n \quad\int\limits_0^{\frac{\pi}{2}} \quad\prod\nolimits_\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.875238em;vertical-align:-1.578233em;"></span><span class="mop"><span class="mop op-symbol large-op" style="position:relative;top:-0.000004999999999977245em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.104292em;"><span style="top:-2.10029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.5029000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.59971em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:1em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.297005em;"><span style="top:-1.8817670000000004em;margin-left:-0.44445em;"><span class="pstrut" style="height:3.3600000000000003em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span><span style="top:-3.3611250000000004em;"><span class="pstrut" style="height:3.3600000000000003em;"></span><span><span class="mop op-symbol large-op" style="margin-right:0.44445em;">∫</span></span></span><span style="top:-5.072925000000001em;margin-left:0.44445em;"><span class="pstrut" style="height:3.3600000000000003em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915428571428572em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.578233em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:1em;"></span><span class="mop"><span class="mop op-symbol large-op" style="position:relative;top:-0.000004999999999977245em;">∏</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.29831799999999997em;"><span style="top:-2.10029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">ϵ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.59971em;"><span></span></span></span></span></span></span></span></span></span></span></p><h3 id="29-极限符号"><a class="markdownIt-Anchor" href="#29-极限符号"></a> 2.9 极限符号</h3><h4 id="291-行间公式极限"><a class="markdownIt-Anchor" href="#291-行间公式极限"></a> 2.9.1 行间公式极限</h4><p>行间公式下标默认放在符号的下方，所以直接在极限符号 <code>\lim</code> 下方写上符号极限范围即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$&#123;\lim_&#123;x \to +\infty&#125;&#125;$$</span><br></pre></td></tr></table></figure><p>效果：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><mo>+</mo><mi mathvariant="normal">∞</mi></mrow></munder></mrow><annotation encoding="application/x-tex">{\lim_{x \to +\infty}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4527709999999998em;vertical-align:-0.758331em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.1em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight">+</span><span class="mord mtight">∞</span></span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.758331em;"><span></span></span></span></span></span></span></span></span></span></span></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$&#123;\lim_&#123;x \to -\infty&#125;&#125;$$</span><br></pre></td></tr></table></figure><p>效果：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><mo>−</mo><mi mathvariant="normal">∞</mi></mrow></munder></mrow><annotation encoding="application/x-tex">{\lim_{x \to -\infty}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4527709999999998em;vertical-align:-0.758331em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.1em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight">−</span><span class="mord mtight">∞</span></span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.758331em;"><span></span></span></span></span></span></span></span></span></span></span></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$&#123;\lim_&#123;x \to 0&#125;&#125;$$</span><br></pre></td></tr></table></figure><p>效果：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><mn>0</mn></mrow></munder></mrow><annotation encoding="application/x-tex">{\lim_{x \to 0}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4115479999999998em;vertical-align:-0.717108em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.082892em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight">0</span></span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.717108em;"><span></span></span></span></span></span></span></span></span></span></span></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$&#123;\lim_&#123;x \to 0^+&#125;&#125;$$</span><br></pre></td></tr></table></figure><p>效果：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><msup><mn>0</mn><mo>+</mo></msup></mrow></munder></mrow><annotation encoding="application/x-tex">{\lim_{x \to 0^+}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.452305em;vertical-align:-0.757865em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.042135em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight"><span class="mord mtight">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7026642857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.757865em;"><span></span></span></span></span></span></span></span></span></span></span></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$&#123; \lim_&#123;x \to 0&#125; \frac&#123;3x^2 +7x^3&#125;&#123;x^2 +5x^4&#125; &#x3D; 3&#125;$$</span><br></pre></td></tr></table></figure><p>效果：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><mn>0</mn></mrow></munder><mfrac><mrow><mn>3</mn><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>7</mn><msup><mi>x</mi><mn>3</mn></msup></mrow><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>5</mn><msup><mi>x</mi><mn>4</mn></msup></mrow></mfrac><mo>=</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">{ \lim_{x \to 0} \frac{3x^2 +7x^3}{x^2 +5x^4} = 3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.260438em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.082892em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight">0</span></span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.717108em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">5</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">7</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">3</span></span></span></span></span></span></p><h4 id="292-行内极限"><a class="markdownIt-Anchor" href="#292-行内极限"></a> 2.9.2 行内极限</h4><p>行内的下标默认放在右下角，可以使用 <code>\limits_{下标}</code> 把下标放到符号下方即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;\lim \limits_&#123;x \to -\infty&#125;&#125;$</span><br></pre></td></tr></table></figure><p>效果：</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><mo>−</mo><mi mathvariant="normal">∞</mi></mrow></munder></mrow><annotation encoding="application/x-tex">{\lim \limits_{x \to -\infty}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4527709999999998em;vertical-align:-0.758331em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.1em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight">−</span><span class="mord mtight">∞</span></span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.758331em;"><span></span></span></span></span></span></span></span></span></span></p><h2 id="3-集合相关符号"><a class="markdownIt-Anchor" href="#3-集合相关符号"></a> 3 集合相关符号</h2><h3 id="31-元素与集合的关系"><a class="markdownIt-Anchor" href="#31-元素与集合的关系"></a> 3.1 元素与集合的关系</h3><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">符号</th><th style="text-align:left">效果</th></tr></thead><tbody><tr><td style="text-align:left">属于</td><td style="text-align:left">\in</td><td style="text-align:left">∈</td></tr><tr><td style="text-align:left">不属于</td><td style="text-align:left">\notin</td><td style="text-align:left">∉</td></tr></tbody></table><h3 id="32-集合与集合相关的关系"><a class="markdownIt-Anchor" href="#32-集合与集合相关的关系"></a> 3.2 集合与集合相关的关系</h3><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">符号</th><th style="text-align:left">效果</th></tr></thead><tbody><tr><td style="text-align:left">空集</td><td style="text-align:left">\emptyset</td><td style="text-align:left">∅</td></tr><tr><td style="text-align:left">子集</td><td style="text-align:left">\subset</td><td style="text-align:left">⊂</td></tr><tr><td style="text-align:left">真子集</td><td style="text-align:left">\subseteq</td><td style="text-align:left">⊆</td></tr><tr><td style="text-align:left">交集</td><td style="text-align:left">\bigcap 和 \cap</td><td style="text-align:left">⋂ 和 ∩</td></tr><tr><td style="text-align:left">并集</td><td style="text-align:left">\bigcup 和 \cup</td><td style="text-align:left">⋃ 和 ∪</td></tr></tbody></table><h2 id="4-数学重音和上下括号"><a class="markdownIt-Anchor" href="#4-数学重音和上下括号"></a> 4 数学重音和上下括号</h2><p>数学符号可以像文字一样<strong>加重音</strong>，比如对时间求导的符号 r˙(\dot{r})、ddotr(ddot{r})、表示向量的箭头 vecr(vec{r})、表示欧式空间单位向量的 e^(\hat{\mathbf{e}}) 等，详见表<a href="http://texdoc.net/texmf-dist/doc/latex/lshort-chinese/lshort-zh-cn.pdf#e1" target="_blank" rel="noopener">4.9</a>。使用时要注意重音符号的作用区域，<strong>一般应当对某个符号而不是符号加下标使用重音：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$\bar&#123;x_0&#125; \quad \bar&#123;x&#125;_0$</span><br><span class="line"></span><br><span class="line">$\vec&#123;x_0&#125; \quad \vec&#123;x&#125;_0$</span><br><span class="line"></span><br><span class="line">$\hat&#123;\mathbf&#123;e&#125;_x&#125; \quad</span><br><span class="line">\hat&#123;\mathbf&#123;e&#125;&#125;_x$</span><br></pre></td></tr></table></figure><p>效果：</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><msub><mi>x</mi><mn>0</mn></msub><mo>ˉ</mo></mover><mspace width="1em"/><msub><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">\bar{x_0} \quad \bar{x}_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.71778em;vertical-align:-0.15em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;">ˉ</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">ˉ</span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><msub><mi>x</mi><mn>0</mn></msub><mo>⃗</mo></mover><mspace width="1em"/><msub><mover accent="true"><mi>x</mi><mo>⃗</mo></mover><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">\vec{x_0} \quad \vec{x}_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.864em;vertical-align:-0.15em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><msub><mi mathvariant="bold">e</mi><mi>x</mi></msub><mo>^</mo></mover><mspace width="1em"/><msub><mover accent="true"><mi mathvariant="bold">e</mi><mo>^</mo></mover><mi>x</mi></msub></mrow><annotation encoding="application/x-tex">\hat{\mathbf{e}_x} \quad\hat{\mathbf{e}}_x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85788em;vertical-align:-0.15em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7078799999999998em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathbf">e</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;">^</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.70788em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathbf">e</span></span></span></span><span style="top:-3.01344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;">^</span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p>LATEX 也能为多个字符加重音，包括直接画线的 \overline 和 \underline 命令（可叠加使用）、宽重音符号 \widehat、表示向量的箭头 \overrightarrow 等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$0.\overline&#123;3&#125; &#x3D;</span><br><span class="line">\underline&#123;\underline&#123;1&#x2F;3&#125;&#125;$</span><br><span class="line"></span><br><span class="line">$\hat&#123;XY&#125; \qquad \widehat&#123;XY&#125;$</span><br><span class="line"></span><br><span class="line">$\vec&#123;AB&#125; \qquad</span><br><span class="line">\overrightarrow&#123;AB&#125;$</span><br></pre></td></tr></table></figure><p>效果：</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0.</mn><mover accent="true"><mn>3</mn><mo stretchy="true">‾</mo></mover><mo>=</mo><munder accentunder="true"><munder accentunder="true"><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mn>3</mn></mrow><mo stretchy="true">‾</mo></munder><mo stretchy="true">‾</mo></munder></mrow><annotation encoding="application/x-tex">0.\overline{3} =\underline{\underline{1/3}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444400000000001em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8444400000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-3.76444em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.4em;vertical-align:-0.6500000000000001em;"></span><span class="mord underline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7499999999999999em;"><span style="top:-2.3899999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="underline-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord underline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7499999999999999em;"><span style="top:-2.59em;"><span class="pstrut" style="height:3em;"></span><span class="underline-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">/</span><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.45000000000000007em;"><span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6500000000000001em;"><span></span></span></span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mrow><mi>X</mi><mi>Y</mi></mrow><mo>^</mo></mover><mspace width="2em"/><mover accent="true"><mrow><mi>X</mi><mi>Y</mi></mrow><mo stretchy="true">^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{XY} \qquad \widehat{XY}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.98333em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;">^</span></span></span></span></span></span><span class="mspace" style="margin-right:2em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.98333em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span></span></span><span class="svg-align" style="top:-3.6833299999999998em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.3em;"><svg width='100%' height='0.3em' viewBox='0 0 2364 300' preserveAspectRatio='none'><path d='M1181 0h2l1171 176c6 0 10 5 10 11l-2 23c-1 6-5 10-11 10h-1L1182 67 15 220h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z'/></svg></span></span></span></span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mrow><mi>A</mi><mi>B</mi></mrow><mo>⃗</mo></mover><mspace width="2em"/><mover accent="true"><mrow><mi>A</mi><mi>B</mi></mrow><mo stretchy="true">→</mo></mover></mrow><annotation encoding="application/x-tex">\vec{AB} \qquad\overrightarrow{AB}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.20533em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663299999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:2em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.20533em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span><span class="svg-align" style="top:-3.6833299999999998em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span></span></span></span></span></span></span></p><p>\overbrace 和 \underbrace 命令用来生成上/下括号，各自可带一个上/下标公式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$\underbrace&#123;\overbrace&#123;a+b+c&#125;^6</span><br><span class="line">\cdot \overbrace&#123;d+e+f&#125;^7&#125;</span><br><span class="line">_\text&#123;meaning of life&#125; &#x3D; 42$</span><br></pre></td></tr></table></figure><p>效果：</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder><munder><mrow><mover><mover><mrow><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi></mrow><mo stretchy="true">⏞</mo></mover><mn>6</mn></mover><mo>⋅</mo><mover><mover><mrow><mi>d</mi><mo>+</mo><mi>e</mi><mo>+</mo><mi>f</mi></mrow><mo stretchy="true">⏞</mo></mover><mn>7</mn></mover></mrow><mo stretchy="true">⏟</mo></munder><mtext>meaning of life</mtext></munder><mo>=</mo><mn>42</mn></mrow><annotation encoding="application/x-tex">\underbrace{\overbrace{a+b+c}^6\cdot \overbrace{d+e+f}^7}_\text{meaning of life} = 42</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.6582039999999996em;vertical-align:-1.664656em;"></span><span class="mord munder"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.9935479999999999em;"><span style="top:-2.465em;"><span class="pstrut" style="height:3.9935479999999997em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord text mtight"><span class="mord mtight">meaning of life</span></span></span></span><span style="top:-3.9935479999999997em;"><span class="pstrut" style="height:3.9935479999999997em;"></span><span class="mord munder"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.9935479999999999em;"><span class="svg-align" style="top:-3.151108em;"><span class="pstrut" style="height:3.9935479999999997em;"></span><span class="stretchy" style="height:0.548em;min-width:1.6em;"><span class="brace-left" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMinYMin slice'><path d='M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z'/></svg></span><span class="brace-center" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMidYMin slice'><path d='M199572 214c100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z'/></svg></span><span class="brace-right" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMaxYMin slice'><path d='M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z'/></svg></span></span></span><span style="top:-3.9935479999999997em;"><span class="pstrut" style="height:3.9935479999999997em;"></span><span class="mord"><span class="mord mover"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.9935479999999997em;"><span style="top:-3.34244em;"><span class="pstrut" style="height:3.34244em;"></span><span class="mord mover"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3424399999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">c</span></span></span><span class="svg-align" style="top:-3.79444em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="height:0.548em;min-width:1.6em;"><span class="brace-left" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMinYMin slice'><path d='M6 548l-6-6v-35l6-11c56-104 135.3-181.3 238-232 57.3-28.7 117-45 179-50h399577v120H403c-43.3 7-81 15-113 26-100.7 33-179.7 91-237 174-2.7 5-6 9-10 13-.7 1-7.3 1-20 1H6z'/></svg></span><span class="brace-center" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMidYMin slice'><path d='M200428 334c-100.7-8.3-195.3-44-280-108-55.3-42-101.7-93-139-153l-9-14c-2.7 4-5.7 8.7-9 14-53.3 86.7-123.7 153-211 199-66.7 36-137.3 56.3-212 62H0V214h199568c178.3-11.7 311.7-78.3 403-201 6-8 9.7-12 11-12 .7-.7 6.7-1 18-1s17.3.3 18 1c1.3 0 5 4 11 12 44.7 59.3 101.3 106.3 170 141s145.3 54.3 229 60h199572v120z'/></svg></span><span class="brace-right" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMaxYMin slice'><path d='M400000 542l-6 6h-17c-12.7 0-19.3-.3-20-1-4-4-7.3-8.3-10-13-35.3-51.3-80.8-93.8-136.5-127.5s-117.2-55.8-184.5-66.5c-.7 0-2-.3-4-1-18.7-2.7-76-4.3-172-5H0V214h399571l6 1c124.7 8 235 61.7 331 161 31.3 33.3 59.7 72.7 85 118l7 13v35z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.08333em;"><span></span></span></span></span></span></span><span style="top:-4.88488em;"><span class="pstrut" style="height:3.34244em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.08333em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mover"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.9935479999999997em;"><span style="top:-3.34244em;"><span class="pstrut" style="height:3.34244em;"></span><span class="mord mover"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3424399999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span><span class="svg-align" style="top:-3.79444em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="height:0.548em;min-width:1.6em;"><span class="brace-left" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMinYMin slice'><path d='M6 548l-6-6v-35l6-11c56-104 135.3-181.3 238-232 57.3-28.7 117-45 179-50h399577v120H403c-43.3 7-81 15-113 26-100.7 33-179.7 91-237 174-2.7 5-6 9-10 13-.7 1-7.3 1-20 1H6z'/></svg></span><span class="brace-center" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMidYMin slice'><path d='M200428 334c-100.7-8.3-195.3-44-280-108-55.3-42-101.7-93-139-153l-9-14c-2.7 4-5.7 8.7-9 14-53.3 86.7-123.7 153-211 199-66.7 36-137.3 56.3-212 62H0V214h199568c178.3-11.7 311.7-78.3 403-201 6-8 9.7-12 11-12 .7-.7 6.7-1 18-1s17.3.3 18 1c1.3 0 5 4 11 12 44.7 59.3 101.3 106.3 170 141s145.3 54.3 229 60h199572v120z'/></svg></span><span class="brace-right" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMaxYMin slice'><path d='M400000 542l-6 6h-17c-12.7 0-19.3-.3-20-1-4-4-7.3-8.3-10-13-35.3-51.3-80.8-93.8-136.5-127.5s-117.2-55.8-184.5-66.5c-.7 0-2-.3-4-1-18.7-2.7-76-4.3-172-5H0V214h399571l6 1c124.7 8 235 61.7 331 161 31.3 33.3 59.7 72.7 85 118l7 13v35z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span style="top:-4.88488em;"><span class="pstrut" style="height:3.34244em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8424400000000001em;"><span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.664656em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mord">2</span></span></span></span></p><h2 id="5-多行公式"><a class="markdownIt-Anchor" href="#5-多行公式"></a> 5 多行公式</h2><h3 id="51-长公式折行"><a class="markdownIt-Anchor" href="#51-长公式折行"></a> 5.1 长公式折行</h3><p>通常来讲应当避免写出超过一行而需要折行的长公式。如果一定要折行的话，优先在等号之前折行，其次在加号、减号之前，再次在乘号、除号之前。其它位置应当避免折行。</p><p>amsmath 宏包的 multline 环境提供了书写折行长公式的方便环境。它允许用 <code>\\\\</code> ( markdown 中显示：\ \ )折行，<strong>将公式编号放在最后一行</strong>。多行公式的<strong>首行左对齐</strong>，<strong>末行右对齐</strong>，<strong>其余行居中</strong>。<br />因为 markdown 中 <code>\</code> 是转义符，所以 <code>\\</code> 才表示一个 \ ，所以这里要写四个 <code>\</code>(<code>\\\\</code> )</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">a + b + c + d + e + f+ g + h + i \\</span><br><span class="line">&#x3D; j + k + l + m + n\\</span><br><span class="line">&#x3D; o + p + q + r + s\\&#x3D; t + u + v + x + z</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>效果：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi><mo>+</mo><mi>d</mi><mo>+</mo><mi>e</mi><mo>+</mo><mi>f</mi><mo>+</mo><mi>g</mi><mo>+</mo><mi>h</mi><mo>+</mo><mi>i</mi><mspace linebreak="newline"></mspace><mo>=</mo><mi>j</mi><mo>+</mo><mi>k</mi><mo>+</mo><mi>l</mi><mo>+</mo><mi>m</mi><mo>+</mo><mi>n</mi><mspace linebreak="newline"></mspace><mo>=</mo><mi>o</mi><mo>+</mo><mi>p</mi><mo>+</mo><mi>q</mi><mo>+</mo><mi>r</mi><mo>+</mo><mi>s</mi><mspace linebreak="newline"></mspace><mo>=</mo><mi>t</mi><mo>+</mo><mi>u</mi><mo>+</mo><mi>v</mi><mo>+</mo><mi>x</mi><mo>+</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">a + b + c + d + e + f+ g + h + i \\= j + k + l + m + n\\= o + p + q + r + s\\= t + u + v + x + z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">o</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69841em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span></span></p><p>与表格不同的是，公式的最后一行不写 <code>\\</code>，如果写了，反倒会产生一个多余的空行。类似 equation，multline 环境排版不带编号的折行长公式。</p><h3 id="52-多行公式"><a class="markdownIt-Anchor" href="#52-多行公式"></a> 5.2 多行公式</h3><p>更多的情况是，我们需要罗列一系列公式，并令其按照等号对齐。读者可能阅读过其它手册或者资料，知道 LATEX 提供了 eqnarray 环境。它按照等号左边——等号——等号右边呈三列对齐，但等号周围的空隙过大，加上公式编号等一些 bug，目前已不推荐使用。</p><p><strong>目前最常用的是 align 环境，它将公式用 &amp; 隔为两部分并对齐。分隔符通常放在等号左边：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;align&#125;</span><br><span class="line">a &amp; &#x3D; b + c \\</span><br><span class="line">&amp; &#x3D; d + e</span><br><span class="line">\end&#123;align&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200611115022.png" alt="image-20200611115020866" /></p><h3 id="53-公式中的间距"><a class="markdownIt-Anchor" href="#53-公式中的间距"></a> 5.3 公式中的间距</h3><p>前文提到过，绝大部分时候，数学公式中各元素的间距是根据符号类型自动生成的，需要我们手动调整的情况极少。我们已经认识了两个生成间距的命令 <code>\quad</code> 和 <code>\qquad</code>。在公式中我们还可能用到的间距包括 <code>\,</code>、<code>\:</code>、<code>\;</code> 以及负间距 <code>\!</code>，其中 <code>\quad</code>、<code>\qquad</code> 和 <code>\,</code> 在文本和数学环境中可用，后三个命令只用于数学环境。文本中的 <code>\␣</code> 也能使用在数学公式中。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200611120855.png" alt="" /></p><p>一个常见的用途是修正积分的被积函数 f(x) 和微元 dx 之间的距离。</p><p>注意微元里的 d 用的是直立体：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\int_a^b f(x)\mathrm&#123;d&#125;x</span><br><span class="line">\qquad</span><br><span class="line">\int_a^b f(x)\,\mathrm&#123;d&#125;x</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>效果：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∫</mo><mi>a</mi><mi>b</mi></msubsup><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi mathvariant="normal">d</mi><mi>x</mi><mspace width="2em"/><msubsup><mo>∫</mo><mi>a</mi><mi>b</mi></msubsup><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mtext> </mtext><mi mathvariant="normal">d</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">\int_a^b f(x)\mathrm{d}x\qquad\int_a^b f(x)\,\mathrm{d}x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.5109580000000005em;vertical-align:-0.9119499999999999em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5990080000000004em;"><span style="top:-1.7880500000000001em;margin-left:-0.44445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span><span style="top:-3.812900000000001em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9119499999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mord"><span class="mord mathrm">d</span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5990080000000004em;"><span style="top:-1.7880500000000001em;margin-left:-0.44445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span><span style="top:-3.812900000000001em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9119499999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathrm">d</span></span><span class="mord mathdefault">x</span></span></span></span></span></p><p>另一个用途是生成多重积分号。如果我们直接连写两个 \int，之间的间距将会过宽，此时可以使用负间距!修正之。不过 amsmath 提供了更方便的多重积分号，如<strong>二重积分 <code>\iint</code></strong>、<strong>三重积分 <code>\iiint</code></strong> 等。</p><h2 id="6-数组与矩阵"><a class="markdownIt-Anchor" href="#6-数组与矩阵"></a> 6 数组与矩阵</h2><p>为了排版二维数组，LATEX 提供了 array 环境，用法与 tabular 环境极为类似，也需要定义列格式，并用\换行。数组可作为一个公式块，在外套用 \left、\right 等定界符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\mathbf&#123;X&#125; &#x3D; \left(</span><br><span class="line">\begin&#123;array&#125;&#123;cccc&#125;</span><br><span class="line">x_&#123;11&#125; &amp; x_&#123;12&#125; &amp; \ldots &amp; x_&#123;1n&#125;\\</span><br><span class="line">x_&#123;21&#125; &amp; x_&#123;22&#125; &amp; \ldots &amp; x_&#123;2n&#125;\\</span><br><span class="line">\vdots &amp; \vdots &amp; \ddots &amp; \vdots\\</span><br><span class="line">x_&#123;n1&#125; &amp; x_&#123;n2&#125; &amp; \ldots &amp; x_&#123;nn&#125;\\</span><br><span class="line">\end&#123;array&#125;</span><br><span class="line">\right) </span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>效果：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="bold">X</mi><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnalign="center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mn>11</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mn>12</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>…</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mrow><mn>1</mn><mi>n</mi></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mn>21</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mn>22</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>…</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mrow><mn>2</mn><mi>n</mi></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋱</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mrow><mi>n</mi><mn>1</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mrow><mi>n</mi><mn>2</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>…</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mrow><mi>n</mi><mi>n</mi></mrow></msub></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\mathbf{X} = \left(\begin{array}{cccc}x_{11} &amp; x_{12} &amp; \ldots &amp; x_{1n}\\x_{21} &amp; x_{22} &amp; \ldots &amp; x_{2n}\\\vdots &amp; \vdots &amp; \ddots &amp; \vdots\\x_{n1} &amp; x_{n2} &amp; \ldots &amp; x_{nn}\\\end{array}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68611em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbf">X</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:5.459999999999999em;vertical-align:-2.4799999999999995em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9500349999999997em;"><span style="top:-1.3499850000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.5049950000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.1050050000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.7050150000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.950035em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4500349999999997em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9799999999999995em;"><span style="top:-5.8275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.6275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.7674999999999996em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-1.5675000000000006em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4799999999999995em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9799999999999995em;"><span style="top:-5.8275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.6275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.7674999999999996em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-1.5675000000000006em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4799999999999995em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9799999999999995em;"><span style="top:-5.64em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">…</span></span></span><span style="top:-4.44em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">…</span></span></span><span style="top:-2.5799999999999996em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋱</span></span></span><span style="top:-1.3800000000000006em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">…</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4799999999999995em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9799999999999995em;"><span style="top:-5.8275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.6275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.7674999999999996em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-1.5675000000000006em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4799999999999995em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9500349999999997em;"><span style="top:-1.3499850000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.5049950000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.1050050000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.7050150000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.950035em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4500349999999997em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>值得注意的是，上一节末尾介绍的 aligned 等环境也可以用定界符包裹。我们还可以利用空的定界符排版出这样的效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">|x| &#x3D; \left\&#123;</span><br><span class="line">\begin&#123;array&#125;&#123;rl&#125;</span><br><span class="line">-x &amp; \text&#123;if &#125; x &lt; 0,\\</span><br><span class="line">0 &amp; \text&#123;if &#125; x &#x3D; 0,\\</span><br><span class="line">x &amp; \text&#123;if &#125; x &gt; 0.</span><br><span class="line">\end&#123;array&#125; \right. </span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>效果：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnalign="right left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>x</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>if </mtext><mi>x</mi><mo>&lt;</mo><mn>0</mn><mo separator="true">,</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>if </mtext><mi>x</mi><mo>=</mo><mn>0</mn><mo separator="true">,</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>if </mtext><mi>x</mi><mo>&gt;</mo><mn>0.</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">|x| = \left\{\begin{array}{rl}-x &amp; \text{if } x &lt; 0,\\0 &amp; \text{if } x = 0,\\x &amp; \text{if } x &gt; 0.\end{array} \right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.49999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-3.15001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.30002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathdefault">x</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">if </span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mpunct">,</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">if </span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mpunct">,</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">if </span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mord">.</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><h2 id="7-分段函数"><a class="markdownIt-Anchor" href="#7-分段函数"></a> 7 分段函数</h2><p>不过上述例子可以用 amsmath 提供的 cases 环境更轻松地完成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$$ |x| &#x3D;</span><br><span class="line">\begin&#123;cases&#125;</span><br><span class="line">-x &amp; \text&#123;if &#125; x &lt; 0,\\</span><br><span class="line">0 &amp; \text&#123;if &#125; x &#x3D; 0,\\</span><br><span class="line">x &amp; \text&#123;if &#125; x &gt; 0.</span><br><span class="line">\end&#123;cases&#125; $$</span><br></pre></td></tr></table></figure><p>效果：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>x</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>if </mtext><mi>x</mi><mo>&lt;</mo><mn>0</mn><mo separator="true">,</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>if </mtext><mi>x</mi><mo>=</mo><mn>0</mn><mo separator="true">,</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>if </mtext><mi>x</mi><mo>&gt;</mo><mn>0.</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex"> |x| =\begin{cases}-x &amp; \text{if } x &lt; 0,\\0 &amp; \text{if } x = 0,\\x &amp; \text{if } x &gt; 0.\end{cases} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:4.32em;vertical-align:-1.9099999999999997em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.35002em;"><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.1500100000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.30001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.60002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.8500199999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.41em;"><span style="top:-4.41em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathdefault">x</span></span></span><span style="top:-2.97em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.5300000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.9099999999999997em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.41em;"><span style="top:-4.41em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if </span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mpunct">,</span></span></span><span style="top:-2.97em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if </span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mpunct">,</span></span></span><span style="top:-1.5300000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if </span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mord">.</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.9099999999999997em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>我们当然也可以用 array 环境排版各种矩阵。amsmath 宏包还直接提供了多种排版矩阵的环境，包括不带定界符的 matrix，以及带各种定界符的矩阵 pmatrix（(）、bmatrix（[）、Bmatrix（{）、vmatrix（）、Vmatrix（）。使用这些环境时，无需给定列格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;matrix&#125;</span><br><span class="line">1 &amp; 2 \\\\ 3 &amp; 4</span><br><span class="line">\end&#123;matrix&#125; \qquad</span><br><span class="line">\begin&#123;bmatrix&#125;</span><br><span class="line">x_&#123;11&#125; &amp; x_&#123;12&#125; &amp; \ldots &amp; x_&#123;1n&#125;\\</span><br><span class="line">x_&#123;21&#125; &amp; x_&#123;22&#125; &amp; \ldots &amp; x_&#123;2n&#125;\\</span><br><span class="line">\vdots &amp; \vdots &amp; \ddots &amp; \vdots\\</span><br><span class="line">x_&#123;n1&#125; &amp; x_&#123;n2&#125; &amp; \ldots &amp; x_&#123;nn&#125;\\</span><br><span class="line">\end&#123;bmatrix&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>效果：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>3</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>4</mn></mstyle></mtd></mtr></mtable><mspace width="2em"/><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mn>11</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mn>12</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>…</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mrow><mn>1</mn><mi>n</mi></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mn>21</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mn>22</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>…</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mrow><mn>2</mn><mi>n</mi></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋱</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mrow><mi>n</mi><mn>1</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mrow><mi>n</mi><mn>2</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>…</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mrow><mi>n</mi><mi>n</mi></mrow></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\begin{matrix}1 &amp; 2 \\\\ 3 &amp; 4\end{matrix} \qquad\begin{bmatrix}x_{11} &amp; x_{12} &amp; \ldots &amp; x_{1n}\\x_{21} &amp; x_{22} &amp; \ldots &amp; x_{2n}\\\vdots &amp; \vdots &amp; \ddots &amp; \vdots\\x_{n1} &amp; x_{n2} &amp; \ldots &amp; x_{nn}\\\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:5.459999999999999em;vertical-align:-2.4799999999999995em;"></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-1.8099999999999998em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000003em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.953005em;"><span style="top:-1.3499850000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.5049850000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.1059850000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.7069850000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.953005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4500349999999997em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9799999999999995em;"><span style="top:-5.8275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.6275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.7674999999999996em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-1.5675000000000006em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4799999999999995em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9799999999999995em;"><span style="top:-5.8275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.6275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.7674999999999996em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-1.5675000000000006em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4799999999999995em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9799999999999995em;"><span style="top:-5.64em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">…</span></span></span><span style="top:-4.44em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">…</span></span></span><span style="top:-2.5799999999999996em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋱</span></span></span><span style="top:-1.3800000000000006em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">…</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4799999999999995em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9799999999999995em;"><span style="top:-5.8275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.6275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.7674999999999996em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-1.5675000000000006em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4799999999999995em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.953005em;"><span style="top:-1.3499850000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.5049850000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.1059850000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.7069850000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.953005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4500349999999997em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>在矩阵中的元素里排版分式时，一来要用到 \dfrac 等命令，二来行与行之间有可能紧贴着，这时要调节间距：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\mathbf&#123;H&#125;&#x3D;</span><br><span class="line">\begin&#123;bmatrix&#125;</span><br><span class="line">\dfrac&#123;\partial^2 f&#125;&#123;\partial x^2&#125; &amp;</span><br><span class="line">\dfrac&#123;\partial^2 f&#125;</span><br><span class="line">&#123;\partial x \partial y&#125; \\</span><br><span class="line">\dfrac&#123;\partial^2 f&#125;</span><br><span class="line">&#123;\partial x \partial y&#125; &amp;</span><br><span class="line">\dfrac&#123;\partial^2 f&#125;&#123;\partial y^2&#125;</span><br><span class="line">\end&#123;bmatrix&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>效果：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="bold">H</mi><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><msup><mi mathvariant="normal">∂</mi><mn>2</mn></msup><mi>f</mi></mrow><mrow><mi mathvariant="normal">∂</mi><msup><mi>x</mi><mn>2</mn></msup></mrow></mfrac></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><msup><mi mathvariant="normal">∂</mi><mn>2</mn></msup><mi>f</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>x</mi><mi mathvariant="normal">∂</mi><mi>y</mi></mrow></mfrac></mstyle></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><msup><mi mathvariant="normal">∂</mi><mn>2</mn></msup><mi>f</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>x</mi><mi mathvariant="normal">∂</mi><mi>y</mi></mrow></mfrac></mstyle></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><msup><mi mathvariant="normal">∂</mi><mn>2</mn></msup><mi>f</mi></mrow><mrow><mi mathvariant="normal">∂</mi><msup><mi>y</mi><mn>2</mn></msup></mrow></mfrac></mstyle></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\mathbf{H}=\begin{bmatrix}\dfrac{\partial^2 f}{\partial x^2} &amp;\dfrac{\partial^2 f}{\partial x \partial y} \\\dfrac{\partial^2 f}{\partial x \partial y} &amp;\dfrac{\partial^2 f}{\partial y^2}\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68611em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbf">H</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:4.80204em;vertical-align:-2.15003em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6520099999999998em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.80499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.40599em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.65201em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.621548em;"><span style="top:-4.621548000000001em;"><span class="pstrut" style="height:3.491108em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.491108em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault">x</span><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.121548em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.621548em;"><span style="top:-4.621548000000001em;"><span class="pstrut" style="height:3.491108em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault">x</span><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.491108em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.121548em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6520099999999998em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.80499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.40599em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.65201em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><h2 id="8-数学符号的字体控制"><a class="markdownIt-Anchor" href="#8-数学符号的字体控制"></a> 8 数学符号的字体控制</h2><h3 id="81-数学字母字体"><a class="markdownIt-Anchor" href="#81-数学字母字体"></a> 8.1 数学字母字体</h3><p>LATEX 允许一部分数学符号切换字体，主要是拉丁字母、数字等等。某一些命令需要字体宏包的支持。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$\mathcal&#123;R&#125; \quad \mathfrak&#123;R&#125;</span><br><span class="line">\quad \mathbb&#123;R&#125;$</span><br><span class="line"></span><br><span class="line">$$\mathcal&#123;L&#125;</span><br><span class="line">&#x3D; -\frac&#123;1&#125;&#123;4&#125;F_&#123;\mu\nu&#125;F^&#123;\mu\nu&#125;$$</span><br><span class="line"></span><br><span class="line">$\mathfrak&#123;su&#125;(2)$ and</span><br><span class="line">$\mathfrak&#123;so&#125;(3)$ Lie algebr</span><br></pre></td></tr></table></figure><p>效果：</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="script">R</mi><mspace width="1em"/><mi mathvariant="fraktur">R</mi><mspace width="1em"/><mi mathvariant="double-struck">R</mi></mrow><annotation encoding="application/x-tex">\mathcal{R} \quad \mathfrak{R}\quad \mathbb{R}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69141em;vertical-align:0em;"></span><span class="mord"><span class="mord mathcal">R</span></span><span class="mspace" style="margin-right:1em;"></span><span class="mord"><span class="mord mathfrak">R</span></span><span class="mspace" style="margin-right:1em;"></span><span class="mord"><span class="mord mathbb">R</span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="script">L</mi><mo>=</mo><mo>−</mo><mfrac><mn>1</mn><mn>4</mn></mfrac><msub><mi>F</mi><mrow><mi>μ</mi><mi>ν</mi></mrow></msub><msup><mi>F</mi><mrow><mi>μ</mi><mi>ν</mi></mrow></msup></mrow><annotation encoding="application/x-tex">\mathcal{L}= -\frac{1}{4}F_{\mu\nu}F^{\mu\nu}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathcal">L</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">μ</span><span class="mord mathdefault mtight" style="margin-right:0.06366em;">ν</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714392em;"><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">μ</span><span class="mord mathdefault mtight" style="margin-right:0.06366em;">ν</span></span></span></span></span></span></span></span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mi mathvariant="fraktur">s</mi><mi mathvariant="fraktur">u</mi></mrow><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathfrak{su}(2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathfrak">s</span><span class="mord mathfrak">u</span></span><span class="mopen">(</span><span class="mord">2</span><span class="mclose">)</span></span></span></span> and<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mi mathvariant="fraktur">s</mi><mi mathvariant="fraktur">o</mi></mrow><mo stretchy="false">(</mo><mn>3</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathfrak{so}(3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathfrak">s</span><span class="mord mathfrak">o</span></span><span class="mopen">(</span><span class="mord">3</span><span class="mclose">)</span></span></span></span> Lie algebr</p><h3 id="82-数学符号的尺寸"><a class="markdownIt-Anchor" href="#82-数学符号的尺寸"></a> 8.2 数学符号的尺寸</h3><p>数学符号按照符号排版的位置规定尺寸，从大到小包括行间公式尺寸、行内公式尺寸、上下标尺寸、次级上下标尺寸。除了字号有别之外，行间和行内公式尺寸下的巨算符也使用不一样的大小。</p><p>例如行间公式的分式内，分子分母使用行内公式尺寸，巨算符采用行内尺寸的形式。对比一下分子分母使用 \displaystyle 命令与否的区别：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">P &#x3D; \frac</span><br><span class="line">&#123;\sum_&#123;i&#x3D;1&#125;^n (x_i- x)(y_i- y)&#125;</span><br><span class="line">&#123;\displaystyle \left[</span><br><span class="line">\sum_&#123;i&#x3D;1&#125;^n (x_i-x)^2</span><br><span class="line">\sum_&#123;i&#x3D;1&#125;^n (y_i-y)^2</span><br><span class="line">\right]^&#123;1&#x2F;2&#125; &#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>效果：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo>=</mo><mfrac><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo>−</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><mstyle scriptlevel="0" displaystyle="true"><msup><mrow><mo fence="true">[</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mo stretchy="false">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo>−</mo><mi>y</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo fence="true">]</mo></mrow><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mn>2</mn></mrow></msup></mstyle></mfrac></mrow><annotation encoding="application/x-tex">P = \frac{\sum_{i=1}^n (x_i- x)(y_i- y)}{\displaystyle \left[\sum_{i=1}^n (x_i-x)^2\sum_{i=1}^n (y_i-y)^2\right]^{1/2} }</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:4.689571em;vertical-align:-3.195569em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.494002em;"><span style="top:-2.11em;"><span class="pstrut" style="height:4.0279em;"></span><span class="mord"><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">[</span></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size4">]</span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:2.0279em;"><span style="top:-4.2029000000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">/</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-4.257899999999999em;"><span class="pstrut" style="height:4.0279em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-4.71761em;"><span class="pstrut" style="height:4.0279em;"></span><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.195569em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><h2 id="9-符号表"><a class="markdownIt-Anchor" href="#9-符号表"></a> 9 符号表</h2><h3 id="91-文本数学模式通用符号"><a class="markdownIt-Anchor" href="#91-文本数学模式通用符号"></a> 9.1 文本/数学模式通用符号</h3><table><thead><tr><th style="text-align:left">文本/数学模式通用符号</th><th style="text-align:left">命令</th></tr></thead><tbody><tr><td style="text-align:left"><code>${$</code></td><td style="text-align:left">{</td></tr><tr><td style="text-align:left">}</td><td style="text-align:left">}</td></tr><tr><td style="text-align:left"><code>$$$</code></td><td style="text-align:left"><code>$</code></td></tr><tr><td style="text-align:left">%</td><td style="text-align:left">%</td></tr><tr><td style="text-align:left">\dag</td><td style="text-align:left">\dag</td></tr><tr><td style="text-align:left">§</td><td style="text-align:left">\S</td></tr><tr><td style="text-align:left">\copyright</td><td style="text-align:left">\copyright</td></tr><tr><td style="text-align:left">…</td><td style="text-align:left">\dots</td></tr><tr><td style="text-align:left">\ddag</td><td style="text-align:left">\ddag</td></tr><tr><td style="text-align:left">\P</td><td style="text-align:left">\P</td></tr><tr><td style="text-align:left">\pounds</td><td style="text-align:left">\pounds</td></tr></tbody></table><h3 id="92-二元关系符"><a class="markdownIt-Anchor" href="#92-二元关系符"></a> 9.2 二元关系符</h3><p>有的二元关系符都可以加 \not 前缀得到相反意义的关系符，例如 \not= 就得到不等号（同 \ne ）。</p><table><thead><tr><th style="text-align:right">效果</th><th style="text-align:left">命令</th><th style="text-align:right">效果</th><th style="text-align:left">命令</th><th style="text-align:right">效果</th><th style="text-align:left">命令</th></tr></thead><tbody><tr><td style="text-align:right">&lt;</td><td style="text-align:left">&lt;</td><td style="text-align:right">&gt;</td><td style="text-align:left">&gt;</td><td style="text-align:right">=</td><td style="text-align:left">=</td></tr><tr><td style="text-align:right">≤</td><td style="text-align:left">\leq or \le</td><td style="text-align:right">≥</td><td style="text-align:left">\geq or \ge</td><td style="text-align:right">≡</td><td style="text-align:left">\equiv</td></tr><tr><td style="text-align:right">≪</td><td style="text-align:left">\ll</td><td style="text-align:right">≫</td><td style="text-align:left">\gg</td><td style="text-align:right">≐</td><td style="text-align:left">\doteq</td></tr><tr><td style="text-align:right">≺</td><td style="text-align:left">\prec</td><td style="text-align:right">≻</td><td style="text-align:left">\succ</td><td style="text-align:right">∼</td><td style="text-align:left">\sim</td></tr><tr><td style="text-align:right">⪯</td><td style="text-align:left">\preceq</td><td style="text-align:right">⪰</td><td style="text-align:left">\succeq</td><td style="text-align:right">≃</td><td style="text-align:left">\simeq</td></tr><tr><td style="text-align:right">⊂</td><td style="text-align:left">\subset</td><td style="text-align:right">⊃</td><td style="text-align:left">\supset</td><td style="text-align:right">≈</td><td style="text-align:left">\approx</td></tr><tr><td style="text-align:right">⊆</td><td style="text-align:left">\subseteq</td><td style="text-align:right">⊇</td><td style="text-align:left">\supseteq</td><td style="text-align:right">≅</td><td style="text-align:left">\cong</td></tr><tr><td style="text-align:right">⊏</td><td style="text-align:left">\sqsubset</td><td style="text-align:right">⊐</td><td style="text-align:left">\sqsupset</td><td style="text-align:right">⋈</td><td style="text-align:left">\Join</td></tr><tr><td style="text-align:right">⊑</td><td style="text-align:left">\sqsubseteq</td><td style="text-align:right">⊒</td><td style="text-align:left">\sqsupseteq</td><td style="text-align:right">⋈</td><td style="text-align:left">\bowtie</td></tr><tr><td style="text-align:right">∈</td><td style="text-align:left">\in</td><td style="text-align:right">∋</td><td style="text-align:left">\ni or \owns</td><td style="text-align:right">∝</td><td style="text-align:left">\propto</td></tr><tr><td style="text-align:right">⊢</td><td style="text-align:left">\vdash</td><td style="text-align:right">⊣</td><td style="text-align:left">\dashv</td><td style="text-align:right">⊨</td><td style="text-align:left">\models</td></tr><tr><td style="text-align:right">∣</td><td style="text-align:left">\mid</td><td style="text-align:right">∥</td><td style="text-align:left">\parallel</td><td style="text-align:right">⊥</td><td style="text-align:left">\perp</td></tr><tr><td style="text-align:right">⌣</td><td style="text-align:left">\smile</td><td style="text-align:right">⌢</td><td style="text-align:left">\frown</td><td style="text-align:right">≍</td><td style="text-align:left">\asymp</td></tr><tr><td style="text-align:right">:</td><td style="text-align:left">:</td><td style="text-align:right">∉</td><td style="text-align:left">\notin</td><td style="text-align:right">≠</td><td style="text-align:left">\neq or \ne</td></tr></tbody></table><h3 id="93-二元运算符"><a class="markdownIt-Anchor" href="#93-二元运算符"></a> 9.3 二元运算符</h3><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200611122013.png" alt="" /></p><h3 id="94-希腊字母"><a class="markdownIt-Anchor" href="#94-希腊字母"></a> 9.4 希腊字母</h3><p>latex 希腊字母符号代码就是 <code>斜杠+其英文名称</code>，如 αα:αα,ββ:ββ… 等。<br />大写的 latex 希腊字母就是<code>斜杠+首字母大写的英文名称</code>，如 ΓΓ:ΓΓ,ΔΔ:ΔΔ…。<br />\Alpha，\Beta 等希腊字母符号不存在，因为它们和拉丁字母 A，B 等一模一样；小写字母里也不存在 \omicron，可以直接用字母 <code>o</code> 代替，省的打那么长的代码。</p><table><thead><tr><th style="text-align:left">序号</th><th style="text-align:left">大写</th><th style="text-align:left">小写</th><th style="text-align:left">英文</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">A</td><td style="text-align:left">α</td><td style="text-align:left">alpha</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">B</td><td style="text-align:left">β</td><td style="text-align:left">beta</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">Γ</td><td style="text-align:left">γ</td><td style="text-align:left">gamma</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">Δ</td><td style="text-align:left">δ</td><td style="text-align:left">delta</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left">E</td><td style="text-align:left">ϵ</td><td style="text-align:left">epsilon</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left">Z</td><td style="text-align:left">ζ</td><td style="text-align:left">zeta</td></tr><tr><td style="text-align:left">7</td><td style="text-align:left">H</td><td style="text-align:left">η</td><td style="text-align:left">eta</td></tr><tr><td style="text-align:left">8</td><td style="text-align:left">Θ</td><td style="text-align:left">θ</td><td style="text-align:left">theta</td></tr><tr><td style="text-align:left">9</td><td style="text-align:left">I</td><td style="text-align:left">ι</td><td style="text-align:left">iota</td></tr><tr><td style="text-align:left">10</td><td style="text-align:left">K</td><td style="text-align:left">κ</td><td style="text-align:left">kappa</td></tr><tr><td style="text-align:left">11</td><td style="text-align:left">Λ</td><td style="text-align:left">λ</td><td style="text-align:left">lambda</td></tr><tr><td style="text-align:left">12</td><td style="text-align:left">M</td><td style="text-align:left">μ</td><td style="text-align:left">mu</td></tr><tr><td style="text-align:left">13</td><td style="text-align:left">N</td><td style="text-align:left">ν</td><td style="text-align:left">nu</td></tr><tr><td style="text-align:left">14</td><td style="text-align:left">Ξ</td><td style="text-align:left">ξ</td><td style="text-align:left">xi</td></tr><tr><td style="text-align:left">15</td><td style="text-align:left">O</td><td style="text-align:left">ο</td><td style="text-align:left">omicron</td></tr><tr><td style="text-align:left">16</td><td style="text-align:left">Π</td><td style="text-align:left">π</td><td style="text-align:left">pi</td></tr><tr><td style="text-align:left">17</td><td style="text-align:left">P</td><td style="text-align:left">ρ</td><td style="text-align:left">rho</td></tr><tr><td style="text-align:left">18</td><td style="text-align:left">Σ</td><td style="text-align:left">σ</td><td style="text-align:left">sigma</td></tr><tr><td style="text-align:left">19</td><td style="text-align:left">T</td><td style="text-align:left">τ</td><td style="text-align:left">tau</td></tr><tr><td style="text-align:left">20</td><td style="text-align:left">Υ</td><td style="text-align:left">υ</td><td style="text-align:left">upsilon</td></tr><tr><td style="text-align:left">21</td><td style="text-align:left">Φ</td><td style="text-align:left">ϕ</td><td style="text-align:left">phi</td></tr><tr><td style="text-align:left">22</td><td style="text-align:left">X</td><td style="text-align:left">χ</td><td style="text-align:left">chi</td></tr><tr><td style="text-align:left">23</td><td style="text-align:left">Ψ</td><td style="text-align:left">ψ</td><td style="text-align:left">psi</td></tr><tr><td style="text-align:left">24</td><td style="text-align:left">Ω</td><td style="text-align:left">ω</td><td style="text-align:left">omega</td></tr></tbody></table><h3 id="95-巨算符"><a class="markdownIt-Anchor" href="#95-巨算符"></a> 9.5 巨算符</h3><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200611122613.png" alt="" /></p><h3 id="96-箭头"><a class="markdownIt-Anchor" href="#96-箭头"></a> 9.6 箭头</h3><p>除了作为上下标之外，箭头还用于表示过程。amsmath 的  <code>\xleftarrow</code>和<code>\xrightarrow</code> 命令可以为箭头增加上下标：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$ a\xleftarrow&#123;x+y+z&#125; b $$</span><br><span class="line"></span><br><span class="line">$$c\xrightarrow[x&lt;y]&#123;a*b*c&#125;d $$</span><br></pre></td></tr></table></figure><p>效果：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mover><mo stretchy="true">←</mo><mpadded width="+0.6em" lspace="0.3em"><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>+</mo><mi>z</mi></mrow></mpadded></mover><mi>b</mi></mrow><annotation encoding="application/x-tex">a\xleftarrow{x+y+z} b </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.041331em;vertical-align:-0.01100000000000012em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel x-arrow"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0303309999999999em;"><span style="top:-3.322em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight x-arrow-pad"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="svg-align" style="top:-2.689em;"><span class="pstrut" style="height:2.7em;"></span><span class="hide-tail" style="height:0.522em;min-width:1.469em;"><svg width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMinYMin slice'><path d='M400000 241H110l3-3c68.7-52.7 113.7-120 135-202 4-14.7 6-23 6-25 0-7.3-7-11-21-11-8 0-13.2.8-15.5 2.5-2.3 1.7-4.2 5.8-5.5 12.5-1.3 4.7-2.7 10.3-4 17-12 48.7-34.8 92-68.5 130S65.3 228.3 18 247c-10 4-16 7.7-18 11 0 8.7 6 14.3 18 17 47.3 18.7 87.8 47 121.5 85S196 441.3 208 490c.7 2 1.3 5 2 9s1.2 6.7 1.5 8c.3 1.3 1 3.3 2 6s2.2 4.5 3.5 5.5c1.3 1 3.3 1.8 6 2.5s6 1 10 1c14 0 21-3.7 21-11 0-2-2-10.3-6-25-20-79.3-65-146.7-135-202 l-3-3h399890zM100 241v40h399900v-40z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.01100000000000012em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><munderover><mo stretchy="true">→</mo><mpadded width="+0.6em" lspace="0.3em"><mrow><mi>x</mi><mo>&lt;</mo><mi>y</mi></mrow></mpadded><mpadded width="+0.6em" lspace="0.3em"><mrow><mi>a</mi><mo>∗</mo><mi>b</mi><mo>∗</mo><mi>c</mi></mrow></mpadded></munderover><mi>d</mi></mrow><annotation encoding="application/x-tex">c\xrightarrow[x&lt;y]{a*b*c}d </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.743586em;vertical-align:-0.6354780000000002em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel x-arrow"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1081079999999999em;"><span style="top:-3.322em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight x-arrow-pad"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mbin mtight">∗</span><span class="mord mathdefault mtight">b</span><span class="mbin mtight">∗</span><span class="mord mathdefault mtight">c</span></span></span></span><span class="svg-align" style="top:-2.689em;"><span class="pstrut" style="height:2.7em;"></span><span class="hide-tail" style="height:0.522em;min-width:1.469em;"><svg width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span><span style="top:-2.2006300000000003em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight x-arrow-pad"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">&lt;</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6354780000000002em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span></span></span></span></span></p><p><strong>箭头详细表：</strong></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200611122801.png" alt="" /></p><h2 id="10-括号与定界符"><a class="markdownIt-Anchor" href="#10-括号与定界符"></a> 10 括号与定界符</h2><h3 id="101-作为重音的箭头符号"><a class="markdownIt-Anchor" href="#101-作为重音的箭头符号"></a> 10.1 作为重音的箭头符号</h3><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200611121029.png" alt="" /></p><h3 id="102-定界符"><a class="markdownIt-Anchor" href="#102-定界符"></a> 10.2 定界符</h3><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200611121055.png" alt="" /></p><h2 id="11-参考资料"><a class="markdownIt-Anchor" href="#11-参考资料"></a> 11 参考资料</h2><ul><li><a href="http://texdoc.net/texmf-dist/doc/latex/lshort-chinese/lshort-zh-cn.pdf" target="_blank" rel="noopener">💭 01. 一份（不太）简短的 LATEX 2ε 介绍 - lshort-zh-cn</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ToolBox/IDEA篇-非Maven项目打War包与部署</title>
      <link href="/2020/08/15/ToolBox/IDEA%E7%AF%87-%E9%9D%9EMaven%E9%A1%B9%E7%9B%AE%E6%89%93War%E5%8C%85%E4%B8%8E%E9%83%A8%E7%BD%B2/"/>
      <url>/2020/08/15/ToolBox/IDEA%E7%AF%87-%E9%9D%9EMaven%E9%A1%B9%E7%9B%AE%E6%89%93War%E5%8C%85%E4%B8%8E%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="idea篇-非maven项目打war包与部署"><a class="markdownIt-Anchor" href="#idea篇-非maven项目打war包与部署"></a> IDEA篇-非Maven项目打War包与部署</h1><h2 id="打war包"><a class="markdownIt-Anchor" href="#打war包"></a> 打War包</h2><h3 id="打开project-structure"><a class="markdownIt-Anchor" href="#打开project-structure"></a> 打开Project Structure</h3><p><img src= "/img/loading.gif" data-src="https://keyon-photo-1256901694.cos.ap-beijing.myqcloud.com/markdown/20191215164405.png" alt="" /></p><h3 id="打包方式archive"><a class="markdownIt-Anchor" href="#打包方式archive"></a> 打包方式：Archive</h3><p>设置打包方式为Archive。</p><blockquote><ul><li>web application exploded，这个是以文件夹形式（War Exploded）发布项目，选择这个，发布项目时就会自动生成文件夹在指定的output directory,</li><li>web application archive，就是war包形式，每次都会重新打包全部的,将项目打成一个war包在指定位置；</li></ul></blockquote><p><img src= "/img/loading.gif" data-src="https://keyon-photo-1256901694.cos.ap-beijing.myqcloud.com/markdown/20191215164839.png" alt="" /></p><p><img src= "/img/loading.gif" data-src="https://keyon-photo-1256901694.cos.ap-beijing.myqcloud.com/markdown/20191215165354.png" alt="" /></p><h2 id="部署"><a class="markdownIt-Anchor" href="#部署"></a> 部署</h2><p>找到服务器tomcat根目录下的webapps</p><p>将项目war包放入webapps目录下。</p><p>不用重启tomcat，等待tomcat自动重新加载war包内容。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ToolBox/IDEA使用指南</title>
      <link href="/2020/08/15/ToolBox/IDEA%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2020/08/15/ToolBox/IDEA%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="idea-使用指南"><a class="markdownIt-Anchor" href="#idea-使用指南"></a> IDEA 使用指南</h1><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>!&gt; 说明：从 2020 年 07 月 10 日开始，使用正版！支持正版！为正版发声！</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200712095432.png" alt="image-20200712095431547" /></p><h2 id="idea-版本更新使用"><a class="markdownIt-Anchor" href="#idea-版本更新使用"></a> IDEA 版本更新使用</h2><h3 id="idea-202013"><a class="markdownIt-Anchor" href="#idea-202013"></a> IDEA 2020.1.3</h3><p>使用正版！不再提供其他途径的方法更新！如果有需要这个正版使用权或者热衷于维护正版权益，可以联系我一起使用！🔑</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200712095458.png" alt="image-20200712095457394" /></p><p>以下版本，破解方式对应相应的版本目前（2020 年 07 月 12 日）还是有效的，如果可以的话，希望可以和我一起支持正版！🔒</p><h3 id="idea-20201"><a class="markdownIt-Anchor" href="#idea-20201"></a> IDEA 2020.1</h3><blockquote><p>官网下载之后，采用<a href="/ToolBox/IDEA%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97?id=idea-201934">激活方式</a>才能激活！</p></blockquote><ul><li><a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">官网下载 https://www.jetbrains.com/idea/</a></li><li><a href="/ToolBox/IDEA%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97?id=idea-201934">点击此处获取激活方式</a></li></ul><h3 id="idea-201934"><a class="markdownIt-Anchor" href="#idea-201934"></a> IDEA 2019.3.4</h3><blockquote><p>IDEA 2019.3.3 和 IDEA 2019.3.4 激活方式如下：</p></blockquote><ul><li>下载 jetbrainsCrack.jar</li></ul><p>下载链接：<a href="https://pan.baidu.com/s/1ADriYJLu1S5BLR1XSMMbSg" target="_blank" rel="noopener">https://pan.baidu.com/s/1ADriYJLu1S5BLR1XSMMbSg</a><br />提取码：kpjy</p><ul><li>将 jetbrainsCrack.jar 放入 bin 目录下</li></ul><p><img src= "/img/loading.gif" data-src="../images/image-20200319202304437.png" alt="image-20200319202304437" /></p><ul><li>启动 IDEA，点击 Configure --&gt; Edit Custom VM Options，将下面命令复制到文件中，然后重新启动 IDEA</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-javaagent:..\..\bin\JetbrainsCrack.jar</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="../images/image-20200319203202234.png" alt="image-20200319203202234" /></p><ul><li>点击 IDEA 菜单 Configure --&gt; Manage License --&gt; License Server，在 License Server 中输入 <a href="http://jetbrains-license-server" target="_blank" rel="noopener">http://jetbrains-license-server</a> 到 License Server Address 中，然后先点击 Discover Server，等待后点击下面 Actuvate 即可，接着退出重启 IDEA</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;jetbrains-license-server</span><br></pre></td></tr></table></figure><p>新的 agent license server：<code>https://fls.jetbrains-agent.com</code>（HTTP也可用）</p><p><img src= "/img/loading.gif" data-src="../images/image-20200319204247679.png" alt="image-20200319204247679" /></p><ul><li>重新进入 IDEA 菜单 Configure --&gt; Manage License，此时会发现 IDEA 已经给我们生成了服务器地址：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;fls.jetbrains-agent.com</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="../images/image-20200319204839884.png" alt="image-20200319204839884" /></p><p>完美撒花！</p><p>!&gt; 不过，可能会提醒下面信息：</p><p><img src= "/img/loading.gif" data-src="../images/image-20200323100018728.png" alt="image-20200323100018728" /></p><p>解决方案：</p><p>下载文件 important.txt 放在与 JetbrainsCrack.jar 同目录 bin 下：</p><p>百度云下载链接：<a href="https://pan.baidu.com/s/1beei7a6wVFSWDrPIQeQCLA" target="_blank" rel="noopener">https://pan.baidu.com/s/1beei7a6wVFSWDrPIQeQCLA</a><br />提取码：7ybo</p><p><img src= "/img/loading.gif" data-src="../images/image-20200323101805421.png" alt="image-20200323101805421" /></p><p>重新打开 IDEA 刚刚提示信息就没啦，完美撒花！</p><h3 id="idea-201933"><a class="markdownIt-Anchor" href="#idea-201933"></a> IDEA 2019.3.3</h3><blockquote><p>官网下载之后，采用<a href="/ToolBox/IDEA%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97?id=idea-201934">激活方式</a>才能激活！百度云链接下载直接激活！推荐使用百度云链接下载，集成了很多好用的插件和功能！</p></blockquote><ul><li><p>下载一：<a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">官网下载 https://www.jetbrains.com/idea/</a></p></li><li><p>下载二：百度云链接：<a href="https://pan.baidu.com/s/1z_Z1wigY0Yt3xfTIg_Idhg" target="_blank" rel="noopener">https://pan.baidu.com/s/1z_Z1wigY0Yt3xfTIg_Idhg</a><br />提取码：4clm</p></li><li><p>汉化包链接：<a href="https://pan.baidu.com/s/1KMkgzFPdxcd_Kinv65yZmg" target="_blank" rel="noopener">https://pan.baidu.com/s/1KMkgzFPdxcd_Kinv65yZmg</a><br />提取码：pldz</p></li></ul><h2 id="idea-maven-配置"><a class="markdownIt-Anchor" href="#idea-maven-配置"></a> IDEA maven 配置</h2><blockquote><p>maven 如今是 idea 当中必不可少的工具了，这里主要说明一下如何进行maven 配置。虽然 idea 有一些默认的 maven 配置，但是如果想要好用，最好还是自己配置一个 maven。</p></blockquote><p>idea maven配置的方法和步骤如下：</p><ul><li>（1）官方下载一个 maven：</li></ul><p>下载地址：<a href="http://maven.apache.org/download.html" target="_blank" rel="noopener">http://maven.apache.org/download.html</a></p><p>找到 Binary zip archive =&gt; apache-maven-3.6.3-bin.zip，然后点击 apache-maven-3.6.3-bin.zip 进行下载，也可以直接点击下面的地址进行下载：</p><p><a href="https://mirror.bit.edu.cn/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.zip" target="_blank" rel="noopener">apache-maven-3.6.3-bin.zip</a></p><ul><li>（2）将下载的文件解压到自己的安装目录，比如：</li></ul><p>D:\developer_tools\maven\apache-maven-3.6.3</p><p><img src= "/img/loading.gif" data-src="../images/image-20200319112720427.png" alt="image-20200319112720427" /></p><ul><li>（3）配置maven：</li></ul><p>用编辑器打开文件 D:\developer_tools\maven\apache-maven-3.6.3\conf\settings.xml，并对文件里面的内容进行修改：</p><p>在 settings 的节点下增加镜像配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span>      </span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span>&gt;</span>repo2<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>repo2 maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span>      </span><br><span class="line">       <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo2.maven.org/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>（4）修改 idea 自带maven：</li></ul><p>打开 idea 界面的 setting 配置，配置路径如下：</p><p>File --&gt; Settings --&gt; Build, Execution, Deployment --&gt; Build Tools --&gt; Maven</p><p>将 Maven home directory 修改为 D:\developer_tools\maven\apache-maven-3.6.3，User settings file 修改为 D:\developer_tools\maven\apache-maven-3.6.3\conf\settings.xml，并将 User settings file 后面的Override进行勾选（否则不生效），然后点击Apply或OK，保存一下。</p><blockquote><p>注：local repository 想改就改哈，就是镜像存的位置，如果要改 local repository，记得回 setting.xml 里添加：</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置本地仓库路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\developer_tools\maven\my_maven_local_repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="../images/image-20200319113540704.png" alt="image-20200319113540704" /></p><p>到这里 maven 配置成功</p><h2 id="idea-注释模板设置"><a class="markdownIt-Anchor" href="#idea-注释模板设置"></a> IDEA 注释模板设置</h2><h3 id="设置类注释"><a class="markdownIt-Anchor" href="#设置类注释"></a> 设置类注释</h3><p>file --&gt; settings --&gt; Editor --&gt; File and Code Templates --&gt; Includes</p><p><img src= "/img/loading.gif" data-src="../images/image-20200319155303619.png" alt="image-20200319155303619" /></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">  * @ProjectName: $&#123;PROJECT_NAME&#125;</span><br><span class="line">  * @ClassName: $&#123;NAME&#125;</span><br><span class="line">  * @Description: TODO(一句话描述该类的功能)</span><br><span class="line">  * @Author: $&#123;USER&#125;</span><br><span class="line">  * @Date: $&#123;DATE&#125; $&#123;TIME&#125;</span><br><span class="line">  * @version v1.0</span><br><span class="line">  *&#x2F;</span><br></pre></td></tr></table></figure><h3 id="设置方法注释"><a class="markdownIt-Anchor" href="#设置方法注释"></a> 设置方法注释</h3><p>file --&gt; settings --&gt; Editor --&gt; Live Templates</p><p><img src= "/img/loading.gif" data-src="../images/b9054bdf67dc0c8f873390d40c03ff5a598.jpg" alt="" /></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @Title: $enclosing_method$</span><br><span class="line"> * @Description: TODO(这里用一句话描述这个方法的作用)</span><br><span class="line"> * @param @param $tags$</span><br><span class="line"> * @return @return $return_type$</span><br><span class="line"> * @author $user$</span><br><span class="line"> * @throws</span><br><span class="line"> * @date $date$ $time$</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure><h2 id="idea-插件推荐安装"><a class="markdownIt-Anchor" href="#idea-插件推荐安装"></a> IDEA 插件推荐安装</h2><h3 id="stackoverflow"><a class="markdownIt-Anchor" href="#stackoverflow"></a> <strong>Stackoverflow</strong></h3><blockquote><p>这个插件其实是最实用的插件，程序猿遇到的问题，基本都能找到回答，但是它使用的是 google 搜索引擎，需要使用 vpn 来进行操作</p></blockquote><p>选中需要搜索的问题，然后，右键点击</p><p><img src= "/img/loading.gif" data-src="../images/image-20200401173553955.png" alt="image-20200401173553955" /></p><h3 id="translationplugin"><a class="markdownIt-Anchor" href="#translationplugin"></a> TranslationPlugin</h3><blockquote><p>对于不经常使用英语的同学来说，对类，变量，方法想取一个合适的名字，此时发现自己的词汇早已还给老师 ，怎么办，这个插件能帮到你~</p></blockquote><p>直接选中你想要翻译的词，然后右键选择</p><p><img src= "/img/loading.gif" data-src="../images/gif/googleTranslation.gif" alt="" /></p><h3 id="mybatis-log-plugin"><a class="markdownIt-Anchor" href="#mybatis-log-plugin"></a> Mybatis-Log-plugin</h3><blockquote><p>开发的项目一般都少不了日志系统，而我们在书写 mysql 语句的时候，参数的对应，往往有时候会忽略，mybatis 自己控制的参数编译对应，个人感觉有点反人类，我们可以使用这个插件变成自己比较直观的对应~</p></blockquote><p>选中需要转换的 mybatis log 日志，然后点击右键，选择 Restore sql from slection</p><p><img src= "/img/loading.gif" data-src="../images/image-20200401175208981.png" alt="image-20200401175208981" /></p><h3 id="gsonformat"><a class="markdownIt-Anchor" href="#gsonformat"></a> GsonFormat</h3><blockquote><p>在与组外或者不同部门对接接口时候发现，有时候对方返回的是 JSON 对象，自己想要用一个对象去接受，以便于处理后续，此时，需要自己一个个手动去输入属性么，肯定很抓狂，不过咱们可以使用这个插件来解决这个尴尬问题，当然也可以使用外部网址解决，比如 bejson 这个网站~</p></blockquote><h3 id="ideajad"><a class="markdownIt-Anchor" href="#ideajad"></a> IdeaJad</h3><blockquote><p>以前查看 class 文件形式的时候或者 jar，都会使用一个外部反编译工具，这样操作明显不方便，使用此插件可以一直在 idea 中查看文件~ ps：其实 Inteli Idea这个编译器已经自带了反编译功能，老夫~~~~~~</p></blockquote><p>选择 class 文件，右键 Decompile, 完成反编译</p><p><img src= "/img/loading.gif" data-src="../images/image-20200401180252781.png" alt="image-20200401180252781" /></p><h3 id="free-idea-mybatis"><a class="markdownIt-Anchor" href="#free-idea-mybatis"></a> Free-idea-mybatis</h3><blockquote><p>mybatis xml 和对应的 mapper 之间来回切换的时候，有时候不同人开发，放置的位置又不同，使用此插件后，来回切换的时候异常方便，和所放置的位置无关~</p></blockquote><h3 id="codeglance"><a class="markdownIt-Anchor" href="#codeglance"></a> CodeGlance</h3><blockquote><p>再也不用疯狂拖拽到底去找一遍啦，多不方便呀，使用此插件可以查看缩略图一样，快速切换到自己需要去的地方~</p></blockquote><p><img src= "/img/loading.gif" data-src="../images/image-20200401180851021.png" alt="image-20200401180851021" /></p><h3 id="alibaba-java-coding-guidelines"><a class="markdownIt-Anchor" href="#alibaba-java-coding-guidelines"></a> Alibaba Java Coding Guidelines</h3><blockquote><p>一款阿里巴巴公司试行的开发设计规范~</p></blockquote><p><img src= "/img/loading.gif" data-src="../images/image-20200401191955215.png" alt="image-20200401191955215" /></p><h3 id="lombok"><a class="markdownIt-Anchor" href="#lombok"></a> Lombok</h3><blockquote><p>Lombok 能以简单的注解形式来简化 java 代码，提高开发人员的开发效率。例如开发中经常需要写的 javabean，都需要花时间去添加相应的 getter/setter，也许还要去写构造器、equals 等方法，而且需要维护，当属性多时会出现大量的 getter/setter 方法，这些显得很冗长也没有太多技术含量，一旦修改属性，就容易出现忘记修改对应方法的失误。Lombok 能通过注解的方式，在编译时自动为属性生成构造器、getter/setter、equals、hashcode、toString 方法。</p></blockquote><h3 id="jrebel"><a class="markdownIt-Anchor" href="#jrebel"></a> JRebel</h3><blockquote><p>热部署插件，在修改完代码后，不用再重新启动，很实用！但是，不是免费的</p></blockquote><p>热部署只是针对 class 文件,源文件这些。对于属性文件 .xml 或 .properties，只要修改了，都需要重启服务器，因为属性文件是在服务器启动的时候加载的，不可能被热部署识别到。</p><p>安装好，检查几个必要的设置看是否已配置，否则热部署可能没效果：</p><p>1）设置项目自动编译</p><p><img src= "/img/loading.gif" data-src="../images/image-20200401183742179.png" alt="image-20200401183742179" /></p><p>2）设置 compiler.automake.allow.when.app.running</p><p>快捷键 ctrl+shift+A 或者 菜单 help-&gt;find action… 打开搜索框搜索 “registry”，像图中勾选</p><p><img src= "/img/loading.gif" data-src="../images/image-20200401184039511.png" alt="image-20200401184039511" /></p><p>3）需要热部署的项目在此处是否勾选</p><p><img src= "/img/loading.gif" data-src="../images/image-20200401184211205.png" alt="image-20200401184211205" /></p><p>4）可能很多人想要知道破解方法，在此参考了<a href="https://blog.csdn.net/qierkang/article/details/95095954" target="_blank" rel="noopener">这篇博客</a>，方法如下：</p><ul><li>点击 <a href="https://jrebel.qekang.com/" target="_blank" rel="noopener">JRebel</a> 自动获取 GUID 地址，复制红框内地址：</li></ul><p><img src= "/img/loading.gif" data-src="../images/image-20200401184844824.png" alt="image-20200401184844824" /></p><p>点击此处：</p><p><img src= "/img/loading.gif" data-src="../images/image-20200401184508610.png" alt="image-20200401184508610" /></p><p>输入刚刚复制的地址，邮箱默认输入：xyqierkang@163.com 若改变，就是到刚刚那个网站地址下面一行寻找即可</p><p><img src= "/img/loading.gif" data-src="../images/image-20200401185116863.png" alt="image-20200401185116863" /></p><p>出现这个说明成功激活！</p><p><img src= "/img/loading.gif" data-src="../images/image-20200401185340188.png" alt="image-20200401185340188" /></p><p>接着根据提示信息操作即可：</p><p><img src= "/img/loading.gif" data-src="../images/image-20200401185510318.png" alt="image-20200401185510318" /></p><h3 id="key-promoter-x"><a class="markdownIt-Anchor" href="#key-promoter-x"></a> Key promoter X</h3><blockquote><p>快捷键提示工具：<code>Key Promoter X</code> 是一个提示插件，当你在 <code>IDEA</code> 里面使用鼠标的时候，如果这个鼠标操作是能够用快捷键替代的，那么 <code>Key Promoter X</code> 会弹出一个提示框，告知你这个鼠标操作可以用什么快捷键替代。对于想完全使用快捷键在 <code>IDEA</code> 的，这个插件就很有用。</p></blockquote><p>比如会这样提示：</p><p><img src= "/img/loading.gif" data-src="../images/image-20200401191506019.png" alt="image-20200401191506019" /></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ToolBox/Git操作指南</title>
      <link href="/2020/08/15/ToolBox/Git%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/"/>
      <url>/2020/08/15/ToolBox/Git%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="git操作指南"><a class="markdownIt-Anchor" href="#git操作指南"></a> Git操作指南</h1><h2 id="1安装并配置git"><a class="markdownIt-Anchor" href="#1安装并配置git"></a> 1.安装并配置Git</h2><p>Git官网：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></p><p>安装完成后，打开Git Bash，配置Git：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;email@example.com&quot;</span><br><span class="line">git config --global user.name &quot;Your Name&quot;</span><br></pre></td></tr></table></figure><p>其中 --global参数，表示这台机器上所有的Git仓库都会使用这个配置。</p><p>当然也可以对某个仓库指定不同的用户名与邮箱，在当前仓库运行该命令而不使用–global即可。</p><h2 id="2获取项目"><a class="markdownIt-Anchor" href="#2获取项目"></a> 2.获取项目</h2><p>使用Git进行版本管理的对象是项目，那么项目从哪里获取呢？</p><p>两种场景：</p><ol><li>项目源码在远程版本库（GitHub/GitLab/Gitee），从远程版本库克隆项目到本地。</li><li>项目源码在本地，想要添加Git版本管理，并关联推送到指定远程版本库。（<strong>或者采用第一种方案，远程克隆到本地后再将代码全部移动到版本库</strong>，简单快速）</li></ol><h3 id="21-从远程版本库克隆项目到本地"><a class="markdownIt-Anchor" href="#21-从远程版本库克隆项目到本地"></a> 2.1 从远程版本库克隆项目到本地</h3><p><img src= "/img/loading.gif" data-src="https://keyon-photo-1256901694.cos.ap-beijing.myqcloud.com/markdown/1553673502159.png" alt="" /></p><ol><li>SSH方式（推荐，速度快，需要密钥）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@49.4.67.157:bdl&#x2F;AI_Sports_App.git</span><br></pre></td></tr></table></figure><ol start="2"><li>HTTP方式（不需要密钥）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone http:&#x2F;&#x2F;49.4.67.157:7070&#x2F;bdl&#x2F;AI_Sports_App.git</span><br></pre></td></tr></table></figure><h4 id="如何配置密钥"><a class="markdownIt-Anchor" href="#如何配置密钥"></a> 如何配置密钥</h4><p>打开Git Bash，输入cd .ssh，如果没有该目录，说明本机没有配置过密钥。</p><p>输入cd …回到上一层目录，即确保当前目录在~下</p><p><img src= "/img/loading.gif" data-src="https://keyon-photo-1256901694.cos.ap-beijing.myqcloud.com/markdown/1553673857705.png" alt="" /></p><p>输入以下命令创建密钥：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your_email@youremail.com&quot;</span><br></pre></td></tr></table></figure><p>查看你生成的公钥：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~&#x2F;.ssh&#x2F;id_rsa.pub</span><br></pre></td></tr></table></figure><p>复制公钥，登录GitHub/GitLab，点击右上角头像，点击Setting，左侧导航栏找到SSH Keys，将公钥粘贴在Key输入框中，设置Title，点击Add Key保存即可。</p><p><img src= "/img/loading.gif" data-src="https://keyon-photo-1256901694.cos.ap-beijing.myqcloud.com/markdown/1553674449958.png" alt="" /></p><ol start="3"><li>克隆指定分支的版本</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b &lt;分支名&gt; &lt;Git URL&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li>指定克隆深度（depth=1即只克隆最新版本）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --depth&#x3D;1 &lt;Git URL&gt;</span><br></pre></td></tr></table></figure><h3 id="22-本地项目添加git版本管理并关联推送到远程版本库"><a class="markdownIt-Anchor" href="#22-本地项目添加git版本管理并关联推送到远程版本库"></a> 2.2 本地项目添加Git版本管理，并关联推送到远程版本库</h3><p>⭐（2.2节建议<strong>最最最后看</strong>，涉及后面的提交与推送操作）</p><p>进入项目根目录，执行Git仓库初始化操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>将项目所有内容提交到暂存区。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p>将暂存区内容推送的本地版本库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;Add: Project&quot;</span><br></pre></td></tr></table></figure><p>在远程版本库（GitHub/GitLab/Gitee）上创建一个远程仓库。</p><p>获取SSH链接（没有配置SSH密钥的话可使用HTTPS链接）</p><p><img src= "/img/loading.gif" data-src="https://keyon-photo-1256901694.cos.ap-beijing.myqcloud.com//markdown20191210181906.png" alt="" /></p><p>本地版本库关联远程版本库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@gitee.com:YanKeyon&#x2F;YanKeyon.git</span><br></pre></td></tr></table></figure><p>将远程版本库中代码与本地版本库中代码进行合并。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase origin master</span><br></pre></td></tr></table></figure><p>将本地版本库代码上传至远程版本库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>OK。</p><h2 id="3查看版本库状态"><a class="markdownIt-Anchor" href="#3查看版本库状态"></a> 3.查看版本库状态</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://keyon-photo-1256901694.cos.ap-beijing.myqcloud.com/markdown/1553669958316.png" alt="" /></p><p>标红的文件：FirstFile.txt 表示没有被添加的文件。</p><h2 id="4将文件添加到暂存区"><a class="markdownIt-Anchor" href="#4将文件添加到暂存区"></a> 4.将文件添加到暂存区</h2><p>在上面我们通过git status可以看到有一个标红文件，将该文件提交到暂存区有两种方式：</p><ol><li>提交单个文件到暂存区(<filename>为文件路径)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;filename&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>提交当前全部修改过的文件到暂存区</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p><strong>温馨提示</strong></p><p>如果新增了一个空的文件夹，Git是监测不到的，此时需要在该文件夹内创建文件后才可以。</p><h2 id="5提交暂存区的内容"><a class="markdownIt-Anchor" href="#5提交暂存区的内容"></a> 5.提交暂存区的内容</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;描述&quot;</span><br></pre></td></tr></table></figure><p>-m 后面输入的是本次提交的说明，可以输入你本次提交的内容概略，方便以后从历史记录中方便的找到改动记录。</p><h2 id="6推送到远程版本库"><a class="markdownIt-Anchor" href="#6推送到远程版本库"></a> 6.推送到远程版本库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>也可以只输入<code>git push</code> ，默认提交到master分支。</p><h2 id="7从远程版本库更新项目到本地"><a class="markdownIt-Anchor" href="#7从远程版本库更新项目到本地"></a> 7.从远程版本库更新项目到本地</h2><p>使用场景：</p><ul><li>当远程版本库有更新，而本地想更新的时候使用</li><li>当本地想提交时，建议先<code>git pull</code>一次，再通过<code>git add</code>、<code>git commit -m &quot;&quot;</code>和<code>git push</code>提交本地代码。</li></ul><ol><li>全部更新</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><ol start="2"><li>更新单个文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch</span><br><span class="line">git checkout origin&#x2F;master -- &lt;filename&gt;</span><br></pre></td></tr></table></figure><h2 id="8查看单个文件的修改内容"><a class="markdownIt-Anchor" href="#8查看单个文件的修改内容"></a> 8.查看单个文件的修改内容</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff &lt;filename&gt;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://keyon-photo-1256901694.cos.ap-beijing.myqcloud.com/markdown/1563952760787.png" alt="" /></p><p>-表示删除的内容</p><p>+表示增加的内容</p><p><strong>温馨提示</strong></p><p>如果进入diff后发现无法退出，进入：模式，键入q即可。</p><h2 id="9查看提交日志"><a class="markdownIt-Anchor" href="#9查看提交日志"></a> 9.查看提交日志</h2><ol><li>查看全部提交日志</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://keyon-photo-1256901694.cos.ap-beijing.myqcloud.com/markdown/1553675101892.png" alt="" /></p><p>会列出所有提交的commit ID、Author、Date、描述。</p><p>也可以通过浏览器访问GitHub/GitLab查看。</p><ol start="2"><li>查看最新一次提交</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log -1</span><br></pre></td></tr></table></figure><ol start="3"><li>以单行的形式查看提交</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log oneline</span><br></pre></td></tr></table></figure><ol start="4"><li>查看提交日志，并且能看到分支情况（推荐）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --graph --pretty&#x3D;oneline --abbrev-commit</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://keyon-photo-1256901694.cos.ap-beijing.myqcloud.com/markdown/1553700672654.png" alt="" /></p><h2 id="10撤销修改"><a class="markdownIt-Anchor" href="#10撤销修改"></a> 10.撤销修改</h2><p>撤销修改分多种情况：</p><ol><li><p>该文件没有使用<code>git add</code>到暂存区，仍在工作区：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- &lt;filename&gt;</span><br></pre></td></tr></table></figure></li><li><p>该文件使用了<code>git add</code>到暂存区，但没有使用<code>git commit</code>：</p><p>将暂存区的文件撤销，重新放回工作区：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD &lt;filename&gt;</span><br></pre></td></tr></table></figure></li><li><p>该文件提交到暂存区并且<code>git commit</code>提交到本地版本库：</p><p>版本回退（回退到指定版本）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard &lt;commit ID&gt;</span><br></pre></td></tr></table></figure></li></ol><p><strong>温馨提示</strong></p><p>使用checkout的时候最好在后面加–，单一分支的项目没事，但如果是多分支的，没有<code>--</code>就变成了“切换到另一个分支”的命令。</p><h2 id="11版本回退"><a class="markdownIt-Anchor" href="#11版本回退"></a> 11.版本回退</h2><ol><li>回退到上一个版本</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD</span><br></pre></td></tr></table></figure><ol start="2"><li>回退到指定版本</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard &lt;commit ID&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>如果你回退版本后想重新回到新版本</p><p>命令reflog可以记录你的每一次命令，找到想回去的commit ID，使用reset即可。</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><h2 id="12提交忽略文件的配置"><a class="markdownIt-Anchor" href="#12提交忽略文件的配置"></a> 12.提交忽略文件的配置</h2><ol><li><p>在仓库根目录下新建.gitignore文件</p></li><li><p>添加忽略规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">忽略规则如下：</span><br><span class="line">#表示此为注释，将被Git忽略</span><br><span class="line">*.a表示忽略所有.a结尾的文件</span><br><span class="line">bulid&#x2F;表示忽略build&#x2F;目录下的所有文件</span><br><span class="line">bin&#x2F;:表示该文件夹下所有内容都被忽略，不忽略bin文件夹</span><br><span class="line">&#x2F;bin:表示忽略根目录下的bin文件夹</span><br><span class="line">**&#x2F;foo:表示忽略&#x2F;foo,a&#x2F;foo,a&#x2F;b&#x2F;foo等</span><br><span class="line">!*.zip表示不忽略所有.zip结尾的文件</span><br></pre></td></tr></table></figure><p><strong>温馨提示：</strong></p><p>如果你不慎在创建.gitignore文件之前就push了项目，那么即使你在.gitignore文件中写入新的过滤规则，这些规则也不会起作用，Git仍然会对所有文件进行版本管理。简单来说出现这种问题的原因就是Git已经开始管理这些文件了，所以你无法再通过过滤规则过滤它们。所以大家一定要养成在项目开始就创建.gitignore文件的习惯，否则一单push，处理起来会非常麻烦。</p><p><strong>模板</strong></p><p>在GitHub上有一个专门为各个平台提供的.gitignore模板</p><p><a href="https://github.com/github/gitignore" target="_blank" rel="noopener">https://github.com/github/gitignore</a></p><p>其中包括针对Android项目的忽略模板：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># Built application files</span><br><span class="line">*.apk</span><br><span class="line">*.ap_</span><br><span class="line">*.aab</span><br><span class="line"></span><br><span class="line"># Files for the ART&#x2F;Dalvik VM</span><br><span class="line">*.dex</span><br><span class="line"></span><br><span class="line"># Java class files</span><br><span class="line">*.class</span><br><span class="line"></span><br><span class="line"># Generated files</span><br><span class="line">bin&#x2F;</span><br><span class="line">gen&#x2F;</span><br><span class="line">out&#x2F;</span><br><span class="line"></span><br><span class="line"># Gradle files</span><br><span class="line">.gradle&#x2F;</span><br><span class="line">build&#x2F;</span><br><span class="line"></span><br><span class="line"># Local configuration file (sdk path, etc)</span><br><span class="line">local.properties</span><br><span class="line"></span><br><span class="line"># Proguard folder generated by Eclipse</span><br><span class="line">proguard&#x2F;</span><br><span class="line"></span><br><span class="line"># Log Files</span><br><span class="line">*.log</span><br><span class="line"></span><br><span class="line"># Android Studio Navigation editor temp files</span><br><span class="line">.navigation&#x2F;</span><br><span class="line"></span><br><span class="line"># Android Studio captures folder</span><br><span class="line">captures&#x2F;</span><br><span class="line"></span><br><span class="line"># IntelliJ</span><br><span class="line">*.iml</span><br><span class="line">.idea&#x2F;workspace.xml</span><br><span class="line">.idea&#x2F;tasks.xml</span><br><span class="line">.idea&#x2F;gradle.xml</span><br><span class="line">.idea&#x2F;assetWizardSettings.xml</span><br><span class="line">.idea&#x2F;dictionaries</span><br><span class="line">.idea&#x2F;libraries</span><br><span class="line">.idea&#x2F;caches</span><br><span class="line"># Android Studio 3 in .gitignore file.</span><br><span class="line">.idea&#x2F;caches&#x2F;build_file_checksums.ser</span><br><span class="line">.idea&#x2F;modules.xml</span><br><span class="line"></span><br><span class="line"># Keystore files</span><br><span class="line"># Uncomment the following lines if you do not want to check your keystore files in.</span><br><span class="line">#*.jks</span><br><span class="line">#*.keystore</span><br><span class="line"></span><br><span class="line"># External native build folder generated in Android Studio 2.2 and later</span><br><span class="line">.externalNativeBuild</span><br><span class="line"></span><br><span class="line"># Google Services (e.g. APIs or Firebase)</span><br><span class="line"># google-services.json</span><br><span class="line"></span><br><span class="line"># Freeline</span><br><span class="line">freeline.py</span><br><span class="line">freeline&#x2F;</span><br><span class="line">freeline_project_description.json</span><br><span class="line"></span><br><span class="line"># fastlane</span><br><span class="line">fastlane&#x2F;report.xml</span><br><span class="line">fastlane&#x2F;Preview.html</span><br><span class="line">fastlane&#x2F;screenshots</span><br><span class="line">fastlane&#x2F;test_output</span><br><span class="line">fastlane&#x2F;readme.md</span><br><span class="line"></span><br><span class="line"># Version control</span><br><span class="line">vcs.xml</span><br><span class="line"></span><br><span class="line"># lint</span><br><span class="line">lint&#x2F;intermediates&#x2F;</span><br><span class="line">lint&#x2F;generated&#x2F;</span><br><span class="line">lint&#x2F;outputs&#x2F;</span><br><span class="line">lint&#x2F;tmp&#x2F;</span><br><span class="line"># lint&#x2F;reports&#x2F;</span><br></pre></td></tr></table></figure></li></ol><h2 id="13更新推送失败的解决方案"><a class="markdownIt-Anchor" href="#13更新推送失败的解决方案"></a> 13.更新/推送失败的解决方案</h2><ol><li><p>git pull更新失败</p><p><img src= "/img/loading.gif" data-src="https://keyon-photo-1256901694.cos.ap-beijing.myqcloud.com/markdown/1553678236793.png" alt="" /></p><p>出现错误，提示你本地的修改与远程版本库的修改冲突了。</p><p>蓝框中的文件即为冲突的文件。</p><p><strong>解决方法</strong></p><ol><li>本地备份该文件。</li><li>通过<code>git checkout -- &lt;filename&gt;</code>撤销本地对该文件的修改。</li><li>此时使用<code>git pull</code>即可更新。</li><li>然后再进行自己的修改并推送到远程版本库即可。</li></ol></li><li><p>git push推送失败</p><p><img src= "/img/loading.gif" data-src="https://keyon-photo-1256901694.cos.ap-beijing.myqcloud.com/markdown/1553678626072.png" alt="" /></p><p>出现的原因一般是由于本地没更新却推送导致的。</p><p>此时通过<code>git pull</code>更新一下项目即可再次推送。</p><p><strong>温馨提示</strong></p><p>建议每次提交之前，先更新一下，确保版本最新后再提交。</p></li></ol><h2 id="14提高效率的小技巧配置别名"><a class="markdownIt-Anchor" href="#14提高效率的小技巧配置别名"></a> 14.提高效率的小技巧：配置别名</h2><ol><li>git status 等价于 git st</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.st status</span><br></pre></td></tr></table></figure><ol start="2"><li>git checkout – 等价于 git co-</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.co- checkout --</span><br></pre></td></tr></table></figure><ol start="3"><li>git commit 等价于 git co</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.co &quot;commit -m&quot;</span><br></pre></td></tr></table></figure><ol start="4"><li>git push 等价于 git ps</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.ps push</span><br></pre></td></tr></table></figure><ol start="5"><li>git pull 等价于 git pl</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.pl pull</span><br></pre></td></tr></table></figure><ol start="7"><li>git log …(打印分支) 等价于 git lg</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.lg &quot;log &#39;--graph&#39; &#39;--pretty&#x3D;oneline&#39; &#39;--abbrev-commit&#39;&quot;</span><br></pre></td></tr></table></figure><ol start="8"><li>取消别名</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset alias.别名</span><br></pre></td></tr></table></figure><p><strong>温馨提示</strong></p><ul><li>配置别名时，如果命令含有多个参数，需要使用&quot;&quot;与’'将参数包含起来，否则设置会无效。</li><li>不要重复配置别名，如重复配置，输入<code>git config --global --replace-all alias.别名 &quot;命令&quot;</code>即可恢复到一个配置。</li><li>输入<code>git config --list</code>查看配置列表</li></ul><h1 id="git进阶分支管理"><a class="markdownIt-Anchor" href="#git进阶分支管理"></a> Git进阶：分支管理</h1><blockquote><p>参考：廖雪峰Git教程：<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013743862006503a1c5bf5a783434581661a3cc2084efa000" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013743862006503a1c5bf5a783434581661a3cc2084efa000</a></p><p><a href="https://www.jianshu.com/p/92305d949c0e" target="_blank" rel="noopener">https://www.jianshu.com/p/92305d949c0e</a></p></blockquote><p><img src= "/img/loading.gif" data-src="https://keyon-photo-1256901694.cos.ap-beijing.myqcloud.com/markdown/20190724152127.png" alt="" /></p><h2 id="1创建分支"><a class="markdownIt-Anchor" href="#1创建分支"></a> 1.创建分支</h2><p>创建一个分支，名为dev</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch dev</span><br></pre></td></tr></table></figure><h2 id="2切换分支"><a class="markdownIt-Anchor" href="#2切换分支"></a> 2.切换分支</h2><p>切换到dev分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout dev</span><br></pre></td></tr></table></figure><h2 id="3创建并切换分支"><a class="markdownIt-Anchor" href="#3创建并切换分支"></a> 3.创建并切换分支</h2><p>创建并切换到dev分支，即上面两条命令可合成一条。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b dev</span><br></pre></td></tr></table></figure><h2 id="4查看当前分支"><a class="markdownIt-Anchor" href="#4查看当前分支"></a> 4.查看当前分支</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><h2 id="5合并分支到当前分支"><a class="markdownIt-Anchor" href="#5合并分支到当前分支"></a> 5.合并分支到当前分支</h2><p>合并dev分支到当前分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge dev</span><br></pre></td></tr></table></figure><h2 id="6删除分支"><a class="markdownIt-Anchor" href="#6删除分支"></a> 6.删除分支</h2><p>删除dev分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d dev</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ToolBox/electron安装踩坑记录</title>
      <link href="/2020/08/15/ToolBox/electron%E5%AE%89%E8%A3%85%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
      <url>/2020/08/15/ToolBox/electron%E5%AE%89%E8%A3%85%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="electron安装踩坑记录"><a class="markdownIt-Anchor" href="#electron安装踩坑记录"></a> electron安装踩坑记录</h1><p><a href="https://electronjs.org/" target="_blank" rel="noopener">electron官网</a></p><p><a href="https://electronjs.org/docs" target="_blank" rel="noopener">electron官方文档</a></p><h2 id="配置镜像"><a class="markdownIt-Anchor" href="#配置镜像"></a> 配置镜像</h2><p>找到C:\Users{用户名}.npmrc，添加自定义镜像</p><p><code>electron_mirror=&quot;https://npm.taobao.org/mirrors/electron/&quot;</code></p><h2 id="安装electron"><a class="markdownIt-Anchor" href="#安装electron"></a> 安装electron</h2><p>安装最新版：<code>npm install -g electron</code>（安装失败，提示一个zip文件没有权限）</p><p>安装指定版本：<code>npm install -g electron@6.0.0</code>（安装成功）</p><p>可以添加–verbose参数显示下载进度。</p><h2 id="electron脚手架"><a class="markdownIt-Anchor" href="#electron脚手架"></a> electron脚手架</h2><p>安装electron脚手架：<code>npm install -g electron-forge</code></p><p>创建项目：<code>electron-forge init myDemo</code></p><p>启动项目：<code>npm start</code></p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><blockquote><p><a href="https://www.jianshu.com/p/9a12d3b06394" target="_blank" rel="noopener">Electron</a></p><p><a href="https://blog.csdn.net/mocoe/article/details/86751925" target="_blank" rel="noopener">Electron安装失败</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python/Python入门学习笔记/CH7-面向对象高级编程</title>
      <link href="/2020/08/15/Python/Python%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/CH7-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
      <url>/2020/08/15/Python/Python%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/CH7-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="第七章-面向对象高级编程"><a class="markdownIt-Anchor" href="#第七章-面向对象高级编程"></a> 第七章 面向对象高级编程</h1><p>数据封装、继承和多态只是面向对象程序设计中最基础的 3 个概念。在 Python 中，面向对象还有很多高级特性，允许我们写出非常强大的功能。</p><p>我们会讨论多重继承、定制类、元类等概念。</p><h2 id="71-使用-__slots__"><a class="markdownIt-Anchor" href="#71-使用-__slots__"></a> 7.1 使用 <code>__slots__</code></h2><p>正常情况下，当我们定义了一个 class，创建了一个 class 的实例后，我们可以给该实例绑定任何<code>属性</code>和<code>方法</code>，这就是动态语言的灵活性。先定义 class：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>然后，尝试给实例绑定一个属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.name = <span class="string">'Michael'</span> <span class="comment"># 动态给实例绑定一个属性</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.name)</span><br><span class="line">Michael</span><br></pre></td></tr></table></figure><p>还可以尝试给实例绑定一个方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">set_age</span><span class="params">(self, age)</span>:</span> <span class="comment"># 定义一个函数作为实例方法</span></span><br><span class="line"><span class="meta">... </span>    self.age = age</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> types <span class="keyword">import</span> MethodType</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.set_age = MethodType(set_age, s) <span class="comment"># 给实例绑定一个方法</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.set_age(<span class="number">25</span>) <span class="comment"># 调用实例方法</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.age <span class="comment"># 测试结果</span></span><br><span class="line"><span class="number">25</span></span><br></pre></td></tr></table></figure><p>但是，给一个实例绑定的方法，对另一个实例是不起作用的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = Student() <span class="comment"># 创建新的实例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2.set_age(<span class="number">25</span>) <span class="comment"># 尝试调用方法</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">'Student'</span> object has no attribute <span class="string">'set_age'</span></span><br></pre></td></tr></table></figure><p>为了给所有实例都绑定方法，可以给 class 绑定方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">set_score</span><span class="params">(self, score)</span>:</span></span><br><span class="line"><span class="meta">... </span>    self.score = score</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Student.set_score = set_score</span><br></pre></td></tr></table></figure><p>给 class 绑定方法后，所有实例均可调用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.set_score(<span class="number">100</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.score</span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2.set_score(<span class="number">99</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2.score</span><br><span class="line"><span class="number">99</span></span><br></pre></td></tr></table></figure><p>通常情况下，上面的<code>set_score</code>方法可以直接定义在 class 中，但动态绑定允许我们在程序运行的过程中动态给 class 加上功能，这在静态语言中很难实现。</p><p>但是，如果我们想要限制实例的属性怎么办？比如，只允许对 Student 实例添加<code>name</code>和<code>age</code>属性。</p><p>为了达到限制的目的，Python 允许在定义 class 的时候，定义一个特殊的<code>__slots__</code>变量，来限制该 class 实例能添加的属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    __slots__ = (<span class="string">'name'</span>, <span class="string">'age'</span>) <span class="comment"># 用tuple定义允许绑定的属性名称</span></span><br></pre></td></tr></table></figure><p>然后，我们试试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student() <span class="comment"># 创建新的实例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.name = <span class="string">'Michael'</span> <span class="comment"># 绑定属性'name'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.age = <span class="number">25</span> <span class="comment"># 绑定属性'age'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.score = <span class="number">99</span> <span class="comment"># 绑定属性'score'</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">'Student'</span> object has no attribute <span class="string">'score'</span></span><br></pre></td></tr></table></figure><p>由于<code>'score'</code>没有被放到<code>__slots__</code>中，所以不能绑定<code>score</code>属性，试图绑定<code>score</code>将得到<code>AttributeError</code>的错误。</p><p>使用<code>__slots__</code>要注意，<code>__slots__</code>定义的属性仅对当前类实例起作用，对继承的子类是不起作用的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">GraduateStudent</span><span class="params">(Student)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g = GraduateStudent()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g.score = <span class="number">9999</span></span><br></pre></td></tr></table></figure><p>除非在子类中也定义<code>__slots__</code>，这样，子类实例允许定义的属性就是自身的<code>__slots__</code>加上父类的<code>__slots__</code>。</p><h2 id="72-使用-property"><a class="markdownIt-Anchor" href="#72-使用-property"></a> 7.2 使用 @property</h2><p>在绑定属性时，如果我们直接把属性暴露出去，虽然写起来很简单，但是，没办法检查参数，导致可以把成绩随便改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = Student()</span><br><span class="line">s.score = <span class="number">9999</span></span><br></pre></td></tr></table></figure><p>这显然不合逻辑。为了限制 score 的范围，可以通过一个<code>set_score()</code>方法来设置成绩，再通过一个<code>get_score()</code>来获取成绩，这样，在<code>set_score()</code>方法里，就可以检查参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_score</span><span class="params">(self)</span>:</span></span><br><span class="line">         <span class="keyword">return</span> self._score</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_score</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, int):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'score must be an integer!'</span>)</span><br><span class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span> <span class="keyword">or</span> value &gt; <span class="number">100</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'score must between 0 ~ 100!'</span>)</span><br><span class="line">        self._score = value</span><br></pre></td></tr></table></figure><p>现在，对任意的 Student 实例进行操作，就不能随心所欲地设置 score 了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.set_score(<span class="number">60</span>) <span class="comment"># ok!</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.get_score()</span><br><span class="line"><span class="number">60</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.set_score(<span class="number">9999</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">ValueError: score must between <span class="number">0</span> ~ <span class="number">100</span>!</span><br></pre></td></tr></table></figure><p>但是，上面的调用方法又略显复杂，没有直接用属性这么直接简单。</p><p>有没有既能检查参数，又可以用类似属性这样简单的方式来访问类的变量呢？对于追求完美的 Python 程序员来说，这是必须要做到的！</p><p>还记得装饰器（decorator）可以给函数动态加上功能吗？对于类的方法，装饰器一样起作用。Python 内置的<code>@property</code>装饰器就是负责把一个方法变成属性调用的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._score</span><br><span class="line"></span><br><span class="line"><span class="meta">    @score.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, int):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'score must be an integer!'</span>)</span><br><span class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span> <span class="keyword">or</span> value &gt; <span class="number">100</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'score must between 0 ~ 100!'</span>)</span><br><span class="line">        self._score = value</span><br></pre></td></tr></table></figure><p><code>@property</code>的实现比较复杂，我们先考察如何使用。把一个 getter 方法变成属性，只需要加上<code>@property</code>就可以了，此时，<code>@property</code>本身又创建了另一个装饰器<code>@score.setter</code>，负责把一个 setter 方法变成属性赋值，于是，我们就拥有一个可控的属性操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.score = <span class="number">60</span> <span class="comment"># OK，实际转化为s.set_score(60)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.score <span class="comment"># OK，实际转化为s.get_score()</span></span><br><span class="line"><span class="number">60</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.score = <span class="number">9999</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">ValueError: score must between <span class="number">0</span> ~ <span class="number">100</span>!</span><br></pre></td></tr></table></figure><p>注意到这个神奇的<code>@property</code>，我们在对实例属性操作的时候，就知道该属性很可能不是直接暴露的，而是通过 getter 和 setter 方法来实现的。</p><p>还可以定义只读属性，只定义 getter 方法，不定义 setter 方法就是一个只读属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">birth</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._birth</span><br><span class="line"></span><br><span class="line"><span class="meta">    @birth.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">birth</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self._birth = value</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2015</span> - self._birth</span><br></pre></td></tr></table></figure><p>上面的<code>birth</code>是可读写属性，而<code>age</code>就是一个只读属性，因为<code>age</code>可以根据<code>birth</code>和当前时间计算出来。</p><blockquote><p>小结：</p></blockquote><p><code>@property</code>广泛应用在类的定义中，可以让调用者写出简短的代码，同时保证对参数进行必要的检查，这样，程序运行时就减少了出错的可能性。</p><blockquote><p>练习：</p></blockquote><p>请利用<code>@property</code>给一个<code>Screen</code>对象加上<code>width</code>和<code>height</code>属性，以及一个只读属性<code>resolution</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Screen</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">width</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self._width</span><br><span class="line"></span><br><span class="line"><span class="meta">    @width.setter</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">width</span><span class="params">(self, value)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, (int, float)):</span><br><span class="line"></span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'width must be an number!'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span> :</span><br><span class="line"></span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'width must &gt; 0'</span>)</span><br><span class="line"></span><br><span class="line">        self._width = value</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">height</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self._height</span><br><span class="line"></span><br><span class="line"><span class="meta">    @height.setter</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">height</span><span class="params">(self, value)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, (int, float)):</span><br><span class="line"></span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'height must be an number!'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span> :</span><br><span class="line"></span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'height must &gt; 0'</span>)</span><br><span class="line"></span><br><span class="line">        self._height = value</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">resolution</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self._height * self._width</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试:</span></span><br><span class="line">s = Screen()</span><br><span class="line">s.width = <span class="number">1024</span></span><br><span class="line">s.height = <span class="number">768</span></span><br><span class="line">print(<span class="string">'resolution ='</span>, s.resolution)</span><br><span class="line"><span class="keyword">if</span> s.resolution == <span class="number">786432</span>:</span><br><span class="line">    print(<span class="string">'测试通过!'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'测试失败!'</span>)</span><br></pre></td></tr></table></figure><h2 id="73-多重继承"><a class="markdownIt-Anchor" href="#73-多重继承"></a> 7.3 多重继承</h2><p>继承是面向对象编程的一个重要的方式，因为通过继承，子类就可以扩展父类的功能。</p><p>回忆一下<code>Animal</code>类层次的设计，假设我们要实现以下 4 种动物：</p><ul><li>Dog - 狗狗；</li><li>Bat - 蝙蝠；</li><li>Parrot - 鹦鹉；</li><li>Ostrich - 鸵鸟。</li></ul><p>如果按照哺乳动物和鸟类归类，我们可以设计出这样的类的层次：</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/wugenqiang/PictureBed/images/01/20200811104931.png" alt="归类" /></p><p>但是如果按照“能跑”和“能飞”来归类，我们就应该设计出这样的类的层次：</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/wugenqiang/wugenqiang.js.org/images/01/20200811105312.png" alt="归类" /></p><p>如果要把上面的两种分类都包含进来，我们就得设计更多的层次：</p><ul><li>哺乳类：能跑的哺乳类，能飞的哺乳类；</li><li>鸟类：能跑的鸟类，能飞的鸟类。</li></ul><p>这么一来，类的层次就复杂了：</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/wugenqiang/wugenqiang.js.org/images/01/20200811111249.png" alt="image-20200811111248510" /></p><p>如果要再增加“宠物类”和“非宠物类”，这么搞下去，类的数量会呈指数增长，很明显这样设计是不行的。</p><p>正确的做法是采用多重继承。首先，主要的类层次仍按照哺乳类和鸟类设计：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 大类:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mammal</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 各种动物:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Mammal)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bat</span><span class="params">(Mammal)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parrot</span><span class="params">(Bird)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ostrich</span><span class="params">(Bird)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>现在，我们要给动物再加上<code>Runnable</code>和<code>Flyable</code>的功能，只需要先定义好<code>Runnable</code>和<code>Flyable</code>的类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Runnable</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Running...'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flyable</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fly</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Flying...'</span>)</span><br></pre></td></tr></table></figure><p>对于需要<code>Runnable</code>功能的动物，就多继承一个<code>Runnable</code>，例如<code>Dog</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Mammal, Runnable)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>对于需要<code>Flyable</code>功能的动物，就多继承一个<code>Flyable</code>，例如<code>Bat</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bat</span><span class="params">(Mammal, Flyable)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>通过多重继承，一个子类就可以同时获得多个父类的所有功能。</p><h3 id="731-mixin"><a class="markdownIt-Anchor" href="#731-mixin"></a> 7.3.1 MixIn</h3><p>在设计类的继承关系时，通常，主线都是单一继承下来的，例如，<code>Ostrich</code>继承自<code>Bird</code>。但是，如果需要“混入”额外的功能，通过多重继承就可以实现，比如，让<code>Ostrich</code>除了继承自<code>Bird</code>外，再同时继承<code>Runnable</code>。这种设计通常称之为 MixIn。</p><p>为了更好地看出继承关系，我们把<code>Runnable</code>和<code>Flyable</code>改为<code>RunnableMixIn</code>和<code>FlyableMixIn</code>。类似的，你还可以定义出肉食动物<code>CarnivorousMixIn</code>和植食动物<code>HerbivoresMixIn</code>，让某个动物同时拥有好几个 MixIn：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Mammal, RunnableMixIn, CarnivorousMixIn)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>MixIn 的目的就是给一个类增加多个功能，这样，在设计类的时候，我们优先考虑通过多重继承来组合多个 MixIn 的功能，而不是设计多层次的复杂的继承关系。</p><p>Python 自带的很多库也使用了 MixIn。举个例子， Python 自带了<code>TCPServer</code>和<code>UDPServer</code>这两类网络服务，而要同时服务多个用户就必须使用多进程或多线程模型，这两种模型由<code>ForkingMixIn</code>和<code>ThreadingMixIn</code>提供。通过组合，我们就可以创造出合适的服务来。</p><p>比如，编写一个多进程模式的 TCP 服务，定义如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTCPServer</span><span class="params">(TCPServer, ForkingMixIn)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>编写一个多线程模式的 UDP 服务，定义如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyUDPServer</span><span class="params">(UDPServer, ThreadingMixIn)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>如果你打算搞一个更先进的协程模型，可以编写一个<code>CoroutineMixIn</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTCPServer</span><span class="params">(TCPServer, CoroutineMixIn)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>这样一来，我们不需要复杂而庞大的继承链，只要选择组合不同的类的功能，就可以快速构造出所需的子类。</p><blockquote><p>小结：</p></blockquote><p>由于 Python 允许使用多重继承，因此，MixIn 就是一种常见的设计。</p><p>只允许单一继承的语言（如 Java）不能使用 MixIn 的设计。</p><h2 id="74-定制类"><a class="markdownIt-Anchor" href="#74-定制类"></a> 7.4 定制类</h2><p>看到类似<code>__slots__</code>这种形如<code>__xxx__</code>的变量或者函数名就要注意，这些在 Python 中是有特殊用途的。</p><p><code>__slots__</code>我们已经知道怎么用了，<code>__len__()</code>方法我们也知道是为了能让 class 作用于<code>len()</code>函数。</p><p>除此之外，Python 的 class 中还有许多这样有特殊用途的函数，可以帮助我们定制类。</p><h3 id="741-__str__"><a class="markdownIt-Anchor" href="#741-__str__"></a> 7.4.1 <code>__str__</code></h3><p>我们先定义一个<code>Student</code>类，打印一个实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.name = name</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(Student(<span class="string">'Michael'</span>))</span><br><span class="line">&lt;__main__.Student object at <span class="number">0x109afb190</span>&gt;</span><br></pre></td></tr></table></figure><p>打印出一堆<code>&lt;__main__.Student object at 0x109afb190&gt;</code>，不好看。</p><p>怎么才能打印得好看呢？只需要定义好<code>__str__()</code>方法，返回一个好看的字符串就可以了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.name = name</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="string">'Student object (name: %s)'</span> % self.name</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(Student(<span class="string">'Michael'</span>))</span><br><span class="line">Student object (name: Michael)</span><br></pre></td></tr></table></figure><p>这样打印出来的实例，不但好看，而且容易看出实例内部重要的数据。</p><p>但是细心的朋友会发现直接敲变量不用<code>print</code>，打印出来的实例还是不好看：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student(<span class="string">'Michael'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&lt;__main__.Student object at <span class="number">0x109afb310</span>&gt;</span><br></pre></td></tr></table></figure><p>这是因为直接显示变量调用的不是<code>__str__()</code>，而是<code>__repr__()</code>，两者的区别是<code>__str__()</code>返回用户看到的字符串，而<code>__repr__()</code>返回程序开发者看到的字符串，也就是说，<code>__repr__()</code>是为调试服务的。</p><p>解决办法是再定义一个<code>__repr__()</code>。但是通常<code>__str__()</code>和<code>__repr__()</code>代码都是一样的，所以，有个偷懒的写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Student object (name=%s)'</span> % self.name</span><br><span class="line">    __repr__ = __str__</span><br></pre></td></tr></table></figure><h3 id="742-__iter__"><a class="markdownIt-Anchor" href="#742-__iter__"></a> 7.4.2 <code>__iter__</code></h3><p>如果一个类想被用于<code>for ... in</code>循环，类似 list 或 tuple 那样，就必须实现一个<code>__iter__()</code>方法，该方法返回一个迭代对象，然后，Python 的 for 循环就会不断调用该迭代对象的<code>__next__()</code>方法拿到循环的下一个值，直到遇到<code>StopIteration</code>错误时退出循环。</p><p>我们以斐波那契数列为例，写一个 Fib 类，可以作用于 for 循环：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.a, self.b = <span class="number">0</span>, <span class="number">1</span> <span class="comment"># 初始化两个计数器a，b</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self <span class="comment"># 实例本身就是迭代对象，故返回自己</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.a, self.b = self.b, self.a + self.b <span class="comment"># 计算下一个值</span></span><br><span class="line">        <span class="keyword">if</span> self.a &gt; <span class="number">100000</span>: <span class="comment"># 退出循环的条件</span></span><br><span class="line">            <span class="keyword">raise</span> StopIteration()</span><br><span class="line">        <span class="keyword">return</span> self.a <span class="comment"># 返回下一个值</span></span><br></pre></td></tr></table></figure><p>现在，试试把 Fib 实例作用于 for 循环：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> Fib():</span><br><span class="line">    print(n)</span><br></pre></td></tr></table></figure><h3 id="743-__getitem__"><a class="markdownIt-Anchor" href="#743-__getitem__"></a> 7.4.3 <code>__getitem__</code></h3><p>Fib实例虽然能作用于 for 循环，看起来和 list 有点像，但是，把它当成 list 来使用还是不行，比如，取第 5 个元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Fib()[<span class="number">5</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">'Fib'</span> object does <span class="keyword">not</span> support indexing</span><br></pre></td></tr></table></figure><p>要表现得像 list 那样按照下标取出元素，需要实现<code>__getitem__()</code>方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        a, b = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(n):</span><br><span class="line">            a, b = b, a + b</span><br><span class="line">        <span class="keyword">return</span> a</span><br></pre></td></tr></table></figure><p>现在，就可以按下标访问数列的任意一项了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = Fib()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f[<span class="number">0</span>]</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f[<span class="number">1</span>]</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f[<span class="number">2</span>]</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f[<span class="number">3</span>]</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f[<span class="number">10</span>]</span><br><span class="line"><span class="number">89</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f[<span class="number">100</span>]</span><br><span class="line"><span class="number">573147844013817084101</span></span><br></pre></td></tr></table></figure><p>但是 list 有个神奇的切片方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(range(<span class="number">100</span>))[<span class="number">5</span>:<span class="number">10</span>]</span><br><span class="line">[<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><p>对于 Fib 却报错。原因是<code>__getitem__()</code>传入的参数可能是一个 int，也可能是一个切片对象<code>slice</code>，所以要做判断：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(n, int): <span class="comment"># n是索引</span></span><br><span class="line">            a, b = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> range(n):</span><br><span class="line">                a, b = b, a + b</span><br><span class="line">            <span class="keyword">return</span> a</span><br><span class="line">        <span class="keyword">if</span> isinstance(n, slice): <span class="comment"># n是切片</span></span><br><span class="line">            start = n.start</span><br><span class="line">            stop = n.stop</span><br><span class="line">            <span class="keyword">if</span> start <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                start = <span class="number">0</span></span><br><span class="line">            a, b = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">            L = []</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> range(stop):</span><br><span class="line">                <span class="keyword">if</span> x &gt;= start:</span><br><span class="line">                    L.append(a)</span><br><span class="line">                a, b = b, a + b</span><br><span class="line">            <span class="keyword">return</span> L</span><br></pre></td></tr></table></figure><p>现在试试 Fib 的切片：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = Fib()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f[<span class="number">0</span>:<span class="number">5</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f[:<span class="number">10</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">34</span>, <span class="number">55</span>]</span><br></pre></td></tr></table></figure><p>但是没有对 step 参数作处理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f[:<span class="number">10</span>:<span class="number">2</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">34</span>, <span class="number">55</span>, <span class="number">89</span>]</span><br></pre></td></tr></table></figure><p>也没有对负数作处理，所以，要正确实现一个<code>__getitem__()</code>还是有很多工作要做的。</p><p>此外，如果把对象看成<code>dict</code>，<code>__getitem__()</code>的参数也可能是一个可以作 key 的 object，例如<code>str</code>。</p><p>与之对应的是<code>__setitem__()</code>方法，把对象视作 list 或 dict 来对集合赋值。最后，还有一个<code>__delitem__()</code>方法，用于删除某个元素。</p><p>总之，通过上面的方法，我们自己定义的类表现得和 Python 自带的 list、tuple、dict 没什么区别，这完全归功于动态语言的“鸭子类型”，不需要强制继承某个接口。</p><h3 id="744-__getattr__"><a class="markdownIt-Anchor" href="#744-__getattr__"></a> 7.4.4 <code>__getattr__</code></h3><p>正常情况下，当我们调用类的方法或属性时，如果不存在，就会报错。比如定义<code>Student</code>类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="string">'Michael'</span></span><br></pre></td></tr></table></figure><p>调用<code>name</code>属性，没问题，但是，调用不存在的<code>score</code>属性，就有问题了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.name)</span><br><span class="line">Michael</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.score)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">AttributeError: <span class="string">'Student'</span> object has no attribute <span class="string">'score'</span></span><br></pre></td></tr></table></figure><p>错误信息很清楚地告诉我们，没有找到<code>score</code>这个 attribute。</p><p>要避免这个错误，除了可以加上一个<code>score</code>属性外，Python 还有另一个机制，那就是写一个<code>__getattr__()</code>方法，动态返回一个属性。修改如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="string">'Michael'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, attr)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> attr==<span class="string">'score'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">99</span></span><br></pre></td></tr></table></figure><p>当调用不存在的属性时，比如<code>score</code>，Python 解释器会试图调用<code>__getattr__(self, 'score')</code>来尝试获得属性，这样，我们就有机会返回<code>score</code>的值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.name</span><br><span class="line"><span class="string">'Michael'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.score</span><br><span class="line"><span class="number">99</span></span><br></pre></td></tr></table></figure><p>返回函数也是完全可以的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, attr)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> attr==<span class="string">'age'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">lambda</span>: <span class="number">25</span></span><br></pre></td></tr></table></figure><p>只是调用方式要变为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.age()</span><br><span class="line"><span class="number">25</span></span><br></pre></td></tr></table></figure><p>注意，只有在没有找到属性的情况下，才调用<code>__getattr__</code>，已有的属性，比如<code>name</code>，不会在<code>__getattr__</code>中查找。</p><p>此外，注意到任意调用如<code>s.abc</code>都会返回<code>None</code>，这是因为我们定义的<code>__getattr__</code>默认返回就是<code>None</code>。要让 class 只响应特定的几个属性，我们就要按照约定，抛出<code>AttributeError</code>的错误：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, attr)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> attr==<span class="string">'age'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">lambda</span>: <span class="number">25</span></span><br><span class="line">        <span class="keyword">raise</span> AttributeError(<span class="string">'\'Student\' object has no attribute \'%s\''</span> % attr)</span><br></pre></td></tr></table></figure><p>这实际上可以把一个类的所有属性和方法调用全部动态化处理了，不需要任何特殊手段。</p><p>这种完全动态调用的特性有什么实际作用呢？作用就是，可以针对完全动态的情况作调用。</p><p>举个例子：</p><p>现在很多网站都搞 REST API，比如新浪微博、豆瓣啥的，调用 API 的 URL 类似：</p><ul><li><a href="http://api.server/user/friends" target="_blank" rel="noopener">http://api.server/user/friends</a></li><li><a href="http://api.server/user/timeline/list" target="_blank" rel="noopener">http://api.server/user/timeline/list</a></li></ul><p>如果要写 SDK，给每个 URL 对应的 API 都写一个方法，那得累死，而且，API 一旦改动，SDK 也要改。</p><p>利用完全动态的<code>__getattr__</code>，我们可以写出一个链式调用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chain</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, path=<span class="string">''</span>)</span>:</span></span><br><span class="line">        self._path = path</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, path)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Chain(<span class="string">'%s/%s'</span> % (self._path, path))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._path</span><br><span class="line"></span><br><span class="line">    __repr__ = __str__</span><br></pre></td></tr></table></figure><p>试试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Chain().status.user.timeline.list</span><br><span class="line"><span class="string">'/status/user/timeline/list'</span></span><br></pre></td></tr></table></figure><p>这样，无论 API 怎么变，SDK 都可以根据 URL 实现完全动态的调用，而且，不随 API 的增加而改变！</p><p>还有些 REST API 会把参数放到 URL 中，比如 GitHub 的 API：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /users/:user/repos</span><br></pre></td></tr></table></figure><p>调用时，需要把<code>:user</code>替换为实际用户名。如果我们能写出这样的链式调用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Chain().users(<span class="string">'michael'</span>).repos</span><br></pre></td></tr></table></figure><p>就可以非常方便地调用 API 了。有兴趣的童鞋可以试试写出来。</p><h3 id="745-__call__"><a class="markdownIt-Anchor" href="#745-__call__"></a> 7.4.5 <code>__call__</code></h3><p>一个对象实例可以有自己的属性和方法，当我们调用实例方法时，我们用<code>instance.method()</code>来调用。能不能直接在实例本身上调用呢？在 Python 中，答案是肯定的。</p><p>任何类，只需要定义一个<code>__call__()</code>方法，就可以直接对实例进行调用。请看示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'My name is %s.'</span> % self.name)</span><br></pre></td></tr></table></figure><p>调用方式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student(<span class="string">'Michael'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s() <span class="comment"># self参数不要传入</span></span><br><span class="line">My name <span class="keyword">is</span> Michael.</span><br></pre></td></tr></table></figure><p><code>__call__()</code>还可以定义参数。对实例进行直接调用就好比对一个函数进行调用一样，所以你完全可以把对象看成函数，把函数看成对象，因为这两者之间本来就没啥根本的区别。</p><p>如果你把对象看成函数，那么函数本身其实也可以在运行期动态创建出来，因为类的实例都是运行期创建出来的，这么一来，我们就模糊了对象和函数的界限。</p><p>那么，怎么判断一个变量是对象还是函数呢？其实，更多的时候，我们需要判断一个对象是否能被调用，能被调用的对象就是一个<code>Callable</code>对象，比如函数和我们上面定义的带有<code>__call__()</code>的类实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>callable(Student())</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>callable(max)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>callable([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>callable(<span class="literal">None</span>)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>callable(<span class="string">'str'</span>)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><p>通过<code>callable()</code>函数，我们就可以判断一个对象是否是“可调用”对象。</p><blockquote><p>小结：</p></blockquote><ul><li>Python 的 class 允许定义许多定制方法，可以让我们非常方便地生成特定的类。</li><li>本节介绍的是最常用的几个定制方法，还有很多可定制的方法，请参考<a href="http://docs.python.org/3/reference/datamodel.html#special-method-names" target="_blank" rel="noopener">Python的官方文档</a>。</li></ul><h2 id="75-使用枚举类"><a class="markdownIt-Anchor" href="#75-使用枚举类"></a> 7.5 使用枚举类</h2><h2 id="76-使用元类"><a class="markdownIt-Anchor" href="#76-使用元类"></a> 7.6 使用元类</h2><h2 id="77-参考资料"><a class="markdownIt-Anchor" href="#77-参考资料"></a> 7.7 参考资料</h2><ul><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017501628721248" target="_blank" rel="noopener">廖雪峰 - Python 3.x - 面向对象高级编程</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python/Python入门学习笔记/CH6-面向对象编程</title>
      <link href="/2020/08/15/Python/Python%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/CH6-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
      <url>/2020/08/15/Python/Python%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/CH6-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="第六章-面向对象编程"><a class="markdownIt-Anchor" href="#第六章-面向对象编程"></a> 第六章 面向对象编程</h1><p>面向对象编程——Object Oriented Programming，简称 OOP，是一种程序设计思想。OOP 把对象作为程序的基本单元，一个对象包含了数据和操作数据的函数。</p><p>面向过程的程序设计把计算机程序视为一系列的命令集合，即一组函数的顺序执行。为了简化程序设计，面向过程把函数继续切分为子函数，即把大块函数通过切割成小块函数来降低系统的复杂度。</p><p>而面向对象的程序设计把计算机程序视为一组对象的集合，而每个对象都可以接收其他对象发过来的消息，并处理这些消息，计算机程序的执行就是一系列消息在各个对象之间传递。</p><p>在 Python 中，所有数据类型都可以视为对象，当然也可以自定义对象。自定义的对象数据类型就是面向对象中的类（Class）的概念。</p><p>我们以一个例子来说明面向过程和面向对象在程序流程上的不同之处。</p><p>假设我们要处理学生的成绩表，为了表示一个学生的成绩，面向过程的程序可以用一个 dict 表示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">std1 = &#123; <span class="string">'name'</span>: <span class="string">'Michael'</span>, <span class="string">'score'</span>: <span class="number">98</span> &#125;</span><br><span class="line">std2 = &#123; <span class="string">'name'</span>: <span class="string">'Bob'</span>, <span class="string">'score'</span>: <span class="number">81</span> &#125;</span><br></pre></td></tr></table></figure><p>而处理学生成绩可以通过函数实现，比如打印学生的成绩：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_score</span><span class="params">(std)</span>:</span></span><br><span class="line">    print(<span class="string">'%s: %s'</span> % (std[<span class="string">'name'</span>], std[<span class="string">'score'</span>]))</span><br></pre></td></tr></table></figure><p>如果采用面向对象的程序设计思想，我们首选思考的不是程序的执行流程，而是<code>Student</code>这种数据类型应该被视为一个对象，这个对象拥有<code>name</code>和<code>score</code>这两个属性（Property）。如果要打印一个学生的成绩，首先必须创建出这个学生对应的对象，然后，给对象发一个<code>print_score</code>消息，让对象自己把自己的数据打印出来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_score</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'%s: %s'</span> % (self.name, self.score))</span><br></pre></td></tr></table></figure><p>给对象发消息实际上就是调用对象对应的关联函数，我们称之为对象的方法（Method）。面向对象的程序写出来就像这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bart = Student(<span class="string">'Bart Simpson'</span>, <span class="number">59</span>)</span><br><span class="line">lisa = Student(<span class="string">'Lisa Simpson'</span>, <span class="number">87</span>)</span><br><span class="line">bart.print_score()</span><br><span class="line">lisa.print_score()</span><br></pre></td></tr></table></figure><p>Class 是一种抽象概念，比如我们定义的 Class——Student，是指学生这个概念，而实例（Instance）则是一个个具体的 Student，比如，Bart Simpson 和 Lisa Simpson 是两个具体的 Student。</p><p>所以，面向对象的设计思想是抽象出 Class，根据 Class 创建 Instance。</p><blockquote><p>面向对象的抽象程度又比函数要高，因为一个Class既包含数据，又包含操作数据的方法。</p></blockquote><h2 id="61-类和实例"><a class="markdownIt-Anchor" href="#61-类和实例"></a> 6.1 类和实例</h2><p>面向对象最重要的概念就是类（Class）和实例（Instance），必须牢记类是抽象的模板，比如 Student 类，而实例是根据类创建出来的一个个具体的“对象”，每个对象都拥有相同的方法，但各自的数据可能不同。</p><p>仍以 Student 类为例，在 Python 中，定义类是通过<code>class</code>关键字：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><code>class</code>后面紧接着是类名，即<code>Student</code>，类名通常是大写开头的单词，紧接着是<code>(object)</code>，表示该类是从哪个类继承下来的，继承的概念我们后面再讲，通常，如果没有合适的继承类，就使用<code>object</code>类，这是所有类最终都会继承的类。</p><p>定义好了<code>Student</code>类，就可以根据<code>Student</code>类创建出<code>Student</code>的实例，创建实例是通过类名+()实现的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bart = Student()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bart</span><br><span class="line">&lt;__main__.Student object at <span class="number">0x10a67a590</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Student</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">Student</span>'&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，变量<code>bart</code>指向的就是一个<code>Student</code>的实例，后面的<code>0x10a67a590</code>是内存地址，每个object的地址都不一样，而<code>Student</code>本身则是一个类。</p><p>可以自由地给一个实例变量绑定属性，比如，给实例<code>bart</code>绑定一个<code>name</code>属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bart.name = <span class="string">'Bart Simpson'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bart.name</span><br><span class="line"><span class="string">'Bart Simpson'</span></span><br></pre></td></tr></table></figure><p>由于类可以起到模板的作用，因此，可以在创建实例的时候，把一些我们认为必须绑定的属性强制填写进去。通过定义一个特殊的<code>__init__</code>方法，在创建实例的时候，就把<code>name</code>，<code>score</code>等属性绑上去：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br></pre></td></tr></table></figure><p>!&gt; 注意：特殊方法“<strong>init</strong>”前后分别有两个下划线！！！</p><p>注意到<code>__init__</code>方法的第一个参数永远是<code>self</code>，表示创建的实例本身，因此，在<code>__init__</code>方法内部，就可以把各种属性绑定到<code>self</code>，因为<code>self</code>就指向创建的实例本身。</p><p>有了<code>__init__</code>方法，在创建实例的时候，就不能传入空的参数了，必须传入与<code>__init__</code>方法匹配的参数，但<code>self</code>不需要传，Python 解释器自己会把实例变量传进去：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bart = Student(<span class="string">'Bart Simpson'</span>, <span class="number">59</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bart.name</span><br><span class="line"><span class="string">'Bart Simpson'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bart.score</span><br><span class="line"><span class="number">59</span></span><br></pre></td></tr></table></figure><p>和普通的函数相比，在类中定义的函数只有一点不同，就是第一个参数永远是实例变量<code>self</code>，并且，调用时，不用传递该参数。除此之外，类的方法和普通函数没有什么区别，所以，你仍然可以用默认参数、可变参数、关键字参数和命名关键字参数。</p><h3 id="611-数据封装"><a class="markdownIt-Anchor" href="#611-数据封装"></a> 6.1.1 数据封装</h3><p>面向对象编程的一个重要特点就是数据封装。在上面的<code>Student</code>类中，每个实例就拥有各自的<code>name</code>和<code>score</code>这些数据。我们可以通过函数来访问这些数据，比如打印一个学生的成绩：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_score</span><span class="params">(std)</span>:</span></span><br><span class="line">    print(<span class="string">'%s: %s'</span> % (std.name, std.score))</span><br><span class="line"></span><br><span class="line">print_score(bart)</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200722215133.png" alt="image-20200722215132081" /></p><p>但是，既然<code>Student</code>实例本身就拥有这些数据，要访问这些数据，就没有必要从外面的函数去访问，可以直接在<code>Student</code>类的内部定义访问数据的函数，这样，就把“数据”给封装起来了。这些封装数据的函数是和<code>Student</code>类本身是关联起来的，我们称之为类的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_score</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'%s: %s'</span> % (self.name, self.score))</span><br></pre></td></tr></table></figure><p>要定义一个方法，除了第一个参数是<code>self</code>外，其他和普通函数一样。要调用一个方法，只需要在实例变量上直接调用，除了<code>self</code>不用传递，其他参数正常传入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bart = Student(<span class="string">'Bart Simpson'</span>, <span class="number">59</span>)</span><br><span class="line">bart.print_score() <span class="comment"># Bart Simpson: 59</span></span><br></pre></td></tr></table></figure><p>这样一来，我们从外部看<code>Student</code>类，就只需要知道，创建实例需要给出<code>name</code>和<code>score</code>，而如何打印，都是在<code>Student</code>类的内部定义的，这些数据和逻辑被“封装”起来了，调用很容易，但却不用知道内部实现的细节。</p><p>封装的另一个好处是可以给<code>Student</code>类增加新的方法，比如<code>get_grade</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_grade</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.score &gt;= <span class="number">90</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'A'</span></span><br><span class="line">        <span class="keyword">elif</span> self.score &gt;= <span class="number">60</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'B'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'C'</span></span><br></pre></td></tr></table></figure><p>同样的，<code>get_grade</code>方法可以直接在实例变量上调用，不需要知道内部实现细节：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_grade</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.score &gt;= <span class="number">90</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'A'</span></span><br><span class="line">        <span class="keyword">elif</span> self.score &gt;= <span class="number">60</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'B'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'C'</span></span><br><span class="line">lisa = Student(<span class="string">'Lisa'</span>, <span class="number">99</span>)</span><br><span class="line">bart = Student(<span class="string">'Bart'</span>, <span class="number">59</span>)</span><br><span class="line">print(lisa.name, lisa.get_grade()) <span class="comment"># Lisa A</span></span><br><span class="line">print(bart.name, bart.get_grade()) <span class="comment"># Bart C</span></span><br></pre></td></tr></table></figure><blockquote><p>小结：</p></blockquote><p>类是创建实例的模板，而实例则是一个一个具体的对象，各个实例拥有的数据都互相独立，互不影响；</p><p>方法就是与实例绑定的函数，和普通函数不同，方法可以直接访问实例的数据；</p><p>通过在实例上调用方法，我们就直接操作了对象内部的数据，但无需知道方法内部的实现细节。</p><p>和静态语言不同，Python 允许对实例变量绑定任何数据，也就是说，对于两个实例变量，虽然它们都是同一个类的不同实例，但拥有的变量名称都可能不同：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bart = Student(<span class="string">'Bart Simpson'</span>, <span class="number">59</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lisa = Student(<span class="string">'Lisa Simpson'</span>, <span class="number">87</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bart.age = <span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bart.age</span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lisa.age</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">'Student'</span> object has no attribute <span class="string">'age'</span></span><br></pre></td></tr></table></figure><h2 id="62-访问限制"><a class="markdownIt-Anchor" href="#62-访问限制"></a> 6.2 访问限制</h2><p>在 Class 内部，可以有<code>属性</code>和<code>方法</code>，而外部代码可以通过直接调用实例变量的方法来操作数据，这样，就隐藏了内部的复杂逻辑。</p><p>但是，从前面 Student 类的定义来看，外部代码还是可以自由地修改一个实例的<code>name</code>、<code>score</code>属性：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200805092809.png" alt="image-20200805092746185" /></p><p>如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线<code>__</code>，在 Python 中，实例的变量名如果以<code>__</code>开头，就变成了一个私有变量（private），只有内部可以访问，外部不能访问，所以，我们把 Student 类改一改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__score = score</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_score</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'%s: %s'</span> % (self.__name, self.__score))</span><br></pre></td></tr></table></figure><p>改完后，对于外部代码来说，没什么变动，但是已经无法从外部访问<code>实例变量.__name</code>和<code>实例变量.__score</code>了：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200805093720.png" alt="image-20200805093718866" /></p><p>这样就确保了外部代码不能随意修改对象内部的状态，这样通过访问限制的保护，代码更加健壮。</p><p>但是如果外部代码要获取 name 和 score 怎么办？可以给 Student 类增加<code>get_name</code>和<code>get_score</code>这样的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_score</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__score</span><br></pre></td></tr></table></figure><p>如果又要允许外部代码修改 score 怎么办？可以再给 Student 类增加<code>set_score</code>方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_score</span><span class="params">(self, score)</span>:</span></span><br><span class="line">        self.__score = score</span><br></pre></td></tr></table></figure><p>你也许会问，原先那种直接通过<code>bart.score = 99</code>也可以修改啊，为什么要定义一个方法大费周折？因为在方法中，可以对参数做检查，避免传入无效的参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_score</span><span class="params">(self, score)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= score &lt;= <span class="number">100</span>:</span><br><span class="line">            self.__score = score</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'bad score'</span>)</span><br></pre></td></tr></table></figure><p>需要注意的是，在 Python 中，变量名类似<code>__xxx__</code>的，也就是以双下划线开头，并且以双下划线结尾的，是特殊变量，特殊变量是可以直接访问的，不是 private 变量，所以，不能用<code>__name__</code>、<code>__score__</code>这样的变量名。</p><p>有些时候，你会看到以一个下划线开头的实例变量名，比如<code>_name</code>，这样的实例变量外部是可以访问的，但是，按照约定俗成的规定，当你看到这样的变量时，意思就是，“虽然我可以被访问，但是，请把我视为私有变量，不要随意访问”。</p><p>双下划线开头的实例变量是不是一定不能从外部访问呢？其实也不是。不能直接访问<code>__name</code>是因为 Python 解释器对外把<code>__name</code>变量改成了<code>_Student__name</code>，所以，仍然可以通过<code>_Student__name</code>来访问<code>__name</code>变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bart._Student__name</span><br><span class="line"><span class="string">'Bart Simpson'</span></span><br></pre></td></tr></table></figure><p>但是强烈建议你不要这么干，因为不同版本的 Python 解释器可能会把<code>__name</code>改成不同的变量名。</p><p>总的来说就是，Python 本身没有任何机制阻止你干坏事，一切全靠自觉。</p><p>最后注意下面的这种<strong>错误写法</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bart = Student(<span class="string">'Bart Simpson'</span>, <span class="number">59</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bart.get_name()</span><br><span class="line"><span class="string">'Bart Simpson'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bart.__name = <span class="string">'New Name'</span> <span class="comment"># 设置__name变量！</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bart.__name</span><br><span class="line"><span class="string">'New Name'</span></span><br></pre></td></tr></table></figure><p>表面上看，外部代码“成功”地设置了<code>__name</code>变量，但实际上这个<code>__name</code>变量和 class 内部的<code>__name</code>变量不是一个变量！内部的<code>__name</code>变量已经被 Python 解释器自动改成了<code>_Student__name</code>，而外部代码给<code>bart</code>新增了一个<code>__name</code>变量。不信试试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bart.get_name() <span class="comment"># get_name()内部返回self.__name</span></span><br><span class="line"><span class="string">'Bart Simpson'</span></span><br></pre></td></tr></table></figure><h2 id="63-继承和多态"><a class="markdownIt-Anchor" href="#63-继承和多态"></a> 6.3 继承和多态</h2><p>在 OOP 程序设计中，当我们定义一个 class 的时候，可以从某个现有的 class 继承，新的 class 称为子类（Subclass），而被继承的 class 称为基类、父类或超类（Base class、Super class）。</p><p>比如，我们已经编写了一个名为<code>Animal</code>的 class，有一个<code>run()</code>方法可以直接打印：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Animal is running...'</span>)</span><br></pre></td></tr></table></figure><p>当我们需要编写<code>Dog</code>和<code>Cat</code>类时，就可以直接从<code>Animal</code>类继承：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>对于<code>Dog</code>来说，<code>Animal</code>就是它的父类，对于<code>Animal</code>来说，<code>Dog</code>就是它的子类。<code>Cat</code>和<code>Dog</code>类似。</p><p>继承有什么好处？最大的好处是子类获得了父类的全部功能。由于<code>Animial</code>实现了<code>run()</code>方法，因此，<code>Dog</code>和<code>Cat</code>作为它的子类，什么事也没干，就自动拥有了<code>run()</code>方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dog = Dog()</span><br><span class="line">dog.run()</span><br><span class="line"></span><br><span class="line">cat = Cat()</span><br><span class="line">cat.run()</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Animal <span class="keyword">is</span> running...</span><br><span class="line">Animal <span class="keyword">is</span> running...</span><br></pre></td></tr></table></figure><p>当然，也可以对子类增加一些方法，比如 Dog 类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Dog is running...'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Eating meat...'</span>)</span><br></pre></td></tr></table></figure><p>继承的第二个好处需要我们对代码做一点改进。你看到了，无论是<code>Dog</code>还是<code>Cat</code>，它们<code>run()</code>的时候，显示的都是<code>Animal is running...</code>，符合逻辑的做法是分别显示<code>Dog is running...</code>和<code>Cat is running...</code>，因此，对<code>Dog</code>和<code>Cat</code>类改进如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Dog is running...'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Animal)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Cat is running...'</span>)</span><br></pre></td></tr></table></figure><p>再次运行，结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Dog <span class="keyword">is</span> running...</span><br><span class="line">Cat <span class="keyword">is</span> running...</span><br></pre></td></tr></table></figure><p>当子类和父类都存在相同的<code>run()</code>方法时，我们说，子类的<code>run()</code>覆盖了父类的<code>run()</code>，在代码运行的时候，总是会调用子类的<code>run()</code>。这样，我们就获得了继承的另一个好处：多态。</p><p>要理解什么是多态，我们首先要对数据类型再作一点说明。当我们定义一个 class 的时候，我们实际上就定义了一种数据类型。我们定义的数据类型和 Python 自带的数据类型，比如 str、list、dict 没什么两样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = list() <span class="comment"># a是list类型</span></span><br><span class="line">b = Animal() <span class="comment"># b是Animal类型</span></span><br><span class="line">c = Dog() <span class="comment"># c是Dog类型</span></span><br></pre></td></tr></table></figure><p>判断一个变量是否是某个类型可以用<code>isinstance()</code>判断：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(a, list)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(b, Animal)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(c, Dog)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>看来<code>a</code>、<code>b</code>、<code>c</code>确实对应着<code>list</code>、<code>Animal</code>、<code>Dog</code>这 3 种类型。</p><p>但是等等，试试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(c, Animal)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>看来<code>c</code>不仅仅是<code>Dog</code>，<code>c</code>还是<code>Animal</code>！</p><p>不过仔细想想，这是有道理的，因为<code>Dog</code>是从<code>Animal</code>继承下来的，当我们创建了一个<code>Dog</code>的实例<code>c</code>时，我们认为<code>c</code>的数据类型是<code>Dog</code>没错，但<code>c</code>同时也是<code>Animal</code>也没错，<code>Dog</code>本来就是<code>Animal</code>的一种！</p><p>所以，在继承关系中，如果一个实例的数据类型是某个子类，那它的数据类型也可以被看做是父类。但是，反过来就不行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = Animal()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(b, Dog)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><p><code>Dog</code>可以看成<code>Animal</code>，但<code>Animal</code>不可以看成<code>Dog</code>。</p><p>要理解多态的好处，我们还需要再编写一个函数，这个函数接受一个<code>Animal</code>类型的变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_twice</span><span class="params">(animal)</span>:</span></span><br><span class="line">    animal.run()</span><br><span class="line">    animal.run()</span><br></pre></td></tr></table></figure><p>当我们传入<code>Animal</code>的实例时，<code>run_twice()</code>就打印出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>run_twice(Animal())</span><br><span class="line">Animal <span class="keyword">is</span> running...</span><br><span class="line">Animal <span class="keyword">is</span> running...</span><br></pre></td></tr></table></figure><p>当我们传入<code>Dog</code>的实例时，<code>run_twice()</code>就打印出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>run_twice(Dog())</span><br><span class="line">Dog <span class="keyword">is</span> running...</span><br><span class="line">Dog <span class="keyword">is</span> running...</span><br></pre></td></tr></table></figure><p>当我们传入<code>Cat</code>的实例时，<code>run_twice()</code>就打印出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>run_twice(Cat())</span><br><span class="line">Cat <span class="keyword">is</span> running...</span><br><span class="line">Cat <span class="keyword">is</span> running...</span><br></pre></td></tr></table></figure><p>看上去没啥意思，但是仔细想想，现在，如果我们再定义一个<code>Tortoise</code>类型，也从<code>Animal</code>派生：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tortoise</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Tortoise is running slowly...'</span>)</span><br></pre></td></tr></table></figure><p>当我们调用<code>run_twice()</code>时，传入<code>Tortoise</code>的实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>run_twice(Tortoise())</span><br><span class="line">Tortoise <span class="keyword">is</span> running slowly...</span><br><span class="line">Tortoise <span class="keyword">is</span> running slowly...</span><br></pre></td></tr></table></figure><p>你会发现，新增一个<code>Animal</code>的子类，不必对<code>run_twice()</code>做任何修改，实际上，任何依赖<code>Animal</code>作为参数的函数或者方法都可以不加修改地正常运行，原因就在于多态。</p><p>多态的好处就是，当我们需要传入<code>Dog</code>、<code>Cat</code>、<code>Tortoise</code>……时，我们只需要接收<code>Animal</code>类型就可以了，因为<code>Dog</code>、<code>Cat</code>、<code>Tortoise</code>……都是<code>Animal</code>类型，然后，按照<code>Animal</code>类型进行操作即可。由于<code>Animal</code>类型有<code>run()</code>方法，因此，传入的任意类型，只要是<code>Animal</code>类或者子类，就会自动调用实际类型的<code>run()</code>方法，这就是多态的意思：</p><p>对于一个变量，我们只需要知道它是<code>Animal</code>类型，无需确切地知道它的子类型，就可以放心地调用<code>run()</code>方法，而具体调用的<code>run()</code>方法是作用在<code>Animal</code>、<code>Dog</code>、<code>Cat</code>还是<code>Tortoise</code>对象上，由运行时该对象的确切类型决定，这就是多态真正的威力：调用方只管调用，不管细节，而当我们新增一种<code>Animal</code>的子类时，只要确保<code>run()</code>方法编写正确，不用管原来的代码是如何调用的。这就是著名的“开闭”原则：</p><ul><li>对扩展开放：允许新增<code>Animal</code>子类；</li><li>对修改封闭：不需要修改依赖<code>Animal</code>类型的<code>run_twice()</code>等函数。</li></ul><p>继承还可以一级一级地继承下来，就好比从爷爷到爸爸、再到儿子这样的关系。而任何类，最终都可以追溯到根类 object，这些继承关系看上去就像一颗倒着的树。比如如下的继承树：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200805114618.png" alt="image-20200805114617811" /></p><h3 id="631-静态语言-vs-动态语言"><a class="markdownIt-Anchor" href="#631-静态语言-vs-动态语言"></a> 6.3.1 静态语言 vs 动态语言</h3><p>对于静态语言（例如 Java ）来说，如果需要传入<code>Animal</code>类型，则传入的对象必须是<code>Animal</code>类型或者它的子类，否则，将无法调用<code>run()</code>方法。</p><p>对于 Python 这样的动态语言来说，则不一定需要传入<code>Animal</code>类型。我们只需要保证传入的对象有一个<code>run()</code>方法就可以了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Timer</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Start...'</span>)</span><br></pre></td></tr></table></figure><p>这就是动态语言的“鸭子类型”，它并不要求严格的继承体系，一个对象只要“看起来像鸭子，走起路来像鸭子”，那它就可以被看做是鸭子。</p><p>Python 的“file-like object“就是一种鸭子类型。对真正的文件对象，它有一个<code>read()</code>方法，返回其内容。但是，许多对象，只要有<code>read()</code>方法，都被视为“file-like object“。许多函数接收的参数就是“file-like object“，你不一定要传入真正的文件对象，完全可以传入任何实现了<code>read()</code>方法的对象。</p><blockquote><p>小结：</p></blockquote><ul><li>继承可以把父类的所有功能都直接拿过来，这样就不必重零做起，子类只需要新增自己特有的方法，也可以把父类不适合的方法覆盖重写。</li><li>动态语言的鸭子类型特点决定了继承不像静态语言那样是必须的。</li></ul><h2 id="64-获取对象信息"><a class="markdownIt-Anchor" href="#64-获取对象信息"></a> 6.4 获取对象信息</h2><p>当我们拿到一个对象的引用时，如何知道这个对象是什么类型、有哪些方法呢？</p><h3 id="641-使用-type"><a class="markdownIt-Anchor" href="#641-使用-type"></a> 6.4.1 使用 type()</h3><p>首先，我们来判断对象类型，使用<code>type()</code>函数：</p><p>基本类型都可以用<code>type()</code>判断：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(<span class="number">123</span>)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">(<span class="string">'str'</span>)</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">str</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">(None)</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">type</span><span class="params">(None)</span> '<span class="title">NoneType</span>'&gt;</span></span><br></pre></td></tr></table></figure><p>如果一个变量指向函数或者类，也可以用<code>type()</code>判断：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(abs)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">builtin_function_or_method</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">(a)</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">__main__</span>.<span class="title">Animal</span>'&gt;</span></span><br></pre></td></tr></table></figure><p>但是<code>type()</code>函数返回的是什么类型呢？它返回对应的 Class 类型。如果我们要在<code>if</code>语句中判断，就需要比较两个变量的 type 类型是否相同：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(<span class="number">123</span>)==type(<span class="number">456</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(<span class="number">123</span>)==int</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(<span class="string">'abc'</span>)==type(<span class="string">'123'</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(<span class="string">'abc'</span>)==str</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(<span class="string">'abc'</span>)==type(<span class="number">123</span>)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><p>判断基本数据类型可以直接写<code>int</code>，<code>str</code>等，但如果要判断一个对象是否是函数怎么办？可以使用<code>types</code>模块中定义的常量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> types</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(fn)==types.FunctionType</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(abs)==types.BuiltinFunctionType</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(<span class="keyword">lambda</span> x: x)==types.LambdaType</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type((x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)))==types.GeneratorType</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="642-使用-isinstance"><a class="markdownIt-Anchor" href="#642-使用-isinstance"></a> 6.4.2 使用 isinstance()</h3><p>对于 class 的继承关系来说，使用<code>type()</code>就很不方便。我们要判断 class 的类型，可以使用<code>isinstance()</code>函数。</p><p>我们回顾上次的例子，如果继承关系是：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object -&gt; Animal -&gt; Dog -&gt; Husky</span><br></pre></td></tr></table></figure><p>那么，<code>isinstance()</code>就可以告诉我们，一个对象是否是某种类型。先创建 3 种类型的对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = Animal()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = Dog()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>h = Husky()</span><br></pre></td></tr></table></figure><p>然后，判断：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(h, Husky)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>没有问题，因为<code>h</code>变量指向的就是 Husky 对象。</p><p>再判断：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(h, Dog)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p><code>h</code>虽然自身是 Husky 类型，但由于 Husky 是从 Dog 继承下来的，所以，<code>h</code>也还是 Dog 类型。换句话说，<code>isinstance()</code>判断的是一个对象是否是该类型本身，或者位于该类型的父继承链上。</p><p>因此，我们可以确信，<code>h</code>还是 Animal 类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(h, Animal)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>同理，实际类型是 Dog 的<code>d</code>也是 Animal 类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(d, Dog) <span class="keyword">and</span> isinstance(d, Animal)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>但是，<code>d</code>不是 Husky 类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(d, Husky)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><p>能用<code>type()</code>判断的基本类型也可以用<code>isinstance()</code>判断：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="string">'a'</span>, str)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="number">123</span>, int)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="string">b'a'</span>, bytes)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>并且还可以判断一个变量是否是某些类型中的一种，比如下面的代码就可以判断是否是 list 或者 tuple</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], (list, tuple))</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (list, tuple))</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><blockquote><p>总是优先使用 isinstance() 判断类型，可以将指定类型及其子类“一网打尽”。</p></blockquote><h3 id="643-使用-dir"><a class="markdownIt-Anchor" href="#643-使用-dir"></a> 6.4.3 使用 dir()</h3><p>如果要获得一个对象的所有属性和方法，可以使用<code>dir()</code>函数，它返回一个包含字符串的 list，比如，获得一个 str 对象的所有属性和方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir(<span class="string">'ABC'</span>)</span><br><span class="line">[<span class="string">'__add__'</span>, <span class="string">'__class__'</span>,..., <span class="string">'__subclasshook__'</span>, <span class="string">'capitalize'</span>, <span class="string">'casefold'</span>,..., <span class="string">'zfill'</span>]</span><br></pre></td></tr></table></figure><p>类似<code>__xxx__</code>的属性和方法在 Python 中都是有特殊用途的，比如<code>__len__</code>方法返回长度。在 Python 中，如果你调用<code>len()</code>函数试图获取一个对象的长度，实际上，在<code>len()</code>函数内部，它自动去调用该对象的<code>__len__()</code>方法，所以，下面的代码是等价的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(<span class="string">'ABC'</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'ABC'</span>.__len__()</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>我们自己写的类，如果也想用<code>len(myObj)</code>的话，就自己写一个<code>__len__()</code>方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">MyDog</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="number">100</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dog = MyDog()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(dog)</span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure><p>剩下的都是普通属性或方法，比如<code>lower()</code>返回小写的字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'ABC'</span>.lower()</span><br><span class="line"><span class="string">'abc'</span></span><br></pre></td></tr></table></figure><p>仅仅把属性和方法列出来是不够的，配合<code>getattr()</code>、<code>setattr()</code>以及<code>hasattr()</code>，我们可以直接操作一个对象的状态：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">MyObject</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.x = <span class="number">9</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> self.x * self.x</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = MyObject()</span><br></pre></td></tr></table></figure><p>紧接着，可以测试该对象的属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>hasattr(obj, <span class="string">'x'</span>) <span class="comment"># 有属性'x'吗？</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.x</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hasattr(obj, <span class="string">'y'</span>) <span class="comment"># 有属性'y'吗？</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setattr(obj, <span class="string">'y'</span>, <span class="number">19</span>) <span class="comment"># 设置一个属性'y'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hasattr(obj, <span class="string">'y'</span>) <span class="comment"># 有属性'y'吗？</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(obj, <span class="string">'y'</span>) <span class="comment"># 获取属性'y'</span></span><br><span class="line"><span class="number">19</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.y <span class="comment"># 获取属性'y'</span></span><br><span class="line"><span class="number">19</span></span><br></pre></td></tr></table></figure><p>如果试图获取不存在的属性，会抛出 AttributeError 的错误：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(obj, <span class="string">'z'</span>) <span class="comment"># 获取属性'z'</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">'MyObject'</span> object has no attribute <span class="string">'z'</span></span><br></pre></td></tr></table></figure><p>可以传入一个 default 参数，如果属性不存在，就返回默认值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(obj, <span class="string">'z'</span>, <span class="number">404</span>) <span class="comment"># 获取属性'z'，如果不存在，返回默认值404</span></span><br><span class="line"><span class="number">404</span></span><br></pre></td></tr></table></figure><p>也可以获得对象的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>hasattr(obj, <span class="string">'power'</span>) <span class="comment"># 有属性'power'吗？</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(obj, <span class="string">'power'</span>) <span class="comment"># 获取属性'power'</span></span><br><span class="line">&lt;bound method MyObject.power of &lt;__main__.MyObject object at <span class="number">0x10077a6a0</span>&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fn = getattr(obj, <span class="string">'power'</span>) <span class="comment"># 获取属性'power'并赋值到变量fn</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fn <span class="comment"># fn指向obj.power</span></span><br><span class="line">&lt;bound method MyObject.power of &lt;__main__.MyObject object at <span class="number">0x10077a6a0</span>&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fn() <span class="comment"># 调用fn()与调用obj.power()是一样的</span></span><br><span class="line"><span class="number">81</span></span><br></pre></td></tr></table></figure><blockquote><p>小结</p></blockquote><p>通过内置的一系列函数，我们可以对任意一个 Python 对象进行剖析，拿到其内部的数据。要注意的是，只有在不知道对象信息的时候，我们才会去获取对象信息。如果可以直接写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum = obj.x + obj.y</span><br></pre></td></tr></table></figure><p>就不要写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum = getattr(obj, <span class="string">'x'</span>) + getattr(obj, <span class="string">'y'</span>)</span><br></pre></td></tr></table></figure><p>一个正确的用法的例子如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readImage</span><span class="params">(fp)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> hasattr(fp, <span class="string">'read'</span>):</span><br><span class="line">        <span class="keyword">return</span> readData(fp)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>假设我们希望从文件流 fp 中读取图像，我们首先要判断该 fp 对象是否存在 read 方法，如果存在，则该对象是一个流，如果不存在，则无法读取。<code>hasattr()</code>就派上了用场。</p><p>请注意，在 Python 这类动态语言中，根据鸭子类型，有<code>read()</code>方法，不代表该 fp 对象就是一个文件流，它也可能是网络流，也可能是内存中的一个字节流，但只要<code>read()</code>方法返回的是有效的图像数据，就不影响读取图像的功能。</p><h2 id="65-实例属性和类属性"><a class="markdownIt-Anchor" href="#65-实例属性和类属性"></a> 6.5 实例属性和类属性</h2><p>由于 Python 是动态语言，根据类创建的实例可以任意绑定属性。</p><p>给实例绑定属性的方法是通过实例变量，或者通过<code>self</code>变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">s = Student(<span class="string">'Bob'</span>)</span><br><span class="line">s.score = <span class="number">90</span></span><br></pre></td></tr></table></figure><p>但是，如果<code>Student</code>类本身需要绑定一个属性呢？可以直接在 class 中定义属性，这种属性是类属性，归<code>Student</code>类所有：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    name = <span class="string">'Student'</span></span><br></pre></td></tr></table></figure><p>当我们定义了一个类属性后，这个属性虽然归类所有，但类的所有实例都可以访问到。来测试一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">... </span>    name = <span class="string">'Student'</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student() <span class="comment"># 创建实例s</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.name) <span class="comment"># 打印name属性，因为实例并没有name属性，所以会继续查找class的name属性</span></span><br><span class="line">Student</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(Student.name) <span class="comment"># 打印类的name属性</span></span><br><span class="line">Student</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.name = <span class="string">'Michael'</span> <span class="comment"># 给实例绑定name属性</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.name) <span class="comment"># 由于实例属性优先级比类属性高，因此，它会屏蔽掉类的name属性</span></span><br><span class="line">Michael</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(Student.name) <span class="comment"># 但是类属性并未消失，用Student.name仍然可以访问</span></span><br><span class="line">Student</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> s.name <span class="comment"># 如果删除实例的name属性</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.name) <span class="comment"># 再次调用s.name，由于实例的name属性没有找到，类的name属性就显示出来了</span></span><br><span class="line">Student</span><br></pre></td></tr></table></figure><p>从上面的例子可以看出，在编写程序的时候，千万不要对实例属性和类属性使用相同的名字，因为相同名称的实例属性将屏蔽掉类属性，但是当你删除实例属性后，再使用相同的名称，访问到的将是类属性。</p><blockquote><p>小结：</p></blockquote><ul><li>实例属性属于各个实例所有，互不干扰；</li><li>类属性属于类所有，所有实例共享一个属性；</li><li>不要对实例属性和类属性使用相同的名字，否则将产生难以发现的错误。</li></ul><blockquote><p>练习：</p></blockquote><p>为了统计学生人数，可以给 Student 类增加一个类属性，每创建一个实例，该属性自动增加：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.__name = name</span><br><span class="line">        Student.count += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试:</span></span><br><span class="line"><span class="keyword">if</span> Student.count != <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">'测试失败!'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    bart = Student(<span class="string">'Bart'</span>)</span><br><span class="line">    <span class="keyword">if</span> Student.count != <span class="number">1</span>:</span><br><span class="line">        print(<span class="string">'测试失败!'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        lisa = Student(<span class="string">'Bart'</span>)</span><br><span class="line">        <span class="keyword">if</span> Student.count != <span class="number">2</span>:</span><br><span class="line">            print(<span class="string">'测试失败!'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'Students:'</span>, Student.count)</span><br><span class="line">            print(<span class="string">'测试通过!'</span>)</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/wugenqiang/wugenqiang.js.org/images/01/20200809084431.png" alt="image-20200809084430141" /></p><h2 id="66-参考资料"><a class="markdownIt-Anchor" href="#66-参考资料"></a> 6.6 参考资料</h2><ul><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017495723838528" target="_blank" rel="noopener">廖雪峰 - Python 3.x - 面向对象编程</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python/Python入门学习笔记/CH3-高级特性</title>
      <link href="/2020/08/15/Python/Python%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/CH3-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/"/>
      <url>/2020/08/15/Python/Python%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/CH3-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="第三章-高级特性"><a class="markdownIt-Anchor" href="#第三章-高级特性"></a> 第三章 高级特性</h1><p>掌握了 Python 的数据类型、语句和函数，基本上就可以编写出很多有用的程序了。</p><p>比如构造一个<code>1, 3, 5, 7, ..., 99</code>的列表，可以通过循环实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">L = []</span><br><span class="line">n = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> n &lt;= <span class="number">99</span>:</span><br><span class="line">    L.append(n)</span><br><span class="line">    n = n + <span class="number">2</span></span><br><span class="line">print(L)</span><br></pre></td></tr></table></figure><p>🔍 使用<strong>列表生成式</strong>，来解决这个问题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>,<span class="number">2</span>)]</span><br><span class="line">print(list)</span><br></pre></td></tr></table></figure><p>取 list 的前一半的元素，也可以通过循环实现。</p><p>但是在 Python 中，代码不是越多越好，而是越少越好。代码不是越复杂越好，而是越简单越好。</p><p>基于这一思想，我们来介绍 Python 中非常有用的高级特性，**1 行代码能实现的功能，决不写 5 行代码。**请始终牢记，代码越少，开发效率越高。</p><h2 id="31-切片"><a class="markdownIt-Anchor" href="#31-切片"></a> 3.1 切片</h2><h3 id="311-list-切片"><a class="markdownIt-Anchor" href="#311-list-切片"></a> 3.1.1 list 切片</h3><p>取一个 list 或 tuple 的部分元素是非常常见的操作。比如，一个 list 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="string">'Michael'</span>, <span class="string">'Sarah'</span>, <span class="string">'Tracy'</span>, <span class="string">'Bob'</span>, <span class="string">'Jack'</span>]</span><br></pre></td></tr></table></figure><p>取前 3 个元素，应该怎么做？</p><p>可能会像这样解决：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[L[<span class="number">0</span>],L[<span class="number">1</span>],L[<span class="number">2</span>]]</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200712160939.png" alt="image-20200712160938388" /></p><p>但是，如果是取前 N 个元素就没辙了。</p><p>🎍 取前 N 个元素，也就是索引为 0-(N-1) 的元素，可以用循环：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">r = []</span><br><span class="line">n = <span class="number">3</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    r.append(L[i])</span><br><span class="line">r</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200712214350.png" alt="image-20200712214348838" /></p><p>对这种经常取指定索引范围的操作，用循环十分繁琐，因此，Python 提供了切片（Slice）操作符，能大大简化这种操作。</p><p>对应上面的问题，取前 3 个元素，用一行代码就可以完成切片：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L[<span class="number">0</span>:<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200712214633.png" alt="image-20200712214632198" /></p><p><code>L[0:3]</code>表示，从索引<code>0</code>开始取，直到索引<code>3</code>为止，但不包括索引<code>3</code>。即索引<code>0</code>，<code>1</code>，<code>2</code>，正好是 3 个元素。</p><p>如果第一个索引是<code>0</code>，还可以省略：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L[:<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>也可以从索引 1 开始，取出 2 个元素出来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L[<span class="number">1</span>:<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>类似的，既然 Python 支持<code>L[-1]</code>取倒数第一个元素，那么它同样支持倒数切片，试试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L[<span class="number">-2</span>:]</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200712220307.png" alt="image-20200712220306806" /></p><p>记住倒数第一个元素的索引是<code>-1</code>。</p><p>⭐ 切片格式：<strong>[开头：结束：步长]</strong></p><ul><li><p><strong>开头</strong>：当步长 &gt;0 时，开头不写默认 0，即从第一位开始切片</p><p>当步长 &lt; 0时，开头不写默认 -1 ，即从最后一位开始倒着切片</p></li><li><p><strong>结束</strong>：当步长 &gt; 0 时，结束不写默认为列表长度加一，即切片到最后一位结束</p><p>当步长 &lt; 0 时，结束不写默认为负的列表长度减一，即倒着切片到第一位结束</p></li><li><p><strong>步长：默认为1，&gt; 0 是从左往右走，&lt; 0 是从右往左走</strong></p></li></ul><p>💬 切片操作十分有用。我们先创建一个 0 - 99 的数列：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">L = list(range(<span class="number">100</span>))</span><br><span class="line">L</span><br></pre></td></tr></table></figure><p>可以通过切片轻松取出某一段数列。比如前 10 个数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L[:<span class="number">10</span>]</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200712220548.png" alt="image-20200712220546937" /></p><p>后 10 个数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L[<span class="number">-10</span>:]</span><br></pre></td></tr></table></figure><p>前 11 - 20 个数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L[<span class="number">10</span>:<span class="number">20</span>]</span><br></pre></td></tr></table></figure><p>前 10 个数，每两个取一个：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L[:<span class="number">10</span>:<span class="number">2</span>]</span><br></pre></td></tr></table></figure><p>所有数，每 5 个取一个：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L[::<span class="number">5</span>]</span><br></pre></td></tr></table></figure><p>甚至什么都不写，只写<code>[:]</code>就可以原样复制一个 list：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L[:]</span><br></pre></td></tr></table></figure><h3 id="312-tuple-切片"><a class="markdownIt-Anchor" href="#312-tuple-切片"></a> 3.1.2 tuple 切片</h3><p>!&gt; tuple 也是一种 list，唯一区别是 tuple 不可变。因此，tuple 也可以用切片操作，只是操作的结果仍是 tuple：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)[:<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200712222248.png" alt="image-20200712222247480" /></p><h3 id="313-str-切片"><a class="markdownIt-Anchor" href="#313-str-切片"></a> 3.1.3 str 切片</h3><p>字符串<code>'xxx'</code>也可以看成是一种 list，每个元素就是一个字符。因此，字符串也可以用切片操作，只是操作结果仍是字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'ABCDEFG'</span>[:<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200712222834.png" alt="image-20200712222833885" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'ABCDEFG'</span>[::<span class="number">2</span>]</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200712223100.png" alt="image-20200712223059989" /></p><p>在很多编程语言中，针对字符串提供了很多各种截取函数（例如，substring），其实目的就是对字符串切片。Python 没有针对字符串的截取函数，只需要切片一个操作就可以完成，非常简单。</p><blockquote><p>✏️ 练习题：</p></blockquote><p>利用切片操作，实现一个 trim() 函数，去除字符串首尾的空格，注意不要调用 str 的<code>strip()</code>方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trim</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> s[:<span class="number">1</span>] == <span class="string">' '</span>:</span><br><span class="line">        s = s[<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">while</span> s[<span class="number">-1</span>:] == <span class="string">' '</span>:</span><br><span class="line">        s = s[:<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure><blockquote><p>✏️ 小结：</p></blockquote><p>有了切片操作，很多地方循环就不再需要了。Python 的切片非常灵活，一行代码就可以实现很多行循环才能完成的操作。</p><h2 id="32-迭代"><a class="markdownIt-Anchor" href="#32-迭代"></a> 3.2 迭代</h2><blockquote><p>定义：如果给定一个 list 或 tuple，我们可以通过<code>for</code>循环来遍历这个 list 或 tuple，这种遍历我们称为迭代（Iteration）。</p></blockquote><p>迭代是通过 for … in 来完成的，Python 的<code>for</code>循环抽象程度要高于 C 的<code>for</code>循环，因为 Python 的<code>for</code>循环不仅可以用在 list 或 tuple 上，还可以作用在其他可迭代对象上。</p><p>list 这种数据类型虽然有下标，但很多其他数据类型是没有下标的，但是，只要是可迭代对象，无论有无下标，都可以迭代，比如 dict 就可以迭代：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> d:</span><br><span class="line">    print(key)</span><br></pre></td></tr></table></figure><p>因为 dict 的存储不是按照 list 的方式顺序排列，所以，迭代出的结果顺序很可能不一样。</p><p>🍗 默认情况下，dict 迭代的是 key。如果要迭代 value，可以用<code>for value in d.values()</code>，如果要同时迭代 key 和 value，可以用<code>for k, v in d.items()</code>。</p><p>由于字符串也是可迭代对象，因此，也可以作用于<code>for</code>循环：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> <span class="string">'ABC'</span>:</span><br><span class="line">    print(ch)</span><br></pre></td></tr></table></figure><p>所以，当我们使用<code>for</code>循环时，只要作用于一个可迭代对象，<code>for</code>循环就可以正常运行，而我们不太关心该对象究竟是list还是其他数据类型。</p><p>那么，如何判断一个对象是可迭代对象呢？方法是通过 collections 模块的 Iterable 类型判断：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="string">'abc'</span>, Iterable) <span class="comment"># str是否可迭代</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], Iterable) <span class="comment"># list是否可迭代</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="number">123</span>, Iterable) <span class="comment"># 整数是否可迭代</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><p>最后一个小问题，如果要对 list 实现类似 Java 那样的下标循环怎么办？Python 内置的<code>enumerate</code>函数可以把一个 list 变成索引-元素对，这样就可以在<code>for</code>循环中同时迭代索引和元素本身：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i, value <span class="keyword">in</span> enumerate([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]):</span><br><span class="line"><span class="meta">... </span>    print(i, value)</span><br><span class="line">...</span><br><span class="line"><span class="number">0</span> A</span><br><span class="line"><span class="number">1</span> B</span><br><span class="line"><span class="number">2</span> C</span><br></pre></td></tr></table></figure><p>上面的<code>for</code>循环里，同时引用了两个变量，在 Python 里是很常见的，比如下面的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> x, y <span class="keyword">in</span> [(<span class="number">1</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">4</span>), (<span class="number">3</span>, <span class="number">9</span>)]:</span><br><span class="line"><span class="meta">... </span>    print(x, y)</span><br><span class="line">...</span><br><span class="line"><span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span></span><br><span class="line"><span class="number">3</span> <span class="number">9</span></span><br></pre></td></tr></table></figure><blockquote><p>✏️ 练习题：</p></blockquote><p>请使用迭代查找一个 list 中最小和最大值，并返回一个 tuple：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findMinAndMax</span><span class="params">(L)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> L == []:</span><br><span class="line">        <span class="keyword">return</span> (<span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        MIN = L[<span class="number">0</span>]</span><br><span class="line">        MAX = L[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> L:</span><br><span class="line">            MIN = min(MIN, i)</span><br><span class="line">            MAX = max(MAX, i) </span><br><span class="line">        <span class="keyword">return</span> (MIN, MAX)</span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line"><span class="keyword">if</span> findMinAndMax([]) != (<span class="literal">None</span>, <span class="literal">None</span>):</span><br><span class="line">    print(<span class="string">'测试失败!'</span>)</span><br><span class="line"><span class="keyword">elif</span> findMinAndMax([<span class="number">7</span>]) != (<span class="number">7</span>, <span class="number">7</span>):</span><br><span class="line">    print(<span class="string">'测试失败!'</span>)</span><br><span class="line"><span class="keyword">elif</span> findMinAndMax([<span class="number">7</span>, <span class="number">1</span>]) != (<span class="number">1</span>, <span class="number">7</span>):</span><br><span class="line">    print(<span class="string">'测试失败!'</span>)</span><br><span class="line"><span class="keyword">elif</span> findMinAndMax([<span class="number">7</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">5</span>]) != (<span class="number">1</span>, <span class="number">9</span>):</span><br><span class="line">    print(<span class="string">'测试失败!'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'测试成功!'</span>)</span><br></pre></td></tr></table></figure><p>结果图：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200715205941.png" alt="结果图" /></p><blockquote><p>✏️ 小结：</p></blockquote><p>任何可迭代对象都可以作用于<code>for</code>循环，包括我们自定义的数据类型，只要符合迭代条件，就可以使用<code>for</code>循环。</p><h2 id="33-列表生成式"><a class="markdownIt-Anchor" href="#33-列表生成式"></a> 3.3 列表生成式</h2><p>列表生成式即 List Comprehensions，是 Python 内置的非常简单却强大的可以用来创建 list 的生成式。</p><p>举个例子，要生成 list <code>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</code>可以用<code>list(range(1, 11))</code>：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200716110013.png" alt="image-20200716110005465" /></p><p>但如果要生成<code>[1x1, 2x2, 3x3, ..., 10x10]</code>怎么做？</p><ul><li>方法一是循环：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">L = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">    L.append(x * x)</span><br><span class="line">L</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200716110242.png" alt="image-20200716110241249" /></p><p>但是循环太繁琐，而列表生成式则可以用一行语句代替循环生成上面的 list：</p><ul><li>方法二：列表生成式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>)]</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200716110449.png" alt="image-20200716110448050" /></p><p>👒 写列表生成式时，把要生成的元素<code>x * x</code>放到前面，后面跟<code>for</code>循环，就可以把 list 创建出来，十分有用，多写几次，很快就可以熟悉这种语法。</p><p>for 循环后面还可以加上 if 判断，这样我们就可以筛选出仅偶数的平方：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200716110715.png" alt="image-20200716110714610" /></p><p>还可以使用两层循环，可以生成全排列：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[m + n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">'ABC'</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">'XYZ'</span>]</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200716110816.png" alt="image-20200716110813806" /></p><p>三层和三层以上的循环就很少用到了。</p><p>运用列表生成式，可以写出非常简洁的代码。例如，列出当前目录下的所有文件和目录名，可以通过一行代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os <span class="comment"># 导入os模块，模块的概念后面讲到</span></span><br><span class="line">[d <span class="keyword">for</span> d <span class="keyword">in</span> os.listdir(<span class="string">'.'</span>)] <span class="comment"># os.listdir可以列出文件和目录</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200716111018.png" alt="image-20200716111017314" /></p><p><code>for</code>循环其实可以同时使用两个甚至多个变量，比如<code>dict</code>的<code>items()</code>可以同时迭代 key 和 value：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'x'</span>: <span class="string">'A'</span>, <span class="string">'y'</span>: <span class="string">'B'</span>, <span class="string">'z'</span>: <span class="string">'C'</span> &#125;</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> d.items():</span><br><span class="line">    print(k, <span class="string">'='</span>, v)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200716111307.png" alt="image-20200716111306467" /></p><p>因此，列表生成式也可以使用两个变量来生成 list：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'x'</span>: <span class="string">'A'</span>, <span class="string">'y'</span>: <span class="string">'B'</span>, <span class="string">'z'</span>: <span class="string">'C'</span> &#125;</span><br><span class="line">[k + <span class="string">'='</span> + v <span class="keyword">for</span> k, v <span class="keyword">in</span> d.items()]</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200716111535.png" alt="image-20200716111534526" /></p><p>最后把一个 list 中所有的字符串变成小写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="string">'Hello'</span>, <span class="string">'World'</span>, <span class="string">'IBM'</span>, <span class="string">'Apple'</span>]</span><br><span class="line">[s.lower() <span class="keyword">for</span> s <span class="keyword">in</span> L]</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200716111756.png" alt="image-20200716111755472" /></p><h3 id="331-if-else"><a class="markdownIt-Anchor" href="#331-if-else"></a> 3.3.1 if … else</h3><blockquote><p>使用列表生成式的时候，有些童鞋经常搞不清楚<code>if...else</code>的用法。</p></blockquote><p>例如，以下代码正常输出偶数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>但是，我们不能在最后的<code>if</code>加上<code>else</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span>]</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200716112210.png" alt="image-20200716112208908" /></p><p>这是因为跟在<code>for</code>后面的<code>if</code>是一个筛选条件，不能带<code>else</code>，否则如何筛选？</p><p>另一些童鞋发现把<code>if</code>写在<code>for</code>前面必须加<code>else</code>，否则报错：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200716112357.png" alt="image-20200716112356893" /></p><p>这是因为<code>for</code>前面的部分是一个表达式，它必须根据<code>x</code>计算出一个结果。因此，考察表达式：<code>x if x % 2 == 0</code>，它无法根据<code>x</code>计算出结果，因为缺少<code>else</code>，必须加上<code>else</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[x <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> -x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>)]</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200716112507.png" alt="image-20200716112506596" /></p><p>上述<code>for</code>前面的表达式<code>x if x % 2 == 0 else -x</code>才能根据<code>x</code>计算出确定的结果。</p><p>可见，在一个列表生成式中，<code>for</code>前面的<code>if ... else</code>是表达式，而<code>for</code>后面的<code>if</code>是过滤条件，不能带<code>else</code>。</p><blockquote><p>✏️ 练习题：</p></blockquote><p>如果list中既包含字符串，又包含整数，由于非字符串类型没有<code>lower()</code>方法，所以列表生成式会报错：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200716112808.png" alt="image-20200716112807607" /></p><p>使用内建的<code>isinstance</code>函数可以判断一个变量是不是字符串：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200716113014.png" alt="image-20200716113013011" /></p><p>请修改列表生成式，通过添加<code>if</code>语句保证列表生成式能正确地执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">L1 = [<span class="string">'Hello'</span>, <span class="string">'World'</span>, <span class="number">18</span>, <span class="string">'Apple'</span>, <span class="literal">None</span>]</span><br><span class="line">L2 = [s.lower() <span class="keyword">for</span> s <span class="keyword">in</span> L1 <span class="keyword">if</span> isinstance(s,str)]</span><br><span class="line"><span class="comment"># 测试:</span></span><br><span class="line">print(L2)</span><br><span class="line"><span class="keyword">if</span> L2 == [<span class="string">'hello'</span>, <span class="string">'world'</span>, <span class="string">'apple'</span>]:</span><br><span class="line">    print(<span class="string">'测试通过!'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'测试失败!'</span>)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200716113245.png" alt="image-20200716113244975" /></p><blockquote><p>✏️ 小结：</p></blockquote><p>运用列表生成式，可以快速生成 list，可以通过一个 list 推导出另一个 list，而代码却十分简洁。</p><h2 id="34-生成器"><a class="markdownIt-Anchor" href="#34-生成器"></a> 3.4 生成器</h2><blockquote><p>通过列表生成式，我们可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有限的。而且，创建一个包含 100 万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。</p></blockquote><p>所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的 list，从而节省大量的空间。在 Python 中，这种<code>一边循环一边计算</code>的机制，称为生成器：generator。</p><p>🎉 要创建一个 generator，有很多种方法。第一种方法很简单，只要把一个列表生成式的<code>[]</code>改成<code>()</code>，就创建了一个 generator：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200716114556.png" alt="image-20200716114555027" /></p><p>创建<code>L</code>和<code>g</code>的区别仅在于最外层的<code>[]</code>和<code>()</code>，<code>L</code>是一个list，而<code>g</code>是一个 generator。</p><p>我们可以直接打印出 list 的每一个元素，但我们怎么打印出 generator 的每一个元素呢？</p><p>如果要一个一个打印出来，可以通过<code>next()</code>函数获得 generator 的下一个返回值：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200716115125.png" alt="image-20200716115124114" /></p><p>我们讲过，generator 保存的是算法，每次调用<code>next(g)</code>，就计算出<code>g</code>的下一个元素的值，直到计算到最后一个元素，没有更多的元素时，抛出<code>StopIteration</code>的错误。</p><p>当然，上面这种不断调用<code>next(g)</code>实在是太变态了，正确的方法是使用<code>for</code>循环，因为 generator 也是可迭代对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">g = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> g:</span><br><span class="line">    print(n)</span><br></pre></td></tr></table></figure><p>所以，我们创建了一个 generator 后，基本上永远不会调用<code>next()</code>，而是通过<code>for</code>循环来迭代它，并且不需要关心<code>StopIteration</code>的错误。</p><p>generator 非常强大。如果推算的算法比较复杂，用类似列表生成式的<code>for</code>循环无法实现的时候，还可以用函数来实现。</p><p>比如，著名的斐波拉契数列（Fibonacci），除第一个和第二个数外，任意一个数都可由前两个数相加得到：</p><p>1, 1, 2, 3, 5, 8, 13, 21, 34, …</p><p>斐波拉契数列用列表生成式写不出来，但是，用函数把它打印出来却很容易：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(max)</span>:</span></span><br><span class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; max:</span><br><span class="line">        print(b)</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        n = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'done'</span></span><br></pre></td></tr></table></figure><p>注意：</p><p>赋值语句：a, b = b, a + b</p><p>相当于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t = (b, a + b) <span class="comment"># t是一个tuple</span></span><br><span class="line">a = t[<span class="number">0</span>]</span><br><span class="line">b = t[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>但不必显式写出临时变量 t 就可以赋值。</p><p>上面的函数可以输出斐波那契数列的前 N 个数：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200716124359.png" alt="image-20200716124358250" /></p><p>仔细观察，可以看出，<code>fib</code>函数实际上是定义了斐波拉契数列的推算规则，可以从第一个元素开始，推算出后续任意的元素，这种逻辑其实非常类似 generator。</p><p>也就是说，上面的函数和 generator 仅一步之遥。要把<code>fib</code>函数变成 generator，只需要把<code>print(b)</code>改为<code>yield b</code>就可以了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(max)</span>:</span></span><br><span class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; max:</span><br><span class="line">        <span class="keyword">yield</span> b</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        n = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'done'</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200716124518.png" alt="image-20200716124517165" /></p><p>这就是定义 generator 的另一种方法。如果一个函数定义中包含<code>yield</code>关键字，那么这个函数就不再是一个普通函数，而是一个 generator：</p><p>这里，最难理解的就是 generator 和函数的执行流程不一样。函数是顺序执行，遇到<code>return</code>语句或者最后一行函数语句就返回。而变成 generator 的函数，在每次调用<code>next()</code>的时候执行，遇到<code>yield</code>语句返回，再次执行时从上次返回的<code>yield</code>语句处继续执行。</p><p>举个简单的例子，定义一个 generator，依次返回数字 1，3，5：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">odd</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'step 1'</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    print(<span class="string">'step 2'</span>)</span><br><span class="line">    <span class="keyword">yield</span>(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">'step 3'</span>)</span><br><span class="line">    <span class="keyword">yield</span>(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>调用该 generator 时，首先要生成一个 generator 对象，然后用<code>next()</code>函数不断获得下一个返回值：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200716124900.png" alt="image-20200716124859127" /></p><p>可以看到，<code>odd</code>不是普通函数，而是 generator，在执行过程中，遇到<code>yield</code>就中断，下次又继续执行。执行 3 次<code>yield</code>后，已经没有<code>yield</code>可以执行了，所以，第 4 次调用<code>next(o)</code>就报错。</p><p>回到<code>fib</code>的例子，我们在循环过程中不断调用<code>yield</code>，就会不断中断。当然要给循环设置一个条件来退出循环，不然就会产生一个无限数列出来。</p><p>同样的，把函数改成 generator 后，我们基本上从来不会用<code>next()</code>来获取下一个返回值，而是直接使用<code>for</code>循环来迭代：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> fib(<span class="number">6</span>):</span><br><span class="line">    print(n)</span><br></pre></td></tr></table></figure><p>但是用<code>for</code>循环调用 generator 时，发现拿不到 generator 的<code>return</code>语句的返回值。如果想要拿到返回值，必须捕获<code>StopIteration</code>错误，返回值包含在<code>StopIteration</code>的<code>value</code>中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">g = fib(<span class="number">6</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        x = next(g)</span><br><span class="line">        print(<span class="string">'g:'</span>, x)</span><br><span class="line">    <span class="keyword">except</span> StopIteration <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'Generator return value:'</span>, e.value)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200716125329.png" alt="image-20200716125328414" /></p><p>关于如何捕获错误，后面的错误处理还会详细讲解。</p><blockquote><p>✏️ 练习题：</p></blockquote><p><a href="http://baike.baidu.com/view/7804.htm" target="_blank" rel="noopener">杨辉三角</a>定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">          1</span><br><span class="line">         &#x2F; \</span><br><span class="line">        1   1</span><br><span class="line">       &#x2F; \ &#x2F; \</span><br><span class="line">      1   2   1</span><br><span class="line">     &#x2F; \ &#x2F; \ &#x2F; \</span><br><span class="line">    1   3   3   1</span><br><span class="line">   &#x2F; \ &#x2F; \ &#x2F; \ &#x2F; \</span><br><span class="line">  1   4   6   4   1</span><br><span class="line"> &#x2F; \ &#x2F; \ &#x2F; \ &#x2F; \ &#x2F; \</span><br><span class="line">1   5   10  10  5   1</span><br></pre></td></tr></table></figure><p>把每一行看做一个 list，试写一个 generator，不断输出下一行的 list：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">triangles</span><span class="params">()</span>:</span></span><br><span class="line">    L = [<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">yield</span> L </span><br><span class="line">        L = [<span class="number">1</span>] + [L[i] + L[i+<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(L) - <span class="number">1</span>)] + [<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">0</span></span><br><span class="line">results = []</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> triangles():</span><br><span class="line">    results.append(t)</span><br><span class="line">    n = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> results:</span><br><span class="line">    print(t)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> results == [</span><br><span class="line">    [<span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">7</span>, <span class="number">21</span>, <span class="number">35</span>, <span class="number">35</span>, <span class="number">21</span>, <span class="number">7</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">8</span>, <span class="number">28</span>, <span class="number">56</span>, <span class="number">70</span>, <span class="number">56</span>, <span class="number">28</span>, <span class="number">8</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">9</span>, <span class="number">36</span>, <span class="number">84</span>, <span class="number">126</span>, <span class="number">126</span>, <span class="number">84</span>, <span class="number">36</span>, <span class="number">9</span>, <span class="number">1</span>]</span><br><span class="line">]:</span><br><span class="line">    print(<span class="string">'测试通过!'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'测试失败!'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>小结：</p></blockquote><p>generator 是非常强大的工具，在 Python 中，可以简单地把列表生成式改成 generator，也可以通过函数实现复杂逻辑的 generator。</p><p>要理解 generator 的工作原理，它是在<code>for</code>循环的过程中不断计算出下一个元素，并在适当的条件结束<code>for</code>循环。对于函数改成的 generator 来说，遇到<code>return</code>语句或者执行到函数体最后一行语句，就是结束 generator 的指令，<code>for</code>循环随之结束。</p><p>请注意区分普通函数和 generator 函数，普通函数调用直接返回结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = abs(<span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><p>generator 函数的“调用”实际返回一个 generator 对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>g = fib(<span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g</span><br><span class="line">&lt;generator object fib at <span class="number">0x1022ef948</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="35-迭代器"><a class="markdownIt-Anchor" href="#35-迭代器"></a> 3.5 迭代器</h2><p>我们已经知道，可以直接作用于<code>for</code>循环的数据类型有以下几种：</p><p>一类是集合数据类型，如<code>list</code>、<code>tuple</code>、<code>dict</code>、<code>set</code>、<code>str</code>等；</p><p>一类是<code>generator</code>，包括生成器和带<code>yield</code>的 generator function。</p><p>这些可以直接作用于<code>for</code>循环的对象统称为可迭代对象：<code>Iterable</code>。</p><p>可以使用<code>isinstance()</code>判断一个对象是否是<code>Iterable</code>对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterable</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance([], Iterable)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(&#123;&#125;, Iterable)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="string">'abc'</span>, Iterable)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance((x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)), Iterable)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="number">100</span>, Iterable)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><p>而生成器不但可以作用于<code>for</code>循环，还可以被<code>next()</code>函数不断调用并返回下一个值，直到最后抛出<code>StopIteration</code>错误表示无法继续返回下一个值了。</p><p>可以被<code>next()</code>函数调用并不断返回下一个值的对象称为迭代器：<code>Iterator</code>。</p><p>可以使用<code>isinstance()</code>判断一个对象是否是<code>Iterator</code>对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterator</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance((x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)), Iterator)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance([], Iterator)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(&#123;&#125;, Iterator)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="string">'abc'</span>, Iterator)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><p>生成器都是<code>Iterator</code>对象，但<code>list</code>、<code>dict</code>、<code>str</code>虽然是<code>Iterable</code>，却不是<code>Iterator</code>。</p><p>把<code>list</code>、<code>dict</code>、<code>str</code>等<code>Iterable</code>变成<code>Iterator</code>可以使用<code>iter()</code>函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(iter([]), Iterator)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(iter(<span class="string">'abc'</span>), Iterator)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>你可能会问，为什么<code>list</code>、<code>dict</code>、<code>str</code>等数据类型不是<code>Iterator</code>？</p><p>这是因为 Python 的<code>Iterator</code>对象表示的是一个数据流，Iterator 对象可以被<code>next()</code>函数调用并不断返回下一个数据，直到没有数据时抛出<code>StopIteration</code>错误。可以把这个数据流看做是一个有序序列，但我们却不能提前知道序列的长度，只能不断通过<code>next()</code>函数实现按需计算下一个数据，所以<code>Iterator</code>的计算是惰性的，只有在需要返回下一个数据时它才会计算。</p><p><code>Iterator</code>甚至可以表示一个无限大的数据流，例如全体自然数。而使用 list 是永远不可能存储全体自然数的。</p><blockquote><p>小结：</p></blockquote><p>凡是可作用于<code>for</code>循环的对象都是<code>Iterable</code>类型；</p><p>凡是可作用于<code>next()</code>函数的对象都是<code>Iterator</code>类型，它们表示一个惰性计算的序列；</p><p>集合数据类型如<code>list</code>、<code>dict</code>、<code>str</code>等是<code>Iterable</code>但不是<code>Iterator</code>，不过可以通过<code>iter()</code>函数获得一个<code>Iterator</code>对象。</p><p>Python 的<code>for</code>循环本质上就是通过不断调用<code>next()</code>函数实现的，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>实际上完全等价于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先获得Iterator对象:</span></span><br><span class="line">it = iter([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="comment"># 循环:</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 获得下一个值:</span></span><br><span class="line">        x = next(it)</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        <span class="comment"># 遇到StopIteration就退出循环</span></span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="36-参考资料"><a class="markdownIt-Anchor" href="#36-参考资料"></a> 3.6 参考资料</h2><ul><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017269809315232" target="_blank" rel="noopener">廖雪峰 - Python 3.x - 高级特性</a></li><li><a href="https://veal98.github.io/CS-Wiki/#/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/Python/Python%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7" target="_blank" rel="noopener">CS - WiKi</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python/Python入门学习笔记/CH5-模块</title>
      <link href="/2020/08/15/Python/Python%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/CH5-%E6%A8%A1%E5%9D%97/"/>
      <url>/2020/08/15/Python/Python%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/CH5-%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="第五章-模块"><a class="markdownIt-Anchor" href="#第五章-模块"></a> 第五章 模块</h1><p>我们知道，一个文件里代码越来越长的时候，就会越来越不容易维护。</p><p>为了编写可维护的代码，我们把很多函数分组，分别放到不同的文件里，这样，每个文件包含的代码就相对较少，很多编程语言都采用这种组织代码的方式。在 Python 中，一个 .py 文件就称之为一个模块（Module）。</p><blockquote><p>🎉 使用模块有什么好处？</p></blockquote><ul><li><p>（1）最大的好处是大大提高了代码的可维护性。</p></li><li><p>（2）其次，编写代码不必从零开始。当一个模块编写完毕，就可以被其他地方引用。我们在编写程序的时候，也经常引用其他模块，包括 Python 内置的模块和来自第三方的模块。</p></li><li><p>（3）使用模块还可以避免函数名和变量名冲突。相同名字的函数和变量完全可以分别存在不同的模块中，</p></li><li><p>（4）因此，我们自己在编写模块时，不必考虑名字会与其他模块冲突。但是也要注意，尽量不要与内置函数名字冲突。点<a href="http://docs.python.org/3/library/functions.html" target="_blank" rel="noopener">这里</a>查看Python的所有内置函数。</p></li></ul><p>你也许还想到，如果不同的人编写的模块名相同怎么办？为了避免模块名冲突，Python 又引入了按目录来组织模块的方法，称为包（Package）。</p><p>举个例子，一个<code>abc.py</code>的文件就是一个名字叫<code>abc</code>的模块，一个<code>xyz.py</code>的文件就是一个名字叫<code>xyz</code>的模块。</p><p>现在，假设我们的<code>abc</code>和<code>xyz</code>这两个模块名字与其他模块冲突了，于是我们可以通过包来组织模块，避免冲突。方法是选择一个顶层包名，比如<code>mycompany</code>，按照如下目录存放：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mycompany</span><br><span class="line">├─ __init__.py</span><br><span class="line">├─ abc.py</span><br><span class="line">└─ xyz.py</span><br></pre></td></tr></table></figure><p>引入了包以后，只要顶层的包名不与别人冲突，那所有模块都不会与别人冲突。现在，<code>abc.py</code>模块的名字就变成了<code>mycompany.abc</code>，类似的，<code>xyz.py</code>的模块名变成了<code>mycompany.xyz</code>。</p><p>请注意，每一个包目录下面都会有一个<code>__init__.py</code>的文件，这个文件是必须存在的，否则，Python 就把这个目录当成普通目录，而不是一个包。<code>__init__.py</code>可以是空文件，也可以有 Python 代码，因为<code>__init__.py</code>本身就是一个模块，而它的模块名就是<code>mycompany</code>。</p><p>类似的，可以有多级目录，组成多级层次的包结构。比如如下的目录结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mycompany</span><br><span class="line"> ├─ web</span><br><span class="line"> │  ├─ __init__.py</span><br><span class="line"> │  ├─ utils.py</span><br><span class="line"> │  └─ www.py</span><br><span class="line"> ├─ __init__.py</span><br><span class="line"> ├─ abc.py</span><br><span class="line"> └─ utils.py</span><br></pre></td></tr></table></figure><p>文件<code>www.py</code>的模块名就是<code>mycompany.web.www</code>，两个文件<code>utils.py</code>的模块名分别是<code>mycompany.utils</code>和<code>mycompany.web.utils</code>。</p><p>!&gt; 自己创建模块时要注意命名，不能和 Python 自带的模块名称冲突。例如，系统自带了 sys 模块，自己的模块就不可命名为 <a href="http://sys.py" target="_blank" rel="noopener">sys.py</a>，否则将无法导入系统自带的 sys 模块。</p><blockquote><p>总结：</p></blockquote><p>模块是一组 Python 代码的集合，可以使用其他模块，也可以被其他模块使用。</p><p>创建自己的模块时，要注意：</p><ul><li>模块名要遵循 Python 变量命名规范，不要使用中文、特殊字符；</li><li>模块名不要和系统模块名冲突，最好先查看系统是否已存在该模块，检查方法是在 Python 交互环境执行<code>import abc</code>，若成功则说明系统存在此模块。</li></ul><h2 id="51-使用模块"><a class="markdownIt-Anchor" href="#51-使用模块"></a> 5.1 使用模块</h2><p>Python 本身就内置了很多非常有用的模块，只要安装完毕，这些模块就可以立刻使用。</p><p>我们以内建的<code>sys</code>模块为例，编写一个<code>hello</code>的模块：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">' a test module '</span></span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">'WuGenQiang'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    args = sys.argv</span><br><span class="line">    <span class="keyword">if</span> len(args)==<span class="number">1</span>:</span><br><span class="line">        print(<span class="string">'Hello, world!'</span>)</span><br><span class="line">    <span class="keyword">elif</span> len(args)==<span class="number">2</span>:</span><br><span class="line">        print(<span class="string">'Hello, %s!'</span> % args[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'Too many arguments!'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    test()</span><br></pre></td></tr></table></figure><p>第 1 行和第 2 行是标准注释，第 1 行注释可以让这个<code>hello.py</code>文件直接在 Unix/Linux/Mac 上运行，第 2 行注释表示 .py 文件本身使用标准 UTF-8 编码；</p><p>第 4 行是一个字符串，表示模块的文档注释，任何模块代码的第一个字符串都被视为模块的文档注释；</p><p>第 6 行使用<code>__author__</code>变量把作者写进去，这样当你公开源代码后别人就可以瞻仰你的大名；</p><p>以上就是 Python 模块的标准文件模板，当然也可以全部删掉不写，但是，按标准办事肯定没错。</p><p>后面开始就是真正的代码部分。</p><p>你可能注意到了，使用<code>sys</code>模块的第一步，就是导入该模块：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br></pre></td></tr></table></figure><p>导入<code>sys</code>模块后，我们就有了变量<code>sys</code>指向该模块，利用<code>sys</code>这个变量，就可以访问<code>sys</code>模块的所有功能。</p><p><code>sys</code>模块有一个<code>argv</code>变量，用 list 存储了命令行的所有参数。<code>argv</code>至少有一个元素，因为第一个参数永远是该 .py 文件的名称，例如：</p><p>运行<code>python3 hello.py</code>获得的<code>sys.argv</code>就是<code>['hello.py']</code>；</p><p>运行<code>python3 hello.py WuGenQiang</code>获得的<code>sys.argv</code>就是<code>['hello.py', 'WuGenQiang']</code>。</p><p>最后，注意到这两行代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    test()</span><br></pre></td></tr></table></figure><p>当我们在命令行运行<code>hello</code>模块文件时，Python 解释器把一个特殊变量<code>__name__</code>置为<code>__main__</code>，而如果在其他地方导入该<code>hello</code>模块时，<code>if</code>判断将失败，因此，这种<code>if</code>测试可以让一个模块通过命令行运行时执行一些额外的代码，最常见的就是运行测试。</p><p>我们可以用命令行运行<code>hello.py</code>看看效果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ python3 hello.py</span><br><span class="line">Hello, world!</span><br><span class="line">$ python hello.py WuGenQiang</span><br><span class="line">Hello, WuGenQiang!</span><br></pre></td></tr></table></figure><p>如果启动 Python 交互环境，再导入<code>hello</code>模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ python3</span><br><span class="line">Python 3.4.3 (v3.4.3:9b73f1c3e601, Feb 23 2015, 02:52:03) </span><br><span class="line">[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt; import hello</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>导入时，没有打印<code>Hello, word!</code>，因为没有执行<code>test()</code>函数。</p><p>调用<code>hello.test()</code>时，才能打印出<code>Hello, word!</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>hello.test()</span><br><span class="line">Hello, world!</span><br></pre></td></tr></table></figure><h3 id="511-作用域"><a class="markdownIt-Anchor" href="#511-作用域"></a> 5.1.1 作用域</h3><p>在一个模块中，我们可能会定义很多函数和变量，但有的函数和变量我们希望给别人使用，有的函数和变量我们希望仅仅在模块内部使用。在 Python 中，是通过<code>_</code>前缀来实现的。</p><p>正常的函数和变量名是公开的（public），可以被直接引用，比如：<code>abc</code>，<code>x123</code>，<code>PI</code>等；</p><p>类似<code>__xxx__</code>这样的变量是特殊变量，可以被直接引用，但是有特殊用途，比如上面的<code>__author__</code>，<code>__name__</code>就是特殊变量，<code>hello</code>模块定义的文档注释也可以用特殊变量<code>__doc__</code>访问，我们自己的变量一般不要用这种变量名；</p><p>类似<code>_xxx</code>和<code>__xxx</code>这样的函数或变量就是非公开的（private），不应该被直接引用，比如<code>_abc</code>，<code>__abc</code>等；</p><p>之所以我们说，private 函数和变量“不应该”被直接引用，而不是“不能”被直接引用，是因为 Python 并没有一种方法可以完全限制访问 private 函数或变量，但是，从编程习惯上不应该引用 private 函数或变量。</p><p>private 函数或变量不应该被别人引用，那它们有什么用呢？请看例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_private_1</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello, %s'</span> % name</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_private_2</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hi, %s'</span> % name</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greeting</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(name) &gt; <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> _private_1(name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> _private_2(name)</span><br></pre></td></tr></table></figure><p>我们在模块里公开<code>greeting()</code>函数，而把内部逻辑用 private 函数隐藏起来了，这样，调用<code>greeting()</code>函数不用关心内部的 private 函数细节，这也是一种非常有用的代码封装和抽象的方法，即：</p><p>外部不需要引用的函数全部定义成 private，只有外部需要引用的函数才定义为 public。</p><h2 id="52-安装第三方模块"><a class="markdownIt-Anchor" href="#52-安装第三方模块"></a> 5.2 安装第三方模块</h2><p>在 Python 中，安装第三方模块，是通过包管理工具 pip 完成的。</p><p>在命令提示符窗口下尝试运行<code>pip</code>，如果 Windows 提示未找到命令，可以重新运行安装程序添加<code>pip</code>。</p><p>注意：Mac 或 Linux上有可能并存 Python 3.x 和 Python 2.x，因此对应的 pip 命令是<code>pip3</code>。</p><p>例如，我们要安装一个第三方库——Python Imaging Library，这是 Python 下非常强大的处理图像的工具库。不过，PIL 目前只支持到 Python 2.7，并且有年头没有更新了，因此，基于 PIL 的 Pillow 项目开发非常活跃，并且支持最新的 Python 3。</p><p>一般来说，第三方库都会在 Python 官方的<a href="https://pypi.python.org/" target="_blank" rel="noopener">pypi.python.org</a>网站注册，要安装一个第三方库，必须先知道该库的名称，可以在官网或者 pypi 上搜索，比如 Pillow 的名称叫<a href="https://pypi.python.org/pypi/Pillow/" target="_blank" rel="noopener">Pillow</a>，因此，安装 Pillow 的命令就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Pillow</span><br></pre></td></tr></table></figure><p>耐心等待下载并安装后，就可以使用 Pillow 了。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200720224716.png" alt="image-20200720224346246" /></p><h3 id="521-安装常用模块"><a class="markdownIt-Anchor" href="#521-安装常用模块"></a> 5.2.1 安装常用模块</h3><p>在使用 Python 时，我们经常需要用到很多第三方库，例如，上面提到的 Pillow，以及 MySQL 驱动程序，Web 框架 Flask，科学计算 Numpy 等。用 pip 一个一个安装费时费力，还需要考虑兼容性。我们推荐直接使用<a href="https://www.anaconda.com/" target="_blank" rel="noopener">Anaconda</a>，这是一个基于 Python 的数据处理和科学计算平台，它已经内置了许多非常有用的第三方库，我们装上 Anaconda，就相当于把数十个第三方模块自动安装好了，非常简单易用。</p><p>可以从<a href="https://www.anaconda.com/download/" target="_blank" rel="noopener">Anaconda官网</a>下载GUI安装包，安装包有 500~600M，所以需要耐心等待下载。下载后直接安装，Anaconda 会把系统 Path 中的 python 指向自己自带的 Python，并且，Anaconda 安装的第三方模块会安装在 Anaconda 自己的路径下，不影响系统已安装的 Python 目录。</p><p>安装好 Anaconda 后，重新打开命令行窗口，输入 python，可以看到 Anaconda 的信息：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200720225032.png" alt="image-20200720225025797" /></p><p>可以尝试直接<code>import numpy</code>等已安装的第三方模块。</p><h3 id="522-模块搜索路径"><a class="markdownIt-Anchor" href="#522-模块搜索路径"></a> 5.2.2 模块搜索路径</h3><p>当我们试图加载一个模块时，Python 会在指定的路径下搜索对应的 .py 文件，如果找不到，就会报错：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> mymodule</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ImportError: No module named mymodule</span><br></pre></td></tr></table></figure><p>默认情况下，Python 解释器会搜索当前目录、所有已安装的内置模块和第三方模块，搜索路径存放在<code>sys</code>模块的<code>path</code>变量中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.path</span><br><span class="line">[<span class="string">''</span>, <span class="string">'/Library/Frameworks/Python.framework/Versions/3.6/lib/python36.zip'</span>, <span class="string">'/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6'</span>, ..., <span class="string">'/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages'</span>]</span><br></pre></td></tr></table></figure><p>如果我们要添加自己的搜索目录，有两种方法：</p><p>一是直接修改<code>sys.path</code>，添加要搜索的目录：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.path.append(<span class="string">'/Users/michael/my_py_scripts'</span>)</span><br></pre></td></tr></table></figure><p>这种方法是在运行时修改，运行结束后失效。</p><p>第二种方法是设置环境变量<code>PYTHONPATH</code>，该环境变量的内容会被自动添加到模块搜索路径中。设置方式与设置Path 环境变量类似。注意只需要添加你自己的搜索路径，Python 自己本身的搜索路径不受影响。</p><h2 id="53-参考资料"><a class="markdownIt-Anchor" href="#53-参考资料"></a> 5.3 参考资料</h2><ul><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017454145014176" target="_blank" rel="noopener">廖雪峰 - Python 3.x - 模块</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python/Python入门学习笔记/CH4-函数式编程</title>
      <link href="/2020/08/15/Python/Python%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/CH4-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
      <url>/2020/08/15/Python/Python%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/CH4-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="第四章-函数式编程"><a class="markdownIt-Anchor" href="#第四章-函数式编程"></a> 第四章 函数式编程</h1><p>函数是 Python 内建支持的一种封装，我们通过把大段代码拆成函数，通过一层一层的函数调用，就可以把复杂任务分解成简单的任务，这种分解可以称之为面向过程的程序设计。函数就是面向过程的程序设计的基本单元。</p><p>而函数式编程（请注意多了一个“式”字）—— Functional Programming，虽然也可以归结到面向过程的程序设计，但其思想更接近数学计算。</p><p>我们首先要搞明白计算机（Computer）和计算（Compute）的概念。</p><p>在计算机的层次上，CPU 执行的是加减乘除的<code>指令代码</code>，以及各种条件判断和跳转指令，所以，汇编语言是最贴近计算机的语言。</p><p>而计算则指数学意义上的计算，越是抽象的计算，离计算机硬件越远。</p><p>对应到编程语言，就是越低级的语言，越贴近计算机，抽象程度低，执行效率高，比如 C 语言；越高级的语言，越贴近计算，抽象程度高，执行效率低，比如 Lisp 语言。</p><blockquote><p>🎁🎉 诞生 50 多年之后，<a href="http://en.wikipedia.org/wiki/Functional_programming" target="_blank" rel="noopener">函数式编程</a>（functional programming）开始获得越来越多的关注。不仅最古老的函数式语言 Lisp 重获青春，而且新的函数式语言层出不穷，比如 Erlang、clojure、Scala、F# 等等。目前最当红的 Python、Ruby、Javascript，对函数式编程的支持都很强，就连老牌的面向对象的 Java、面向过程的 PHP，都忙不迭地加入对匿名函数的支持。越来越多的迹象表明，函数式编程已经不再是学术界的最爱，开始大踏步地在业界投入实用。也许继&quot;面向对象编程&quot;之后，&quot;函数式编程&quot;会成为下一个编程的主流范式（paradigm）。</p></blockquote><h2 id="41-什么是函数式编程"><a class="markdownIt-Anchor" href="#41-什么是函数式编程"></a> 4.1 什么是函数式编程</h2><p>函数式编程就是一种抽象程度很高的编程范式，纯粹的函数式编程语言编写的函数没有变量，因此，任意一个函数，只要输入是确定的，输出就是确定的，这种纯函数我们称之为没有副作用。而允许使用变量的程序设计语言，由于函数内部的变量状态不确定，同样的输入，可能得到不同的输出，因此，这种函数是有副作用的。</p><p>🔊 函数式编程的一个特点就是，允许把函数本身作为参数传入另一个函数，还允许返回一个函数！</p><p>Python 对函数式编程提供部分支持。由于 Python 允许使用变量，因此，Python 不是纯函数式编程语言。</p><h3 id="411-定义"><a class="markdownIt-Anchor" href="#411-定义"></a> 4.1.1 定义</h3><p>简单说，&quot;函数式编程&quot;是一种<a href="http://en.wikipedia.org/wiki/Programming_paradigm" target="_blank" rel="noopener">&quot;编程范式&quot;</a>（programming paradigm），也就是如何编写程序的方法论。它属于<a href="http://en.wikipedia.org/wiki/Structured_programming" target="_blank" rel="noopener">&quot;结构化编程&quot;</a>的一种，主要思想是把运算过程尽量写成一系列嵌套的函数调用。</p><p>举例来说，现在有这样一个数学表达式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span> + <span class="number">2</span>) * <span class="number">3</span> - <span class="number">4</span></span><br></pre></td></tr></table></figure><p>传统的过程式编程，可能这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a &#x3D; 1 + 2;</span><br><span class="line">var b &#x3D; a * 3;</span><br><span class="line">var c &#x3D; b - 4;</span><br></pre></td></tr></table></figure><p>函数式编程要求使用函数，我们可以把<strong>运算过程</strong>定义为不同的函数，然后写成下面这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var result &#x3D; subtract(multiply(add(1,2), 3), 4);</span><br></pre></td></tr></table></figure><p>这就是函数式编程。</p><h3 id="412-特点"><a class="markdownIt-Anchor" href="#412-特点"></a> 4.1.2 特点</h3><p>函数式编程具有五个鲜明的特点。</p><h4 id="1-函数是第一等公民"><a class="markdownIt-Anchor" href="#1-函数是第一等公民"></a> ① 函数是&quot;第一等公民&quot;</h4><p>所谓<a href="http://en.wikipedia.org/wiki/First-class_function" target="_blank" rel="noopener">&quot;第一等公民&quot;</a>（first class），指的是函数与其他数据类型一样，处于平等地位，可以赋值给其他变量，也可以作为参数，传入另一个函数，或者作为别的函数的返回值。</p><p>举例来说，下面代码中的 print 变量就是一个函数，可以作为另一个函数的参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var print &#x3D; function(i)&#123; </span><br><span class="line">console.log(i);</span><br><span class="line">&#125;;</span><br><span class="line">[1,2,3].forEach(print);</span><br></pre></td></tr></table></figure><h4 id="2-只用表达式不用语句"><a class="markdownIt-Anchor" href="#2-只用表达式不用语句"></a> ② 只用&quot;表达式&quot;，不用&quot;语句&quot;</h4><p>“表达式”（expression）是一个单纯的运算过程，总是有返回值；“语句”（statement）是执行某种操作，没有返回值。函数式编程要求，只使用表达式，不使用语句。也就是说，每一步都是单纯的运算，而且都有返回值。</p><p>原因是函数式编程的开发动机，一开始就是为了处理运算（computation），不考虑系统的读写（I/O）。&quot;语句&quot;属于对系统的读写操作，所以就被排斥在外。</p><p>当然，实际应用中，不做 I/O 是不可能的。因此，编程过程中，函数式编程只要求把 I/O 限制到最小，不要有不必要的读写行为，保持计算过程的单纯性。</p><h4 id="3-没有副作用"><a class="markdownIt-Anchor" href="#3-没有副作用"></a> ③ 没有&quot;副作用&quot;</h4><p>所谓<a href="http://en.wikipedia.org/wiki/Side_effect_(computer_science)" target="_blank" rel="noopener">&quot;副作用&quot;</a>（side effect），指的是函数内部与外部互动（最典型的情况，就是修改全局变量的值），产生运算以外的其他结果。</p><p>函数式编程强调没有&quot;副作用&quot;，意味着函数要保持独立，所有功能就是返回一个新的值，没有其他行为，尤其是不得修改外部变量的值。</p><h4 id="4-不修改状态"><a class="markdownIt-Anchor" href="#4-不修改状态"></a> ④ 不修改状态</h4><p>上一点已经提到，函数式编程只是返回新的值，不修改系统变量。因此，不修改变量，也是它的一个重要特点。</p><p>在其他类型的语言中，变量往往用来保存&quot;状态&quot;（state）。不修改变量，意味着状态不能保存在变量中。函数式编程使用参数保存状态，最好的例子就是递归。下面的代码是一个将字符串逆序排列的函数，它演示了不同的参数如何决定了运算所处的&quot;状态&quot;。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function reverse(string) &#123;</span><br><span class="line">　　　　if(string.length &#x3D;&#x3D; 0) &#123;</span><br><span class="line">　　　　　　return string;</span><br><span class="line">　　　　&#125; else &#123;</span><br><span class="line">　　　　　　return reverse(string.substring(1, string.length)) + string.substring(0, 1);</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure><p>由于使用了递归，函数式语言的运行速度比较慢，这是它长期不能在业界推广的主要原因。</p><h4 id="5-引用透明"><a class="markdownIt-Anchor" href="#5-引用透明"></a> ⑤ 引用透明</h4><p>引用透明（Referential transparency），指的是函数的运行不依赖于外部变量或&quot;状态&quot;，只依赖于输入的参数，任何时候只要参数相同，引用函数所得到的返回值总是相同的。</p><p>有了前面的第三点和第四点，这点是很显然的。其他类型的语言，函数的返回值往往与系统状态有关，不同的状态之下，返回值是不一样的。这就叫&quot;引用不透明&quot;，很不利于观察和理解程序的行为。</p><h3 id="413-好处"><a class="markdownIt-Anchor" href="#413-好处"></a> 4.1.3 好处</h3><p>函数式编程到底有什么好处，为什么会变得越来越流行？</p><h4 id="1-代码简洁开发快速"><a class="markdownIt-Anchor" href="#1-代码简洁开发快速"></a> ① 代码简洁，开发快速</h4><p>函数式编程大量使用函数，减少了代码的重复，因此程序比较短，开发速度较快。</p><h4 id="2-接近自然语言易于理解"><a class="markdownIt-Anchor" href="#2-接近自然语言易于理解"></a> ② 接近自然语言，易于理解</h4><p>函数式编程的自由度很高，可以写出很接近自然语言的代码。</p><p>前文曾经将表达式 (1 + 2) * 3 - 4，写成函数式语言：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subtract(multiply(add(1,2), 3), 4)</span><br></pre></td></tr></table></figure><p>对它进行变形，不难得到另一种写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add(1,2).multiply(3).subtract(4)</span><br></pre></td></tr></table></figure><p>这基本就是自然语言的表达了。再看下面的代码，大家应该一眼就能明白它的意思吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">merge([1,2],[3,4]).sort().search(&quot;2&quot;)</span><br></pre></td></tr></table></figure><p>因此，函数式编程的代码更容易理解。</p><h4 id="3-更方便的代码管理"><a class="markdownIt-Anchor" href="#3-更方便的代码管理"></a> ③ 更方便的代码管理</h4><p>函数式编程不依赖、也不会改变外界的状态，只要给定输入参数，返回的结果必定相同。因此，每一个函数都可以被看做独立单元，很有利于进行单元测试（unit testing）和除错（debugging），以及模块化组合。</p><h4 id="4-易于并发编程"><a class="markdownIt-Anchor" href="#4-易于并发编程"></a> ④ 易于&quot;并发编程&quot;</h4><p>函数式编程不需要考虑&quot;死锁&quot;（deadlock），因为它不修改变量，所以根本不存在&quot;锁&quot;线程的问题。不必担心一个线程的数据，被另一个线程修改，所以可以很放心地把工作分摊到多个线程，部署&quot;并发编程&quot;（concurrency）。</p><p>请看下面的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var s1 &#x3D; Op1();</span><br><span class="line">var s2 &#x3D; Op2();</span><br><span class="line">var s3 &#x3D; concat(s1, s2);</span><br></pre></td></tr></table></figure><p>由于 s1 和 s2 互不干扰，不会修改变量，谁先执行是无所谓的，所以可以放心地增加线程，把它们分配在两个线程上完成。其他类型的语言就做不到这一点，因为 s1 可能会修改系统状态，而 s2 可能会用到这些状态，所以必须保证 s2 在 s1 之后运行，自然也就不能部署到其他线程上了。</p><p>多核 CPU 是将来的潮流，所以函数式编程的这个特性非常重要。</p><h4 id="5-代码的热升级"><a class="markdownIt-Anchor" href="#5-代码的热升级"></a> ⑤ 代码的热升级</h4><p>函数式编程没有副作用，只要保证接口不变，内部实现是外部无关的。所以，可以在运行状态下直接升级代码，不需要重启，也不需要停机。<a href="http://en.wikipedia.org/wiki/Erlang_(programming_language)" target="_blank" rel="noopener">Erlang</a> 语言早就证明了这一点，它是瑞典爱立信公司为了管理电话系统而开发的，电话系统的升级当然是不能停机的。</p><blockquote><p>下面进行具体函数具体示例介绍：</p></blockquote><h2 id="42-高阶函数"><a class="markdownIt-Anchor" href="#42-高阶函数"></a> 4.2 高阶函数</h2><p>高阶函数英文叫 Higher-order function。什么是高阶函数？我们以实际代码为例子，一步一步深入概念。</p><p><strong>（1）变量可以指向函数</strong></p><p>以 Python 内置的求绝对值的函数<code>abs()</code>为例，调用该函数用以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abs(<span class="number">-10</span>) <span class="comment"># 10</span></span><br></pre></td></tr></table></figure><p>但是，如果只写<code>abs</code>呢？</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200717093944.png" alt="函数" /></p><p>可见，<code>abs(-10)</code>是函数调用，而<code>abs</code>是函数本身。</p><p>要获得函数调用结果，我们可以把结果赋值给变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = abs(<span class="number">-10</span>)</span><br><span class="line">x <span class="comment"># 10</span></span><br></pre></td></tr></table></figure><p>但是，如果把函数本身赋值给变量呢？</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200717102556.png" alt="image-20200717102554966" /></p><p>结论：函数本身也可以赋值给变量，即：变量可以指向函数。</p><p>如果一个变量指向了一个函数，那么，可否通过该变量来调用这个函数？用代码验证一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f = abs</span><br><span class="line">f(<span class="number">10</span>) <span class="comment"># 10</span></span><br></pre></td></tr></table></figure><p>成功！说明变量<code>f</code>现在已经指向了<code>abs</code>函数本身。直接调用<code>abs()</code>函数和调用变量<code>f()</code>完全相同。</p><p><strong>（2）函数名也是变量</strong></p><p>那么函数名是什么呢？函数名其实就是指向函数的变量！对于<code>abs()</code>这个函数，完全可以把函数名<code>abs</code>看成变量，它指向一个可以计算绝对值的函数！</p><p>如果把<code>abs</code>指向其他对象，会有什么情况发生？</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200717103810.png" alt="报错" /></p><p>把<code>abs</code>指向<code>10</code>后，就无法通过<code>abs(-10)</code>调用该函数了！因为<code>abs</code>这个变量已经不指向求绝对值函数而是指向一个整数<code>10</code>！</p><p>当然实际代码绝对不能这么写，这里是为了说明函数名也是变量。要恢复<code>abs</code>函数，请重启 Python 交互环境。</p><p>注：由于<code>abs</code>函数实际上是定义在<code>import builtins</code>模块中的，所以要让修改<code>abs</code>变量的指向在其它模块也生效，要用<code>import builtins; builtins.abs = 10</code>。</p><p><strong>（3）传入函数</strong></p><p>既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。</p><p>一个最简单的高阶函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y, f)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> f(x) + f(y)</span><br></pre></td></tr></table></figure><p>当我们调用<code>add(-5, 6, abs)</code>时，参数<code>x</code>，<code>y</code>和<code>f</code>分别接收<code>-5</code>，<code>6</code>和<code>abs</code>，根据函数定义，我们可以推导计算过程为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x &#x3D; -5</span><br><span class="line">y &#x3D; 6</span><br><span class="line">f &#x3D; abs</span><br><span class="line">f(x) + f(y) &#x3D;&#x3D;&gt; abs(-5) + abs(6) &#x3D;&#x3D;&gt; 11</span><br><span class="line">return 11</span><br></pre></td></tr></table></figure><p>验证一下：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200717104540.png" alt="效果图" /></p><p>👕 编写高阶函数，就是让函数的参数能够接收别的函数。</p><blockquote><p>小结：</p></blockquote><p>把函数作为参数传入，这样的函数称为高阶函数，函数式编程就是指这种高度抽象的编程范式。</p><h3 id="421-mapreduce"><a class="markdownIt-Anchor" href="#421-mapreduce"></a> 4.2.1 map/reduce</h3><p>Python 内建了<code>map()</code>和<code>reduce()</code>函数。</p><p>如果你读过 Google 的那篇大名鼎鼎的论文“<a href="http://research.google.com/archive/mapreduce.html" target="_blank" rel="noopener">MapReduce: Simplified Data Processing on Large Clusters</a>”，你就能大概明白 map/reduce 的概念。</p><h4 id="1-map"><a class="markdownIt-Anchor" href="#1-map"></a> ① map</h4><p>我们先看 map。<code>map()</code>函数接收两个参数，一个是函数，一个是<code>Iterable</code>，<code>map</code>将传入的函数依次作用到序列的每个元素，并把结果作为新的<code>Iterator</code>返回。</p><p>举例说明，比如我们有一个函数 $ f(x)=x^2$，要把这个函数作用在一个 list <code>[1, 2, 3, 4, 5, 6, 7, 8, 9]</code>上，就可以用<code>map()</code>实现如下：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200717105309.png" alt="image-20200717105308037" /></p><p>现在，我们用 Python 代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line">r = map(f, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line">list(r)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200717105515.png" alt="image-20200717105513962" /></p><p><code>map()</code>传入的第一个参数是<code>f</code>，即函数对象本身。由于结果<code>r</code>是一个<code>Iterator</code>，<code>Iterator</code>是惰性序列，因此通过<code>list()</code>函数让它把整个序列都计算出来并返回一个list。</p><p>你可能会想，不需要<code>map()</code>函数，写一个循环，也可以计算出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">L = []</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]:</span><br><span class="line">    L.append(f(n))</span><br><span class="line">print(L)</span><br></pre></td></tr></table></figure><p>的确可以，但是，从上面的循环代码，能一眼看明白“把 f(x) 作用在 list 的每一个元素并把结果生成一个新的  list”吗？</p><p>所以，<code>map()</code>作为高阶函数，事实上它把运算规则抽象了，因此，我们不但可以计算简单的 $ f(x)=x^2$，还可以计算任意复杂的函数，比如，把这个 list 所有数字转为字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list(map(str, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]))</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200717110351.png" alt="image-20200717110350309" /></p><p>只需要一行代码。</p><h4 id="2-reduce"><a class="markdownIt-Anchor" href="#2-reduce"></a> ② reduce</h4><p>再看<code>reduce</code>的用法。<code>reduce</code>把一个函数作用在一个序列<code>[x1, x2, x3, ...]</code>上，这个函数必须接收两个参数，<code>reduce</code>把结果继续和序列的下一个元素做累积计算，其效果就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)</span><br></pre></td></tr></table></figure><p>比方说对一个序列求和，就可以用<code>reduce</code>实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">reduce(add, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]) <span class="comment"># 25</span></span><br></pre></td></tr></table></figure><p>当然求和运算可以直接用 Python 内建函数<code>sum()</code>，没必要动用<code>reduce</code>。</p><p>但是如果要把序列<code>[1, 3, 5, 7, 9]</code>变换成整数<code>13579</code>，<code>reduce</code>就可以派上用场：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">10</span> + y</span><br><span class="line">reduce(fn, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]) <span class="comment"># 13579</span></span><br></pre></td></tr></table></figure><p>这个例子本身没多大用处，但是，如果考虑到字符串<code>str</code>也是一个序列，对上面的例子稍加改动，配合<code>map()</code>，我们就可以写出把<code>str</code>转换为<code>int</code>的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">10</span> + y</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">char2num</span><span class="params">(s)</span>:</span></span><br><span class="line">    digits = &#123;<span class="string">'0'</span>: <span class="number">0</span>, <span class="string">'1'</span>: <span class="number">1</span>, <span class="string">'2'</span>: <span class="number">2</span>, <span class="string">'3'</span>: <span class="number">3</span>, <span class="string">'4'</span>: <span class="number">4</span>, <span class="string">'5'</span>: <span class="number">5</span>, <span class="string">'6'</span>: <span class="number">6</span>, <span class="string">'7'</span>: <span class="number">7</span>, <span class="string">'8'</span>: <span class="number">8</span>, <span class="string">'9'</span>: <span class="number">9</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> digits[s]</span><br><span class="line">reduce(fn, map(char2num, <span class="string">'13579'</span>)) <span class="comment"># 13579</span></span><br></pre></td></tr></table></figure><p>整理成一个<code>str2int</code>的函数就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">DIGITS = &#123;<span class="string">'0'</span>: <span class="number">0</span>, <span class="string">'1'</span>: <span class="number">1</span>, <span class="string">'2'</span>: <span class="number">2</span>, <span class="string">'3'</span>: <span class="number">3</span>, <span class="string">'4'</span>: <span class="number">4</span>, <span class="string">'5'</span>: <span class="number">5</span>, <span class="string">'6'</span>: <span class="number">6</span>, <span class="string">'7'</span>: <span class="number">7</span>, <span class="string">'8'</span>: <span class="number">8</span>, <span class="string">'9'</span>: <span class="number">9</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str2int</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(x, y)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> x * <span class="number">10</span> + y</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">char2num</span><span class="params">(s)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> DIGITS[s]</span><br><span class="line">    <span class="keyword">return</span> reduce(fn, map(char2num, s))</span><br></pre></td></tr></table></figure><p>还可以用 lambda 函数进一步简化成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">DIGITS = &#123;<span class="string">'0'</span>: <span class="number">0</span>, <span class="string">'1'</span>: <span class="number">1</span>, <span class="string">'2'</span>: <span class="number">2</span>, <span class="string">'3'</span>: <span class="number">3</span>, <span class="string">'4'</span>: <span class="number">4</span>, <span class="string">'5'</span>: <span class="number">5</span>, <span class="string">'6'</span>: <span class="number">6</span>, <span class="string">'7'</span>: <span class="number">7</span>, <span class="string">'8'</span>: <span class="number">8</span>, <span class="string">'9'</span>: <span class="number">9</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">char2num</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> DIGITS[s]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str2int</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x, y: x * <span class="number">10</span> + y, map(char2num, s))</span><br></pre></td></tr></table></figure><p>也就是说，假设 Python 没有提供<code>int()</code>函数，你完全可以自己写一个把字符串转化为整数的函数，而且只需要几行代码！</p><blockquote><p>练习题：</p></blockquote><p>【第一题】利用<code>map()</code>函数，把用户输入的不规范的英文名字，变为首字母大写，其他小写的规范名字。输入：<code>['adam', 'LISA', 'barT']</code>，输出：<code>['Adam', 'Lisa', 'Bart']</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalize</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> name[<span class="number">0</span>].upper() + name[<span class="number">1</span>:].lower()</span><br></pre></td></tr></table></figure><p>或者也挺好：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalize</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> name.title()  <span class="comment">#title()函数 首字母大写  其他字母小写</span></span><br></pre></td></tr></table></figure><p>或者也挺好：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalize</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> name.capitalize()</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试:</span></span><br><span class="line">L1 = [<span class="string">'adam'</span>, <span class="string">'LISA'</span>, <span class="string">'barT'</span>]</span><br><span class="line">L2 = list(map(normalize, L1))</span><br><span class="line">print(L2)</span><br></pre></td></tr></table></figure><p>【第二题】Python 提供的<code>sum()</code>函数可以接受一个 list 并求和，请编写一个<code>prod()</code>函数，可以接受一个 list 并利用<code>reduce()</code>求积：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prod</span><span class="params">(L)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x, y: x * y, L)</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'3 * 5 * 7 * 9 ='</span>, prod([<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]))</span><br><span class="line"><span class="keyword">if</span> prod([<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]) == <span class="number">945</span>:</span><br><span class="line">    print(<span class="string">'测试成功!'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'测试失败!'</span>)</span><br></pre></td></tr></table></figure><p>【第三题】利用<code>map</code>和<code>reduce</code>编写一个<code>str2float</code>函数，把字符串<code>'123.456'</code>转换成浮点数<code>123.456</code>：</p><p>法一：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str2float</span><span class="params">(s)</span>:</span></span><br><span class="line">    digits = &#123;<span class="string">'0'</span>: <span class="number">0</span>, <span class="string">'1'</span>: <span class="number">1</span>, <span class="string">'2'</span>: <span class="number">2</span>, <span class="string">'3'</span>: <span class="number">3</span>, <span class="string">'4'</span>: <span class="number">4</span>, <span class="string">'5'</span>: <span class="number">5</span>, <span class="string">'6'</span>: <span class="number">6</span>, <span class="string">'7'</span>: <span class="number">7</span>, <span class="string">'8'</span>: <span class="number">8</span>, <span class="string">'9'</span>: <span class="number">9</span>&#125;    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">char2num</span><span class="params">(c)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> digits[c]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(x, y)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> x * <span class="number">10</span> + y</span><br><span class="line">    pos = s.find(<span class="string">'.'</span>)</span><br><span class="line">    <span class="keyword">if</span> pos &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> (reduce(fn, map(char2num, s[:pos])) + reduce(fn, map(char2num, s[pos + <span class="number">1</span>:])) * (<span class="number">10</span> ** -len(s[pos + <span class="number">1</span>:]))) </span><br><span class="line">    <span class="keyword">return</span> reduce(fn, map(char2num, s))</span><br></pre></td></tr></table></figure><p>法二：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">DIGITS = &#123;<span class="string">'0'</span>:<span class="number">0</span>, <span class="string">'1'</span>:<span class="number">1</span>, <span class="string">'2'</span>:<span class="number">2</span>, <span class="string">'3'</span>:<span class="number">3</span>, <span class="string">'4'</span>:<span class="number">4</span>, <span class="string">'5'</span>:<span class="number">5</span>, <span class="string">'6'</span>:<span class="number">6</span>, <span class="string">'7'</span>:<span class="number">7</span>, <span class="string">'8'</span>:<span class="number">8</span>, <span class="string">'9'</span>:<span class="number">9</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str2float</span><span class="params">(s)</span>:</span>   </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">str2num</span><span class="params">(s)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> DIGITS[s]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(x, y)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> x * <span class="number">10</span> + y</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'.'</span> <span class="keyword">in</span> s:</span><br><span class="line">        nPos = s.find(<span class="string">'.'</span>)</span><br><span class="line">        s1 = s[:nPos]</span><br><span class="line">        s2 = s[nPos+<span class="number">1</span>:]</span><br><span class="line">        n1 = reduce(fn, map(str2num, s1))</span><br><span class="line">        n2 = reduce(fn, map(str2num, s2))</span><br><span class="line">        <span class="keyword">return</span> n1 + <span class="number">0.1</span> ** len(s2) * n2</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> ruduce(fn, map(str2num, s))</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'str2float(\'123.456\') ='</span>, str2float(<span class="string">'123.456'</span>))</span><br><span class="line"><span class="keyword">if</span> abs(str2float(<span class="string">'123.456'</span>) - <span class="number">123.456</span>) &lt; <span class="number">0.00001</span>:</span><br><span class="line">    print(<span class="string">'测试成功!'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'测试失败!'</span>)</span><br></pre></td></tr></table></figure><h3 id="422-filter"><a class="markdownIt-Anchor" href="#422-filter"></a> 4.2.2 filter</h3><p>Python 内建的<code>filter()</code>函数用于过滤序列。</p><p>和<code>map()</code>类似，<code>filter()</code>也接收一个函数和一个序列。和<code>map()</code>不同的是，<code>filter()</code>把传入的函数依次作用于每个元素，然后根据返回值是<code>True</code>还是<code>False</code>决定保留还是丢弃该元素。</p><p>例如，在一个 list 中，删掉偶数，只保留奇数，可以这么写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_odd</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">list(filter(is_odd, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">15</span>]))</span><br><span class="line"><span class="comment"># 结果: [1, 5, 9, 15]</span></span><br></pre></td></tr></table></figure><p>把一个序列中的空字符串删掉，可以这么写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">not_empty</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> s <span class="keyword">and</span> s.strip()</span><br><span class="line"></span><br><span class="line">list(filter(not_empty, [<span class="string">'A'</span>, <span class="string">''</span>, <span class="string">'B'</span>, <span class="literal">None</span>, <span class="string">'C'</span>, <span class="string">'  '</span>]))</span><br><span class="line"><span class="comment"># 结果: ['A', 'B', 'C']</span></span><br></pre></td></tr></table></figure><p>可见用<code>filter()</code>这个高阶函数，关键在于正确实现一个“筛选”函数。</p><p>注意到<code>filter()</code>函数返回的是一个<code>Iterator</code>，也就是一个惰性序列，所以要强迫<code>filter()</code>完成计算结果，需要用<code>list()</code>函数获得所有结果并返回list。</p><h4 id="1-用-filter-求素数"><a class="markdownIt-Anchor" href="#1-用-filter-求素数"></a> ① 用 filter 求素数</h4><p>计算<a href="http://baike.baidu.com/view/10626.htm" target="_blank" rel="noopener">素数</a>的一个方法是<a href="http://baike.baidu.com/view/3784258.htm" target="_blank" rel="noopener">埃氏筛法</a>，它的算法理解起来非常简单：</p><p>首先，列出从<code>2</code>开始的所有自然数，构造一个序列：</p><p>2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, …</p><p>取序列的第一个数<code>2</code>，它一定是素数，然后用<code>2</code>把序列的<code>2</code>的倍数筛掉：</p><p>3, <s>4</s>, 5, <s>6</s>, 7, <s>8</s>, 9, <s>10</s>, 11, <s>12</s>, 13, <s>14</s>, 15, <s>16</s>, 17, <s>18</s>, 19, <s>20</s>, …</p><p>取新序列的第一个数<code>3</code>，它一定是素数，然后用<code>3</code>把序列的<code>3</code>的倍数筛掉：</p><p>5, <s>6</s>, 7, <s>8</s>, <s>9</s>, <s>10</s>, 11, <s>12</s>, 13, <s>14</s>, <s>15</s>, <s>16</s>, 17, <s>18</s>, 19, <s>20</s>, …</p><p>取新序列的第一个数<code>5</code>，然后用<code>5</code>把序列的<code>5</code>的倍数筛掉：</p><p>7, <s>8</s>, <s>9</s>, <s>10</s>, 11, <s>12</s>, 13, <s>14</s>, <s>15</s>, <s>16</s>, 17, <s>18</s>, 19, <s>20</s>, …</p><p>不断筛下去，就可以得到所有的素数。</p><p>用 Python 来实现这个算法，可以先构造一个从<code>3</code>开始的奇数序列：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_odd_iter</span><span class="params">()</span>:</span></span><br><span class="line">    n = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        n = n + <span class="number">2</span></span><br><span class="line">        <span class="keyword">yield</span> n</span><br></pre></td></tr></table></figure><p>注意这是一个生成器，并且是一个无限序列。</p><p>然后定义一个筛选函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_not_divisible</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: x % n &gt; <span class="number">0</span></span><br></pre></td></tr></table></figure><p>最后，定义一个生成器，不断返回下一个素数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">primes</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    it = _odd_iter() <span class="comment"># 初始序列</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        n = next(it) <span class="comment"># 返回序列的第一个数</span></span><br><span class="line">        <span class="keyword">yield</span> n</span><br><span class="line">        it = filter(_not_divisible(n), it) <span class="comment"># 构造新序列</span></span><br></pre></td></tr></table></figure><p>这个生成器先返回第一个素数<code>2</code>，然后，利用<code>filter()</code>不断产生筛选后的新的序列。</p><p>由于<code>primes()</code>也是一个无限序列，所以调用时需要设置一个退出循环的条件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印1000以内的素数:</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> primes():</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">1000</span>:</span><br><span class="line">        print(n)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>注意到<code>Iterator</code>是惰性计算的序列，所以我们可以用 Python 表示“全体自然数”，“全体素数”这样的序列，而代码非常简洁。</p><blockquote><p>练习题：</p></blockquote><p>回数是指从左向右读和从右向左读都是一样的数，例如<code>12321</code>，<code>909</code>。请利用<code>filter()</code>筛选出回数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_palindrome</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> str(n) == str(n)[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试:</span></span><br><span class="line">output = filter(is_palindrome, range(<span class="number">1</span>, <span class="number">1000</span>))</span><br><span class="line">print(<span class="string">'1~1000:'</span>, list(output))</span><br><span class="line"><span class="keyword">if</span> list(filter(is_palindrome, range(<span class="number">1</span>, <span class="number">200</span>))) == [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>, <span class="number">77</span>, <span class="number">88</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">111</span>, <span class="number">121</span>, <span class="number">131</span>, <span class="number">141</span>, <span class="number">151</span>, <span class="number">161</span>, <span class="number">171</span>, <span class="number">181</span>, <span class="number">191</span>]:</span><br><span class="line">    print(<span class="string">'测试成功!'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'测试失败!'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>小结：</p></blockquote><p><code>filter()</code>的作用是从一个序列中筛出符合条件的元素。由于<code>filter()</code>使用了惰性计算，所以只有在取<code>filter()</code>结果的时候，才会真正筛选并每次返回下一个筛出的元素。</p><h3 id="423-sorted"><a class="markdownIt-Anchor" href="#423-sorted"></a> 4.2.3 sorted</h3><h4 id="1-排序算法"><a class="markdownIt-Anchor" href="#1-排序算法"></a> ① 排序算法</h4><p>排序也是在程序中经常用到的算法。无论使用冒泡排序还是快速排序，排序的核心是比较两个元素的大小。如果是数字，我们可以直接比较，但如果是字符串或者两个 dict呢？直接比较数学上的大小是没有意义的，因此，比较的过程必须通过函数抽象出来。</p><p>Python 内置的<code>sorted()</code>函数就可以对 list 进行排序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sorted([<span class="number">36</span>, <span class="number">5</span>, <span class="number">-12</span>, <span class="number">9</span>, <span class="number">-21</span>])</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200717175610.png" alt="image-20200717175608860" /></p><p>此外，<code>sorted()</code>函数也是一个高阶函数，它还可以接收一个<code>key</code>函数来实现自定义的排序，例如按绝对值大小排序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sorted([<span class="number">36</span>, <span class="number">5</span>, <span class="number">-12</span>, <span class="number">9</span>, <span class="number">-21</span>], key=abs)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200717175739.png" alt="image-20200717175738112" /></p><p>key 指定的函数将作用于 list 的每一个元素上，并根据 key 函数返回的结果进行排序。对比原始的 list 和经过<code>key=abs</code>处理过的 list：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="number">36</span>, <span class="number">5</span>, <span class="number">-12</span>, <span class="number">9</span>, <span class="number">-21</span>]</span><br><span class="line"></span><br><span class="line">keys = [<span class="number">36</span>, <span class="number">5</span>,  <span class="number">12</span>, <span class="number">9</span>,  <span class="number">21</span>]</span><br></pre></td></tr></table></figure><p>然后<code>sorted()</code>函数按照 keys 进行排序，并按照对应关系返回 list 相应的元素：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200717180026.png" alt="image-20200717180025283" /></p><p>我们再看一个字符串排序的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sorted([<span class="string">'bob'</span>, <span class="string">'about'</span>, <span class="string">'Zoo'</span>, <span class="string">'Credit'</span>])</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200717180117.png" alt="image-20200717180116413" /></p><p>默认情况下，对字符串排序，是按照 ASCII 的大小比较的，由于<code>'Z' &lt; 'a'</code>，结果，大写字母<code>Z</code>会排在小写字母<code>a</code>的前面。</p><p>现在，我们提出排序应该忽略大小写，按照字母序排序。要实现这个算法，不必对现有代码大加改动，只要我们能用一个 key 函数把字符串映射为忽略大小写排序即可。忽略大小写来比较两个字符串，实际上就是先把字符串都变成大写（或者都变成小写），再比较。</p><p>这样，我们给<code>sorted</code>传入 key 函数，即可实现忽略大小写的排序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sorted([<span class="string">'bob'</span>, <span class="string">'about'</span>, <span class="string">'Zoo'</span>, <span class="string">'Credit'</span>], key=str.lower)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200717180306.png" alt="image-20200717180305192" /></p><p>要进行反向排序，不必改动 key 函数，可以传入第三个参数<code>reverse=True</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sorted([<span class="string">'bob'</span>, <span class="string">'about'</span>, <span class="string">'Zoo'</span>, <span class="string">'Credit'</span>], key=str.lower, reverse=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200717180421.png" alt="image-20200717180420727" /></p><p>从上述例子可以看出，高阶函数的抽象能力是非常强大的，而且，核心代码可以保持得非常简洁。</p><blockquote><p>小结：</p></blockquote><p><code>sorted()</code>也是一个高阶函数。用<code>sorted()</code>排序的关键在于实现一个映射函数。</p><blockquote><p>练习题：</p></blockquote><p>假设我们用一组 tuple 表示学生名字和成绩：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L = [(<span class="string">'Bob'</span>, <span class="number">75</span>), (<span class="string">'Adam'</span>, <span class="number">92</span>), (<span class="string">'Bart'</span>, <span class="number">66</span>), (<span class="string">'Lisa'</span>, <span class="number">88</span>)]</span><br></pre></td></tr></table></figure><p>请用<code>sorted()</code>对上述列表分别按名字升序排序，再按成绩从高到低排序。</p><p><strong>（1）按名字升序排序</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">L = [(<span class="string">'Bob'</span>, <span class="number">75</span>), (<span class="string">'Adam'</span>, <span class="number">92</span>), (<span class="string">'Bart'</span>, <span class="number">66</span>), (<span class="string">'Lisa'</span>, <span class="number">88</span>)]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">by_name</span><span class="params">(t)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> t[<span class="number">0</span>]</span><br><span class="line">L2 = sorted(L, key=by_name)</span><br><span class="line">print(L2)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200717205003.png" alt="image-20200717205002143" /></p><p><strong>（2）按成绩从高到低排序</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">L = [(<span class="string">'Bob'</span>, <span class="number">75</span>), (<span class="string">'Adam'</span>, <span class="number">92</span>), (<span class="string">'Bart'</span>, <span class="number">66</span>), (<span class="string">'Lisa'</span>, <span class="number">88</span>)]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">by_name</span><span class="params">(t)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> -t[<span class="number">1</span>]</span><br><span class="line">L2 = sorted(L, key=by_name)</span><br><span class="line">print(L2)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200717205111.png" alt="image-20200717205111010" /></p><h2 id="43-返回函数"><a class="markdownIt-Anchor" href="#43-返回函数"></a> 4.3 返回函数</h2><h3 id="431-函数作为返回值"><a class="markdownIt-Anchor" href="#431-函数作为返回值"></a> 4.3.1 函数作为返回值</h3><p>高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回。</p><p>我们来实现一个可变参数的求和。通常情况下，求和的函数是这样定义的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_sum</span><span class="params">(*args)</span>:</span></span><br><span class="line">    ax = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> args:</span><br><span class="line">        ax = ax + n</span><br><span class="line">    <span class="keyword">return</span> ax</span><br></pre></td></tr></table></figure><p>但是，如果不需要立刻求和，而是在后面的代码中，根据需要再计算怎么办？可以不返回求和的结果，而是返回求和的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lazy_sum</span><span class="params">(*args)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">()</span>:</span></span><br><span class="line">        ax = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> args:</span><br><span class="line">            ax = ax + n</span><br><span class="line">        <span class="keyword">return</span> ax</span><br><span class="line">    <span class="keyword">return</span> sum</span><br></pre></td></tr></table></figure><p>当我们调用<code>lazy_sum()</code>时，返回的并不是求和结果，而是求和函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = lazy_sum(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f</span><br><span class="line">&lt;function lazy_sum.&lt;locals&gt;.sum at <span class="number">0x101c6ed90</span>&gt;</span><br></pre></td></tr></table></figure><p>调用函数<code>f</code>时，才真正计算求和的结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f()</span><br><span class="line"><span class="number">25</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200718150943.png" alt="image-20200718150942158" /></p><p>在这个例子中，我们在函数<code>lazy_sum</code>中又定义了函数<code>sum</code>，并且，内部函数<code>sum</code>可以引用外部函数<code>lazy_sum</code>的参数和局部变量，当<code>lazy_sum</code>返回函数<code>sum</code>时，相关参数和变量都保存在返回的函数中，这种称为“闭包（Closure）”的程序结构拥有极大的威力。</p><p>请再注意一点，当我们调用<code>lazy_sum()</code>时，每次调用都会返回一个新的函数，即使传入相同的参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1 = lazy_sum(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f2 = lazy_sum(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1==f2</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1()==f2()</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p><code>f1()</code>和<code>f2()</code>的调用结果互不影响。</p><h3 id="432-闭包"><a class="markdownIt-Anchor" href="#432-闭包"></a> 4.3.2 闭包</h3><p>注意到返回的函数在其定义内部引用了局部变量<code>args</code>，所以，当一个函数返回了一个函数后，其内部的局部变量还被新函数引用，所以，闭包用起来简单，实现起来可不容易。</p><p>另一个需要注意的问题是，返回的函数并没有立刻执行，而是直到调用了<code>f()</code>才执行。我们来看一个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">()</span>:</span></span><br><span class="line">    fs = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></span><br><span class="line">             <span class="keyword">return</span> i*i</span><br><span class="line">        fs.append(f)</span><br><span class="line">    <span class="keyword">return</span> fs</span><br><span class="line"></span><br><span class="line">f1, f2, f3 = count()</span><br></pre></td></tr></table></figure><p>在上面的例子中，每次循环，都创建了一个新的函数，然后，把创建的 3 个函数都返回了。</p><p>你可能认为调用<code>f1()</code>，<code>f2()</code>和<code>f3()</code>结果应该是<code>1</code>，<code>4</code>，<code>9</code>，但实际结果是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1()</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f2()</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f3()</span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><p>全部都是<code>9</code>！原因就在于返回的函数引用了变量<code>i</code>，但它并非立刻执行。等到 3 个函数都返回时，它们所引用的变量<code>i</code>已经变成了<code>3</code>，因此最终结果为<code>9</code>。</p><p>!&gt; 返回闭包时牢记一点：返回函数不要引用任何循环变量，或者后续会发生变化的变量。</p><p>如果一定要引用循环变量怎么办？方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到函数参数的值不变：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(j)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">()</span>:</span></span><br><span class="line">            <span class="keyword">return</span> j*j</span><br><span class="line">        <span class="keyword">return</span> g</span><br><span class="line">    fs = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">        fs.append(f(i)) <span class="comment"># f(i)立刻被执行，因此i的当前值被传入f()</span></span><br><span class="line">    <span class="keyword">return</span> fs</span><br></pre></td></tr></table></figure><p>再看看结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1, f2, f3 = count()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1()</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f2()</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f3()</span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><p>缺点是代码较长，可利用 lambda 函数缩短代码。</p><blockquote><p>练习题：</p></blockquote><p>利用闭包返回一个计数器函数，每次调用它返回递增整数：</p><ul><li>法一：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createCounter</span><span class="params">()</span>:</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">counter</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> i  <span class="comment">#这句声明是闭包函数应用同名变量的重点。</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            i = i + <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">    <span class="keyword">return</span> counter</span><br></pre></td></tr></table></figure><ul><li>法二：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选择数值可变但是地址不变的变量类型——数组</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createCounter</span><span class="params">()</span>:</span></span><br><span class="line">    i = [<span class="number">0</span>] <span class="comment"># 初始化数组    </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">counter</span><span class="params">()</span>:</span></span><br><span class="line">        i[<span class="number">0</span>] += <span class="number">1</span> <span class="comment">#不修改数组， 尽修改数组中元素数值， 数组的地址不变        </span></span><br><span class="line">        <span class="keyword">return</span> i[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> counter</span><br></pre></td></tr></table></figure><ul><li>法三：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 也可以选择dict类型变量，与数组同理， 主要不改变变量引用地址即可</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createCounter</span><span class="params">()</span>:</span></span><br><span class="line">    i = &#123;<span class="string">'a'</span>:<span class="number">0</span>&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">counter</span><span class="params">()</span>:</span></span><br><span class="line">        i[<span class="string">'a'</span>] += <span class="number">1</span>        </span><br><span class="line">        <span class="keyword">return</span> i[<span class="string">'a'</span>]</span><br><span class="line">    <span class="keyword">return</span> counter</span><br></pre></td></tr></table></figure><ul><li>测试：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试:</span></span><br><span class="line">counterA = createCounter()</span><br><span class="line">print(counterA(), counterA(), counterA(), counterA(), counterA()) <span class="comment"># 1 2 3 4 5</span></span><br><span class="line">counterB = createCounter()</span><br><span class="line"><span class="keyword">if</span> [counterB(), counterB(), counterB(), counterB()] == [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]:</span><br><span class="line">    print(<span class="string">'测试通过!'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'测试失败!'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>小结：</p></blockquote><p>一个函数可以返回一个计算结果，也可以返回一个函数。</p><p>返回一个函数时，牢记该函数并未执行，返回函数中不要引用任何可能会变化的变量。</p><h2 id="44-匿名函数"><a class="markdownIt-Anchor" href="#44-匿名函数"></a> 4.4 匿名函数</h2><p>当我们在传入函数时，有些时候，不需要显式地定义函数，直接传入匿名函数更方便。</p><p>在 Python 中，对匿名函数提供了有限支持。还是以<code>map()</code>函数为例，计算 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">f(x)=x^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> 时，除了定义一个<code>f(x)</code>的函数外，还可以直接传入匿名函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list(map(<span class="keyword">lambda</span> x: x * x, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]))</span><br></pre></td></tr></table></figure><p>通过对比可以看出，匿名函数<code>lambda x: x * x</code>实际上就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * x</span><br></pre></td></tr></table></figure><p>关键字<code>lambda</code>表示匿名函数，冒号前面的<code>x</code>表示函数参数。</p><p>匿名函数有个限制，就是只能有一个表达式，不用写<code>return</code>，返回值就是该表达式的结果。</p><p>用匿名函数有个好处，因为函数没有名字，不必担心函数名冲突。此外，匿名函数也是一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="keyword">lambda</span> x: x * x</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f</span><br><span class="line">&lt;function &lt;<span class="keyword">lambda</span>&gt; at <span class="number">0x101c6ef28</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">5</span>)</span><br><span class="line"><span class="number">25</span></span><br></pre></td></tr></table></figure><p>同样，也可以把匿名函数作为返回值返回，比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span>: x * x + y * y</span><br></pre></td></tr></table></figure><blockquote><p>练习题：</p></blockquote><p>请用匿名函数改造下面的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_odd</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">L = list(filter(is_odd, range(<span class="number">1</span>, <span class="number">20</span>)))</span><br><span class="line">print(L)</span><br></pre></td></tr></table></figure><p>用匿名函数改造：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">L = list(filter(<span class="keyword">lambda</span> x: x %<span class="number">2</span> == <span class="number">1</span>, range(<span class="number">1</span>, <span class="number">20</span>)))</span><br><span class="line">print(L)</span><br></pre></td></tr></table></figure><p>那如果用列表生成式改造呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">L = [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">20</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">1</span>]</span><br><span class="line">print(L)</span><br></pre></td></tr></table></figure><blockquote><p>小结：</p></blockquote><p>Python 对匿名函数的支持有限，只有一些简单的情况下可以使用匿名函数。</p><h2 id="45-装饰器"><a class="markdownIt-Anchor" href="#45-装饰器"></a> 4.5 装饰器</h2><p>由于函数也是一个对象，而且函数对象可以被赋值给变量，所以，通过变量也能调用该函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'2020-07-19'</span>)</span><br><span class="line">f = now</span><br><span class="line">f() <span class="comment"># 结果：2020-07-19</span></span><br></pre></td></tr></table></figure><p>函数对象有一个<code>__name__</code>属性，可以拿到函数的名字：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>now.__name__</span><br><span class="line"><span class="string">'now'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.__name__</span><br><span class="line"><span class="string">'now'</span></span><br></pre></td></tr></table></figure><p>现在，假设我们要增强<code>now()</code>函数的功能，比如，在函数调用前后自动打印日志，但又不希望修改<code>now()</code>函数的定义，这种在代码运行期间动态增加功能的方式，称之为“装饰器”（Decorator）。</p><p>本质上，decorator 就是一个返回函数的高阶函数。所以，我们要定义一个能打印日志的 decorator，可以定义如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">        print(<span class="string">'call %s():'</span> % func.__name__)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><p>观察上面的<code>log</code>，因为它是一个 decorator，所以接受一个函数作为参数，并返回一个函数。我们要借助 Python 的 @ 语法，把 decorator 置于函数的定义处：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@log</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'2020-07-19'</span>)</span><br></pre></td></tr></table></figure><p>调用<code>now()</code>函数，不仅会运行<code>now()</code>函数本身，还会在运行<code>now()</code>函数前打印一行日志：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200719083113.png" alt="image-20200719083104800" /></p><p>把<code>@log</code>放到<code>now()</code>函数的定义处，相当于执行了语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">now = log(now)</span><br></pre></td></tr></table></figure><p>由于<code>log()</code>是一个 decorator，返回一个函数，所以，原来的<code>now()</code>函数仍然存在，只是现在同名的<code>now</code>变量指向了新的函数，于是调用<code>now()</code>将执行新函数，即在<code>log()</code>函数中返回的<code>wrapper()</code>函数。</p><p><code>wrapper()</code>函数的参数定义是<code>(*args, **kw)</code>，因此，<code>wrapper()</code>函数可以接受任意参数的调用。在<code>wrapper()</code>函数内，首先打印日志，再紧接着调用原始函数。</p><p>如果 decorator 本身需要传入参数，那就需要编写一个返回 decorator 的高阶函数，写出来会更复杂。比如，要自定义 log 的文本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(text)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">            print(<span class="string">'%s %s():'</span> % (text, func.__name__))</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br></pre></td></tr></table></figure><p>这个 3 层嵌套的 decorator 用法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@log('execute')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'2020-07-19'</span>)</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200719084715.png" alt="image-20200719084700178" /></p><p>和两层嵌套的 decorator 相比，3 层嵌套的效果是这样的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>now = log(<span class="string">'execute'</span>)(now)</span><br></pre></td></tr></table></figure><p>我们来剖析上面的语句，首先执行<code>log('execute')</code>，返回的是<code>decorator</code>函数，再调用返回的函数，参数是<code>now</code>函数，返回值最终是<code>wrapper</code>函数。</p><p>以上两种 decorator 的定义都没有问题，但还差最后一步。因为我们讲了函数也是对象，它有<code>__name__</code>等属性，但你去看经过 decorator 装饰之后的函数，它们的<code>__name__</code>已经从原来的<code>'now'</code>变成了<code>'wrapper'</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>now.__name__</span><br><span class="line"><span class="string">'wrapper'</span></span><br></pre></td></tr></table></figure><p>因为返回的那个<code>wrapper()</code>函数名字就是<code>'wrapper'</code>，所以，需要把原始函数的<code>__name__</code>等属性复制到<code>wrapper()</code>函数中，否则，有些依赖函数签名的代码执行就会出错。</p><p>不需要编写<code>wrapper.__name__ = func.__name__</code>这样的代码，Python 内置的<code>functools.wraps</code>就是干这个事的，所以，一个完整的 decorator 的写法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">    @functools.wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">        print(<span class="string">'call %s():'</span> % func.__name__)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><p>或者针对带参数的 decorator：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(text)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">        @functools.wraps(func)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">            print(<span class="string">'%s %s():'</span> % (text, func.__name__))</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br></pre></td></tr></table></figure><p><code>import functools</code>是导入<code>functools</code>模块。模块的概念稍候讲解。现在，只需记住在定义<code>wrapper()</code>的前面加上<code>@functools.wraps(func)</code>即可。</p><blockquote><p>练习题：</p></blockquote><p>请设计一个 decorator，它可作用于任何函数上，并打印该函数的执行时间：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time, functools</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">metric</span><span class="params">(fn)</span>:</span></span><br><span class="line"><span class="meta">    @functools.wraps(fn)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        e = fn(*args, **kw)</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        print(<span class="string">'%s executed in %s ms'</span> % (fn.__name__, end_time - start_time))</span><br><span class="line">        <span class="keyword">return</span> e</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试</span></span><br><span class="line"><span class="meta">@metric</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fast</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">0.0012</span>)</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line"></span><br><span class="line"><span class="meta">@metric</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">slow</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">0.1234</span>)</span><br><span class="line">    <span class="keyword">return</span> x * y * z;</span><br><span class="line"></span><br><span class="line">f = fast(<span class="number">11</span>, <span class="number">22</span>)</span><br><span class="line">s = slow(<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>)</span><br><span class="line"><span class="keyword">if</span> f != <span class="number">33</span>:</span><br><span class="line">    print(<span class="string">'测试失败!'</span>)</span><br><span class="line"><span class="keyword">elif</span> s != <span class="number">7986</span>:</span><br><span class="line">    print(<span class="string">'测试失败!'</span>)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200719091405.png" alt="image-20200719091357306" /></p><blockquote><p>小结：</p></blockquote><p>在面向对象（OOP）的设计模式中，decorator 被称为装饰模式。OOP 的装饰模式需要通过继承和组合来实现，而 Python 除了能支持 OOP 的 decorator 外，直接从语法层次支持 decorator。Python 的 decorator 可以用函数实现，也可以用类实现。</p><p>decorator 可以增强函数的功能，定义起来虽然有点复杂，但使用起来非常灵活和方便。</p><p>再思考一下能否写出一个<code>@log</code>的 decorator，使它既支持：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@log</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>又支持：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@log('execute')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>eg.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(text)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(text, str):</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">            @functools.wraps(func)</span></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">                print(<span class="string">'%s %s(): '</span> % (text, func.__name__))</span><br><span class="line">                <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">            <span class="keyword">return</span> wrapper</span><br><span class="line">        <span class="keyword">return</span> decorator</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">        print(<span class="string">'%s %s(): '</span> % (text, func.__name__))</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><h2 id="46-偏函数"><a class="markdownIt-Anchor" href="#46-偏函数"></a> 4.6 偏函数</h2><p>Python 的<code>functools</code>模块提供了很多有用的功能，其中一个就是偏函数（Partial function）。要注意，这里的偏函数和数学意义上的偏函数不一样。</p><p>在介绍函数参数的时候，我们讲到，通过设定参数的默认值，可以降低函数调用的难度。而偏函数也可以做到这一点。举例如下：</p><p><code>int()</code>函数可以把字符串转换为整数，当仅传入字符串时，<code>int()</code>函数默认按十进制转换：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'12345'</span>)</span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><p>但<code>int()</code>函数还提供额外的<code>base</code>参数，默认值为<code>10</code>。如果传入<code>base</code>参数，就可以做 N 进制的转换：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'12345'</span>, base=<span class="number">8</span>)</span><br><span class="line"><span class="number">5349</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'12345'</span>, <span class="number">16</span>)</span><br><span class="line"><span class="number">74565</span></span><br></pre></td></tr></table></figure><p>假设要转换大量的二进制字符串，每次都传入<code>int(x, base=2)</code>非常麻烦，于是，我们想到，可以定义一个<code>int2()</code>的函数，默认把<code>base=2</code>传进去：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">int2</span><span class="params">(x, base=<span class="number">2</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> int(x, base)</span><br></pre></td></tr></table></figure><p>这样，我们转换二进制就非常方便了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>int2(<span class="string">'1000000'</span>)</span><br><span class="line"><span class="number">64</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int2(<span class="string">'1010101'</span>)</span><br><span class="line"><span class="number">85</span></span><br></pre></td></tr></table></figure><p><code>functools.partial</code>就是帮助我们创建一个偏函数的，不需要我们自己定义<code>int2()</code>，可以直接使用下面的代码创建一个新的函数<code>int2</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> functools</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int2 = functools.partial(int, base=<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int2(<span class="string">'1000000'</span>)</span><br><span class="line"><span class="number">64</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int2(<span class="string">'1010101'</span>)</span><br><span class="line"><span class="number">85</span></span><br></pre></td></tr></table></figure><p>所以，简单总结<code>functools.partial</code>的作用就是，把一个函数的某些参数给固定住（也就是设置默认值），返回一个新的函数，调用这个新函数会更简单。</p><p>注意到上面的新的<code>int2</code>函数，仅仅是把<code>base</code>参数重新设定默认值为<code>2</code>，但也可以在函数调用时传入其他值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>int2(<span class="string">'1000000'</span>, base=<span class="number">10</span>)</span><br><span class="line"><span class="number">1000000</span></span><br></pre></td></tr></table></figure><p>最后，创建偏函数时，实际上可以接收函数对象、<code>*args</code>和<code>**kw</code>这 3 个参数，当传入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int2 = functools.partial(int, base=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>实际上固定了 int() 函数的关键字参数<code>base</code>，也就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int2(<span class="string">'10010'</span>)</span><br></pre></td></tr></table></figure><p>相当于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kw = &#123; <span class="string">'base'</span>: <span class="number">2</span> &#125;</span><br><span class="line">int(<span class="string">'10010'</span>, **kw)</span><br></pre></td></tr></table></figure><p>当传入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max2 = functools.partial(max, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>实际上会把<code>10</code>作为<code>*args</code>的一部分自动加到左边，也就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max2(<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)</span><br></pre></td></tr></table></figure><p>相当于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">args = (<span class="number">10</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)</span><br><span class="line">max(*args)</span><br></pre></td></tr></table></figure><p>结果为<code>10</code>。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200719101153.png" alt="image-20200719101140248" /></p><blockquote><p>小结：</p></blockquote><p>当函数的参数个数太多，需要简化时，使用<code>functools.partial</code>可以创建一个新的函数，这个新函数可以固定住原函数的部分参数，从而在调用时更简单。</p><h2 id="47-参考资料"><a class="markdownIt-Anchor" href="#47-参考资料"></a> 4.7 参考资料</h2><ul><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017328525009056" target="_blank" rel="noopener">廖雪峰 - Python 3.x - 函数式编程</a></li><li><a href="http://www.ruanyifeng.com/blog/2012/04/functional_programming.html" target="_blank" rel="noopener">阮一峰 - 函数式编程初探</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python/Python入门学习笔记/CH2-函数</title>
      <link href="/2020/08/15/Python/Python%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/CH2-%E5%87%BD%E6%95%B0/"/>
      <url>/2020/08/15/Python/Python%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/CH2-%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="第二章-函数"><a class="markdownIt-Anchor" href="#第二章-函数"></a> 第二章 函数</h1><p>我们知道圆的面积计算公式为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo>=</mo><mi>π</mi><msup><mi>r</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">S = πr^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><p>当我们知道半径<code>r</code>的值时，就可以根据公式计算出面积。</p><p>假设我们需要计算 3 个不同大小的圆的面积：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">r1 = <span class="number">12.34</span></span><br><span class="line">r2 = <span class="number">9.08</span></span><br><span class="line">r3 = <span class="number">73.1</span></span><br><span class="line">s1 = <span class="number">3.14</span> * r1 * r1</span><br><span class="line">s2 = <span class="number">3.14</span> * r2 * r2</span><br><span class="line">s3 = <span class="number">3.14</span> * r3 * r3</span><br></pre></td></tr></table></figure><p>当代码出现有规律的重复的时候，你就需要当心了，每次写<code>3.14 * x * x</code>不仅很麻烦，而且，如果要把<code>3.14</code>改成<code>3.14159265359</code>的时候，得全部替换。</p><p>有了函数，我们就不再每次写<code>s = 3.14 * x * x</code>，而是写成更有意义的函数调用<code>s = area_of_circle(x)</code>，而函数<code>area_of_circle</code>本身只需要写一次，就可以多次调用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area_of_circle</span><span class="params">(r)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> r&gt;<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3.14</span>*r**<span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">R=[<span class="number">12.34</span>,<span class="number">9.08</span>,<span class="number">73.1</span>]</span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> R:</span><br><span class="line">    s=area_of_circle(r)</span><br><span class="line">    print(s)</span><br></pre></td></tr></table></figure><p>基本上所有的高级语言都支持函数，Python 也不例外。Python 不但能非常灵活地定义函数，而且本身内置了很多有用的函数，可以直接调用。</p><p>!&gt; 注：抽象是数学中非常常见的概念，借助抽象，我们才能不关心底层的具体计算过程，而直接在更高的层次上思考问题。写计算机程序也是一样，函数就是最基本的一种代码抽象的方式。</p><h2 id="21-调用函数"><a class="markdownIt-Anchor" href="#21-调用函数"></a> 2.1 调用函数</h2><h3 id="211-内置函数"><a class="markdownIt-Anchor" href="#211-内置函数"></a> 2.1.1 内置函数</h3><p>Python 内置了很多有用的函数，我们可以直接调用。</p><p>要调用一个函数，需要知道函数的名称和参数，比如求绝对值的函数<code>abs</code>，只有一个参数。可以直接从 Python 的官方网站查看文档：</p><p><a href="https://docs.python.org/3/library/functions.html#abs" target="_blank" rel="noopener">https://docs.python.org/3/library/functions.html#abs</a></p><p>也可以在交互式命令行通过<code>help(abs)</code>查看<code>abs</code>函数的帮助信息。</p><p>调用<code>abs</code>函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(abs(<span class="number">-20</span>)) <span class="comment">#20</span></span><br><span class="line">print(abs(<span class="number">20</span>)) <span class="comment">#20</span></span><br></pre></td></tr></table></figure><p>调用函数的时候，如果传入的参数数量不对，会报<code>TypeError</code>的错误，并且 Python 会明确地告诉你：<code>abs()</code>有且仅有 1 个参数，但给出了两个：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(abs(<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>报错：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"E:/ML/PycharmProjects/HelloWorld/app.py"</span>, line <span class="number">11</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print(abs(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">TypeError: abs() takes exactly one argument (<span class="number">2</span> given)</span><br></pre></td></tr></table></figure><p>如果传入的参数数量是对的，但参数类型不能被函数所接受，也会报<code>TypeError</code>的错误，并且给出错误信息：<code>str</code>是错误的参数类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(abs(<span class="string">'a'</span>))</span><br></pre></td></tr></table></figure><p>报错：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"E:/ML/PycharmProjects/HelloWorld/app.py"</span>, line <span class="number">11</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print(abs(<span class="string">'a'</span>))</span><br><span class="line">TypeError: bad operand type <span class="keyword">for</span> abs(): <span class="string">'str'</span></span><br></pre></td></tr></table></figure><p>而<code>max</code>函数<code>max()</code>可以接收任意多个参数，并返回最大的那个：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(max(<span class="number">1</span>, <span class="number">2</span>)) <span class="comment"># 2</span></span><br><span class="line">print(max(<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">-5</span>)) <span class="comment"># 3</span></span><br></pre></td></tr></table></figure><h3 id="212-数据类型转换"><a class="markdownIt-Anchor" href="#212-数据类型转换"></a> 2.1.2 数据类型转换</h3><p>Python 内置的常用函数还包括数据类型转换函数：int 把其他数据类型转换为整数 / float / str / bool</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int(<span class="string">'123'</span>) <span class="comment"># 123</span></span><br><span class="line">int(<span class="number">12.34</span>) <span class="comment"># 12</span></span><br><span class="line">float(<span class="string">'12.34'</span>) <span class="comment"># 12.34</span></span><br><span class="line">str(<span class="number">1.23</span>) <span class="comment"># '1.23'</span></span><br><span class="line">str(<span class="number">100</span>) <span class="comment"># '100'</span></span><br><span class="line">bool(<span class="number">1</span>) <span class="comment"># True</span></span><br><span class="line">bool(<span class="string">''</span>) <span class="comment"># False</span></span><br></pre></td></tr></table></figure><p>函数名其实就是指向一个函数对象的引用，完全可以把函数名赋给一个变量，相当于给这个函数起了一个“别名”：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = abs <span class="comment"># 变量a指向abs函数</span></span><br><span class="line">a(<span class="number">-1</span>) <span class="comment"># 所以也可以通过a调用abs函数 输出：1</span></span><br></pre></td></tr></table></figure><blockquote><p>✏️ 练习题：</p></blockquote><p>请利用 Python 内置的<code>hex()</code>函数把一个整数转换成十六进制表示的字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(hex(int(input())))</span><br></pre></td></tr></table></figure><h2 id="22-定义函数"><a class="markdownIt-Anchor" href="#22-定义函数"></a> 2.2 定义函数</h2><h3 id="221-def-定义"><a class="markdownIt-Anchor" href="#221-def-定义"></a> 2.2.1 def 定义</h3><p>在Python中，定义一个函数要使用<code>def</code>语句，依次写出函数名、括号、括号中的参数和冒号<code>:</code>，然后，在缩进块中编写函数体，函数的返回值用<code>return</code>语句返回。</p><p>我们以自定义一个求绝对值的<code>my_abs</code>函数为例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_abs</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -x</span><br><span class="line">print(my_abs(<span class="number">-99</span>))</span><br></pre></td></tr></table></figure><p>!&gt; 请注意，函数体内部的语句在执行时，一旦执行到<code>return</code>时，函数就执行完毕，并将结果返回。因此，函数内部通过条件判断和循环可以实现非常复杂的逻辑。</p><p>如果没有<code>return</code>语句，函数执行完毕后也会返回结果，只是结果为<code>None</code>。<code>return None</code>可以简写为<code>return</code>。</p><p>在 Python 交互环境中定义函数时，注意 Python 会出现<code>...</code>的提示。函数定义结束后需要按两次回车重新回到<code>&gt;&gt;&gt;</code>提示符下：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200628200631.png" alt="image-20200628200630220" /></p><p>如果你已经把<code>my_abs()</code>的函数定义保存为<code>abstest.py</code>文件了，那么，可以在该文件的当前目录下启动 Python 解释器，用<code>from abstest import my_abs</code>来导入<code>my_abs()</code>函数，注意<code>abstest</code>是文件名（不含<code>.py</code>扩展名）：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200628200736.png" alt="image-20200628200735560" /></p><h3 id="222-空函数"><a class="markdownIt-Anchor" href="#222-空函数"></a> 2.2.2 空函数</h3><p>如果想定义一个什么事也不做的空函数，可以用<code>pass</code>语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nop</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><code>pass</code>语句什么都不做，那有什么用？实际上<code>pass</code>可以用来作为占位符，比如现在还没想好怎么写函数的代码，就可以先放一个<code>pass</code>，让代码能运行起来。</p><p><code>pass</code>还可以用在其他语句里，比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>缺少了<code>pass</code>，代码运行就会有语法错误。</p><h3 id="223-参数检查"><a class="markdownIt-Anchor" href="#223-参数检查"></a> 2.2.3 参数检查</h3><p>调用函数时，如果参数个数不对，Python 解释器会自动检查出来，并抛出<code>TypeError</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_abs(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: my_abs() takes <span class="number">1</span> positional argument but <span class="number">2</span> were given</span><br></pre></td></tr></table></figure><p>但是如果参数类型不对，Python 解释器就无法帮我们检查。试试<code>my_abs</code>和内置函数<code>abs</code>的差别：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_abs(<span class="string">'A'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">2</span>, <span class="keyword">in</span> my_abs</span><br><span class="line">TypeError: unorderable types: str() &gt;= int()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>abs(<span class="string">'A'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: bad operand type <span class="keyword">for</span> abs(): <span class="string">'str'</span></span><br></pre></td></tr></table></figure><p>当传入了不恰当的参数时，内置函数<code>abs</code>会检查出参数错误，而我们定义的<code>my_abs</code>没有参数检查，会导致<code>if</code>语句出错，出错信息和<code>abs</code>不一样。所以，这个函数定义不够完善。</p><p>让我们修改一下<code>my_abs</code>的定义，对参数类型做检查，只允许整数和浮点数类型的参数。数据类型检查可以用内置函数<code>isinstance()</code>实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_abs</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(x, (int, float)):</span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">'bad operand type'</span>)</span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -x</span><br></pre></td></tr></table></figure><p>添加了参数检查后，如果传入错误的参数类型，函数就可以抛出一个错误：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_abs(<span class="string">'A'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">3</span>, <span class="keyword">in</span> my_abs</span><br><span class="line">TypeError: bad operand type</span><br></pre></td></tr></table></figure><p>错误和异常处理将在后续讲到。</p><h3 id="224-返回多个值"><a class="markdownIt-Anchor" href="#224-返回多个值"></a> 2.2.4 返回多个值</h3><p>函数可以返回多个值吗？答案是肯定的。</p><p>比如在游戏中经常需要从一个点移动到另一个点，给出坐标、位移和角度，就可以计算出新的坐标：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(x, y, step, angle=<span class="number">0</span>)</span>:</span></span><br><span class="line">    nx = x + step * math.cos(angle)</span><br><span class="line">    ny = y - step * math.sin(angle)</span><br><span class="line">    <span class="keyword">return</span> nx, ny</span><br></pre></td></tr></table></figure><p><code>import math</code>语句表示导入<code>math</code>包，并允许后续代码引用<code>math</code>包里的<code>sin</code>、<code>cos</code>等函数。</p><p>然后，我们就可以同时获得返回值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x, y = move(<span class="number">100</span>, <span class="number">100</span>, <span class="number">60</span>, math.pi / <span class="number">6</span>)</span><br><span class="line">print(x, y) <span class="comment"># 151.96152422706632 70.0</span></span><br></pre></td></tr></table></figure><p>但其实这只是一种假象，Python 函数返回的仍然是单一值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r = move(<span class="number">100</span>, <span class="number">100</span>, <span class="number">60</span>, math.pi / <span class="number">6</span>)</span><br><span class="line">print(r) <span class="comment"># (151.96152422706632, 70.0)</span></span><br></pre></td></tr></table></figure><p>原来返回值是一个 tuple！但是，在语法上，返回一个 tuple 可以省略括号，而多个变量可以同时接收一个 tuple，按位置赋给对应的值，所以，Python 的函数返回多值其实就是返回一个 tuple，但写起来更方便。</p><blockquote><p>✏️ 小结：</p></blockquote><ul><li>定义函数时，需要确定<code>函数名</code>和<code>参数个数</code>；</li><li>如果有必要，可以先对参数的<code>数据类型</code>做检查；</li><li>函数体内部可以用<code>return</code>随时返回函数结果；</li><li>函数执行完毕也没有<code>return</code>语句时，自动<code>return None</code>。</li><li>函数可以同时返回多个值，但其实就是一个<code>tuple</code>。</li></ul><blockquote><p>✏️ 练习题：</p></blockquote><p>请定义一个函数<code>quadratic(a, b, c)</code>，接收 3 个参数，返回一元二次方程 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mi>b</mi><mi>x</mi><mo>+</mo><mi>c</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">ax^2+bx+c=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 的两个解。</p><p>提示：</p><p>一元二次方程的求根公式为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>=</mo><mfrac><mrow><mo>−</mo><mi>b</mi><mo>±</mo><msqrt><mrow><msup><mi>b</mi><mn>2</mn></msup><mo>−</mo><mn>4</mn><mi>a</mi><mi>c</mi></mrow></msqrt></mrow><mrow><mn>2</mn><mi>a</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">x=\dfrac{-b±\sqrt{b^2-4ac}}{2a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.276389em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.590389em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathdefault">a</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">±</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.913389em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span></span></span><span style="top:-2.873389em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12661100000000003em;"><span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>计算平方根可以调用<code>math.sqrt()</code>函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">print(math.sqrt(<span class="number">2</span>)) <span class="comment"># 1.4142135623730951</span></span><br></pre></td></tr></table></figure><p>粗略的定义函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quadratic</span><span class="params">(a,b,c)</span>:</span></span><br><span class="line">    delta=b**<span class="number">2</span><span class="number">-4</span>*a*c</span><br><span class="line">    x1=(-b+math.sqrt(delta))/(<span class="number">2</span>*a)</span><br><span class="line">    x2=(-b-math.sqrt(delta))/(<span class="number">2</span>*a)</span><br><span class="line">    <span class="keyword">return</span> x1,x2</span><br><span class="line">x=int(input(<span class="string">'enter a:'</span>))</span><br><span class="line">y=int(input(<span class="string">'enter b:'</span>))</span><br><span class="line">z=int(input(<span class="string">'enter c:'</span>))</span><br><span class="line">print(<span class="string">'quadratic(x,y,z)'</span>, quadratic(x, y, z))</span><br></pre></td></tr></table></figure><p>当然后期还要细化，因为有些没有考虑！</p><h2 id="23-函数的参数"><a class="markdownIt-Anchor" href="#23-函数的参数"></a> 2.3 函数的参数</h2><p>**定义函数的时候，我们把参数的名字和位置确定下来，函数的接口定义就完成了。**对于函数的调用者来说，只需要知道如何传递正确的参数，以及函数将返回什么样的值就够了，函数内部的复杂逻辑被封装起来，调用者无需了解。</p><p>Python 的函数定义非常简单，但灵活度却非常大。除了正常定义的必选参数外，还可以使用<code>默认参数</code>、<code>可变参数</code>和<code>关键字参数</code>，使得函数定义出来的接口，不但能处理复杂的参数，还可以简化调用者的代码。</p><h3 id="231-位置参数"><a class="markdownIt-Anchor" href="#231-位置参数"></a> 2.3.1 位置参数</h3><p>我们先写一个计算 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">x^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> 的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * x</span><br></pre></td></tr></table></figure><p>对于<code>power(x)</code>函数，参数<code>x</code>就是一个位置参数。</p><p>当我们调用<code>power</code>函数时，必须传入有且仅有的一个参数<code>x</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(power(<span class="number">5</span>)) <span class="comment"># 25</span></span><br></pre></td></tr></table></figure><p>如果要计算 x 的 n 次方，可以把<code>power(x)</code>修改为<code>power(x, n)</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(x, n)</span>:</span></span><br><span class="line">    s = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n = n - <span class="number">1</span></span><br><span class="line">        s = s * x</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure><p>修改后的<code>power(x, n)</code>函数有两个参数：<code>x</code>和<code>n</code>，这两个参数都是位置参数，调用函数时，传入的两个值按照位置顺序依次赋给参数<code>x</code>和<code>n</code>。</p><h3 id="232-默认参数"><a class="markdownIt-Anchor" href="#232-默认参数"></a> 2.3.2 默认参数</h3><p>新的<code>power(x, n)</code>函数定义没有问题，但是，旧的调用代码失败了，原因是我们增加了一个参数，导致旧的代码因为缺少一个参数而无法正常调用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>power(<span class="number">5</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: power() missing <span class="number">1</span> required positional argument: <span class="string">'n'</span></span><br></pre></td></tr></table></figure><p>Python 的错误信息很明确：调用函数<code>power()</code>缺少了一个位置参数<code>n</code>。</p><p>这个时候，默认参数就排上用场了。由于我们经常计算 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">x^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>，所以，完全可以把第二个参数 n 的默认值设定为 2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(x, n=<span class="number">2</span>)</span>:</span></span><br><span class="line">    s = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n = n - <span class="number">1</span></span><br><span class="line">        s = s * x</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure><p>这样，当我们调用<code>power(5)</code>时，相当于调用<code>power(5, 2)</code>：</p><p>而对于<code>n &gt; 2</code>的其他情况，就必须明确地传入 n，比如<code>power(5, 3)</code>。</p><p>从上面的例子可以看出，默认参数可以简化函数的调用。设置默认参数时，有几点要注意：</p><ul><li>一是必选参数在前，默认参数在后，否则 Python 的解释器会报错（思考一下为什么默认参数不能放在必选参数前面）；</li><li>二是如何设置默认参数。当函数有多个参数时，把变化大的参数放前面，变化小的参数放后面。变化小的参数就可以作为默认参数。</li></ul><p>使用默认参数有什么好处？最大的好处是能降低调用函数的难度。</p><p>举个例子，我们写个一年级小学生注册的函数，需要传入<code>name</code>和<code>gender</code>两个参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enroll</span><span class="params">(name, gender)</span>:</span></span><br><span class="line">    print(<span class="string">'name:'</span>, name)</span><br><span class="line">    print(<span class="string">'gender:'</span>, gender)</span><br></pre></td></tr></table></figure><p>这样，调用<code>enroll()</code>函数只需要传入两个参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>enroll(<span class="string">'Sarah'</span>, <span class="string">'F'</span>)</span><br><span class="line">name: Sarah</span><br><span class="line">gender: F</span><br></pre></td></tr></table></figure><p>如果要继续传入年龄、城市等信息怎么办？这样会使得调用函数的复杂度大大增加。</p><p>我们可以把年龄和城市设为默认参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enroll</span><span class="params">(name, gender, age=<span class="number">6</span>, city=<span class="string">'Beijing'</span>)</span>:</span></span><br><span class="line">    print(<span class="string">'name:'</span>, name)</span><br><span class="line">    print(<span class="string">'gender:'</span>, gender)</span><br><span class="line">    print(<span class="string">'age:'</span>, age)</span><br><span class="line">    print(<span class="string">'city:'</span>, city)</span><br></pre></td></tr></table></figure><p>这样，大多数学生注册时不需要提供年龄和城市，只提供必须的两个参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>enroll(<span class="string">'Sarah'</span>, <span class="string">'F'</span>)</span><br><span class="line">name: Sarah</span><br><span class="line">gender: F</span><br><span class="line">age: <span class="number">6</span></span><br><span class="line">city: Beijing</span><br></pre></td></tr></table></figure><p>只有与默认参数不符的学生才需要提供额外的信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">enroll(<span class="string">'Bob'</span>, <span class="string">'M'</span>, <span class="number">7</span>)</span><br><span class="line">enroll(<span class="string">'Adam'</span>, <span class="string">'M'</span>, city=<span class="string">'Tianjin'</span>)</span><br></pre></td></tr></table></figure><p>可见，默认参数降低了函数调用的难度，而一旦需要更复杂的调用时，又可以传递更多的参数来实现。无论是简单调用还是复杂调用，函数只需要定义一个。</p><p>有多个默认参数时，调用的时候，既可以按顺序提供默认参数，比如调用<code>enroll('Bob', 'M', 7)</code>，意思是，除了<code>name</code>，<code>gender</code>这两个参数外，最后 1 个参数应用在参数<code>age</code>上，<code>city</code>参数由于没有提供，仍然使用默认值。</p><p>也可以不按顺序提供部分默认参数。当不按顺序提供部分默认参数时，需要把参数名写上。比如调用<code>enroll('Adam', 'M', city='Tianjin')</code>，意思是，<code>city</code>参数用传进去的值，其他默认参数继续使用默认值。</p><p>默认参数很有用，但使用不当，也会掉坑里。默认参数有个最大的坑，演示如下：</p><p>先定义一个函数，传入一个 list，添加一个<code>END</code>再返回：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_end</span><span class="params">(L=[])</span>:</span></span><br><span class="line">    L.append(<span class="string">'END'</span>)</span><br><span class="line">    <span class="keyword">return</span> L</span><br></pre></td></tr></table></figure><p>当你正常调用时，结果似乎不错：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>add_end([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'END'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add_end([<span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>])</span><br><span class="line">[<span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>, <span class="string">'END'</span>]</span><br></pre></td></tr></table></figure><p>当你使用默认参数调用时，一开始结果也是对的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>add_end()</span><br><span class="line">[<span class="string">'END'</span>]</span><br></pre></td></tr></table></figure><p>但是，再次调用<code>add_end()</code>时，结果就不对了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>add_end()</span><br><span class="line">[<span class="string">'END'</span>, <span class="string">'END'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add_end()</span><br><span class="line">[<span class="string">'END'</span>, <span class="string">'END'</span>, <span class="string">'END'</span>]</span><br></pre></td></tr></table></figure><p>默认参数是<code>[]</code>，但是函数似乎每次都“记住了”上次添加了<code>'END'</code>后的 list。</p><p>原因解释如下：</p><p>⭐ Python 函数在定义的时候，默认参数<code>L</code>的值就被计算出来了，即<code>[]</code>，因为默认参数<code>L</code>也是一个变量，它指向对象<code>[]</code>，每次调用该函数，如果改变了<code>L</code>的内容，则下次调用时，默认参数的内容就变了，不再是函数定义时的<code>[]</code>了。</p><p>🚩 <strong>定义默认参数要牢记一点：默认参数必须指向不变对象！</strong></p><p>要修改上面的例子，我们可以用<code>None</code>这个不变对象来实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_end</span><span class="params">(L=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> L <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        L = []</span><br><span class="line">    L.append(<span class="string">'END'</span>)</span><br><span class="line">    <span class="keyword">return</span> L</span><br></pre></td></tr></table></figure><p>现在，无论调用多少次，都不会有问题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>add_end()</span><br><span class="line">[<span class="string">'END'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add_end()</span><br><span class="line">[<span class="string">'END'</span>]</span><br></pre></td></tr></table></figure><p>为什么要设计<code>str</code>、<code>None</code>这样的不变对象呢？因为不变对象一旦创建，对象内部的数据就不能修改，这样就减少了由于修改数据导致的错误。此外，由于对象不变，多任务环境下同时读取对象不需要加锁，同时读一点问题都没有。我们在编写程序时，如果可以设计一个不变对象，那就尽量设计成不变对象。</p><h3 id="233-可变参数"><a class="markdownIt-Anchor" href="#233-可变参数"></a> 2.3.3 可变参数</h3><p>在 Python 函数中，还可以定义可变参数。顾名思义，可变参数就是传入的参数个数是可变的，可以是 1 个、2 个到任意个，还可以是 0 个。</p><p>我们以数学题为例子，给定一组数字 a，b，c……，请计算 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mn>2</mn></msup><mo>+</mo><msup><mi>b</mi><mn>2</mn></msup><mo>+</mo><msup><mi>c</mi><mn>2</mn></msup><mo>+</mo><mo>…</mo></mrow><annotation encoding="application/x-tex">a^2 + b^2 + c^2 + …</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.12em;vertical-align:0em;"></span><span class="minner">…</span></span></span></span></p><p>要定义出这个函数，我们必须确定输入的参数。由于参数个数不确定，我们首先想到可以把 a，b，c…… 作为一个 list 或 tuple 传进来，这样，函数可以定义如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(numbers)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        sum = sum + n * n</span><br><span class="line">    <span class="keyword">return</span> sum</span><br></pre></td></tr></table></figure><p>但是调用的时候，需要先组装出一个 list 或 tuple：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(calc([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])) <span class="comment"># 14</span></span><br><span class="line">print(calc((<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>))) <span class="comment"># 84</span></span><br></pre></td></tr></table></figure><p>如果利用可变参数，调用函数的方式可以简化成这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(calc(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)) <span class="comment"># 14</span></span><br><span class="line">print(calc(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>)) <span class="comment"># 84</span></span><br></pre></td></tr></table></figure><p>所以，我们把函数的参数改为可变参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(*numbers)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        sum = sum + n * n</span><br><span class="line">    <span class="keyword">return</span> sum</span><br></pre></td></tr></table></figure><p>定义可变参数和定义一个 list 或 tuple 参数相比，仅仅在参数前面加了一个<code>*</code>号。在函数内部，参数<code>numbers</code>接收到的是一个 tuple，因此，函数代码完全不变。但是，调用该函数时，可以传入任意个参数，包括 0 个参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(calc(<span class="number">1</span>, <span class="number">2</span>)) <span class="comment"># 5</span></span><br><span class="line">print(calc()) <span class="comment"># 0</span></span><br></pre></td></tr></table></figure><p>❓ 如果已经有一个 list 或者 tuple，要调用一个可变参数怎么办？可以这样做：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">print(calc(nums[<span class="number">0</span>], nums[<span class="number">1</span>], nums[<span class="number">2</span>])) <span class="comment"># 14</span></span><br></pre></td></tr></table></figure><p>这种写法当然是可行的，问题是太繁琐，所以 Python 允许你在 list 或 tuple 前面加一个<code>*</code>号，把 list 或 tuple 的元素变成可变参数传进去：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">print(calc(*nums)) <span class="comment"># 14</span></span><br></pre></td></tr></table></figure><p><code>*nums</code>表示把<code>nums</code>这个list的所有元素作为可变参数传进去。这种写法相当有用，而且很常见。</p><h3 id="234-关键字参数"><a class="markdownIt-Anchor" href="#234-关键字参数"></a> 2.3.4 关键字参数</h3><p>可变参数允许你传入 0 个或任意个参数，这些可变参数在函数调用时自动组装为一个 tuple。而关键字参数允许你传入 0 个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个 dict。请看示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, **kw)</span>:</span></span><br><span class="line">    print(<span class="string">'name:'</span>, name, <span class="string">'age:'</span>, age, <span class="string">'other:'</span>, kw)</span><br></pre></td></tr></table></figure><p>函数<code>person</code>除了必选参数<code>name</code>和<code>age</code>外，还接受关键字参数<code>kw</code>。在调用该函数时，可以只传入必选参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">person(<span class="string">'Michael'</span>, <span class="number">30</span>) </span><br><span class="line"><span class="comment"># name: Michael age: 30 other: &#123;&#125;</span></span><br></pre></td></tr></table></figure><p>也可以传入任意个数的关键字参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">person(<span class="string">'Bob'</span>, <span class="number">35</span>, city=<span class="string">'Beijing'</span>)</span><br><span class="line"><span class="comment"># name: Bob age: 35 other: &#123;'city': 'Beijing'&#125;</span></span><br><span class="line">person(<span class="string">'Adam'</span>, <span class="number">45</span>, gender=<span class="string">'M'</span>, job=<span class="string">'Engineer'</span>)</span><br><span class="line"><span class="comment"># name: Adam age: 45 other: &#123;'gender': 'M', 'jo</span></span><br></pre></td></tr></table></figure><p>关键字参数有什么用？它可以扩展函数的功能。比如，在<code>person</code>函数里，我们保证能接收到<code>name</code>和<code>age</code>这两个参数，但是，如果调用者愿意提供更多的参数，我们也能收到。试想你正在做一个用户注册的功能，除了用户名和年龄是必填项外，其他都是可选项，利用关键字参数来定义这个函数就能满足注册的需求。</p><p>和可变参数类似，也可以先组装出一个 dict，然后，把该 dict 转换为关键字参数传进去：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">extra = &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</span><br><span class="line">person(<span class="string">'Jack'</span>, <span class="number">24</span>, city=extra[<span class="string">'city'</span>], job=extra[<span class="string">'job'</span>])</span><br><span class="line"><span class="comment"># name: Jack age: 24 other: &#123;'city': 'Beijing', 'job': 'Engineer'&#125;</span></span><br></pre></td></tr></table></figure><p>当然，上面复杂的调用可以用简化的写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">extra = &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</span><br><span class="line">person(<span class="string">'Jack'</span>, <span class="number">24</span>, **extra)</span><br><span class="line"><span class="comment"># name: Jack age: 24 other: &#123;'city': 'Beijing', 'job': 'Engineer'&#125;</span></span><br></pre></td></tr></table></figure><p><code>**extra</code>表示把<code>extra</code>这个 dict 的所有 key-value 用关键字参数传入到函数的<code>**kw</code>参数，<code>kw</code>将获得一个 dict，注意<code>kw</code>获得的 dict 是<code>extra</code>的一份拷贝，对<code>kw</code>的改动不会影响到函数外的<code>extra</code>。</p><h3 id="235-命名关键字参数"><a class="markdownIt-Anchor" href="#235-命名关键字参数"></a> 2.3.5 命名关键字参数</h3><p>对于关键字参数，函数的调用者可以传入任意不受限制的关键字参数。至于到底传入了哪些，就需要在函数内部通过<code>kw</code>检查。</p><p>仍以<code>person()</code>函数为例，我们希望检查是否有<code>city</code>和<code>job</code>参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, **kw)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'city'</span> <span class="keyword">in</span> kw:</span><br><span class="line">        <span class="comment"># 有city参数</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'job'</span> <span class="keyword">in</span> kw:</span><br><span class="line">        <span class="comment"># 有job参数</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    print(<span class="string">'name:'</span>, name, <span class="string">'age:'</span>, age, <span class="string">'other:'</span>, kw)</span><br></pre></td></tr></table></figure><p>但是调用者仍可以传入不受限制的关键字参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Jack'</span>, <span class="number">24</span>, city=<span class="string">'Beijing'</span>, addr=<span class="string">'Chaoyang'</span>, zipcode=<span class="number">123456</span>)</span><br></pre></td></tr></table></figure><p>如果要限制关键字参数的名字，就可以用命名关键字参数，例如，只接收<code>city</code>和<code>job</code>作为关键字参数。这种方式定义的函数如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *, city, job)</span>:</span></span><br><span class="line">    print(name, age, city, job)</span><br></pre></td></tr></table></figure><p>和关键字参数<code>**kw</code>不同，命名关键字参数需要一个特殊分隔符<code>*</code>，<code>*</code>后面的参数被视为命名关键字参数。</p><p>调用方式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">person(<span class="string">'Jack'</span>, <span class="number">24</span>, city=<span class="string">'Beijing'</span>, job=<span class="string">'Engineer'</span>)</span><br><span class="line"><span class="comment"># Jack 24 Beijing Engineer</span></span><br></pre></td></tr></table></figure><p>如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符<code>*</code>了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *args, city, job)</span>:</span></span><br><span class="line">    print(name, age, args, city, job)</span><br></pre></td></tr></table></figure><p>命名关键字参数必须传入参数名，这和位置参数不同。如果没有传入参数名，调用将报错：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Jack'</span>, <span class="number">24</span>, <span class="string">'Beijing'</span>, <span class="string">'Engineer'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: person() takes <span class="number">2</span> positional arguments but <span class="number">4</span> were given</span><br></pre></td></tr></table></figure><p>由于调用时缺少参数名<code>city</code>和<code>job</code>，Python 解释器把这 4 个参数均视为位置参数，但<code>person()</code>函数仅接受 2 个位置参数。</p><p>命名关键字参数可以有缺省值，从而简化调用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *, city=<span class="string">'Beijing'</span>, job)</span>:</span></span><br><span class="line">    print(name, age, city, job)</span><br></pre></td></tr></table></figure><p>由于命名关键字参数<code>city</code>具有默认值，调用时，可不传入<code>city</code>参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Jack'</span>, <span class="number">24</span>, job=<span class="string">'Engineer'</span>)</span><br><span class="line">Jack <span class="number">24</span> Beijing Engineer</span><br></pre></td></tr></table></figure><p>使用命名关键字参数时，要特别注意，如果没有可变参数，就必须加一个<code>*</code>作为特殊分隔符。如果缺少<code>*</code>，Python 解释器将无法识别位置参数和命名关键字参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, city, job)</span>:</span></span><br><span class="line">    <span class="comment"># 缺少 *，city和job被视为位置参数</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="236-参数组合"><a class="markdownIt-Anchor" href="#236-参数组合"></a> 2.3.6 参数组合</h3><p>在 Python 中定义函数，可以用必选参数、默认参数、可变参数、关键字参数和命名关键字参数，这 5 种参数都可以组合使用。但是请注意，参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。</p><p>比如定义一个函数，包含上述若干种参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(a, b, c=<span class="number">0</span>, *args, **kw)</span>:</span></span><br><span class="line">    print(<span class="string">'a ='</span>, a, <span class="string">'b ='</span>, b, <span class="string">'c ='</span>, c, <span class="string">'args ='</span>, args, <span class="string">'kw ='</span>, kw)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(a, b, c=<span class="number">0</span>, *, d, **kw)</span>:</span></span><br><span class="line">    print(<span class="string">'a ='</span>, a, <span class="string">'b ='</span>, b, <span class="string">'c ='</span>, c, <span class="string">'d ='</span>, d, <span class="string">'kw ='</span>, kw)</span><br></pre></td></tr></table></figure><p>在函数调用的时候，Python 解释器自动按照参数位置和参数名把对应的参数传进去。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">f1(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment"># a = 1 b = 2 c = 0 args = () kw = &#123;&#125;</span></span><br><span class="line"></span><br><span class="line">f1(<span class="number">1</span>, <span class="number">2</span>, c=<span class="number">3</span>)</span><br><span class="line"><span class="comment"># a = 1 b = 2 c = 3 args = () kw = &#123;&#125;</span></span><br><span class="line"></span><br><span class="line">f1(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'a'</span>, <span class="string">'b'</span>)</span><br><span class="line"><span class="comment"># a = 1 b = 2 c = 3 args = ('a', 'b') kw = &#123;&#125;</span></span><br><span class="line"></span><br><span class="line">f1(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, x=<span class="number">99</span>)</span><br><span class="line"><span class="comment"># a = 1 b = 2 c = 3 args = ('a', 'b') kw = &#123;'x': 99&#125;</span></span><br><span class="line"></span><br><span class="line">f2(<span class="number">1</span>, <span class="number">2</span>, d=<span class="number">99</span>, ext=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># a = 1 b = 2 c = 0 d = 99 kw = &#123;'ext': None&#125;</span></span><br></pre></td></tr></table></figure><p>最神奇的是通过一个 tuple 和 dict，你也可以调用上述函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">args = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">kw = &#123;<span class="string">'d'</span>: <span class="number">99</span>, <span class="string">'x'</span>: <span class="string">'#'</span>&#125;</span><br><span class="line">f1(*args, **kw)</span><br><span class="line"><span class="comment"># a = 1 b = 2 c = 3 args = (4,) kw = &#123;'d': 99, 'x': '#'&#125;</span></span><br><span class="line"></span><br><span class="line">args = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">kw = &#123;<span class="string">'d'</span>: <span class="number">88</span>, <span class="string">'x'</span>: <span class="string">'#'</span>&#125;</span><br><span class="line">f2(*args, **kw)</span><br><span class="line"><span class="comment"># a = 1 b = 2 c = 3 d = 88 kw = &#123;'x': '#'&#125;</span></span><br></pre></td></tr></table></figure><p>所以，对于任意函数，都可以通过类似<code>func(*args, **kw)</code>的形式调用它，无论它的参数是如何定义的。</p><blockquote><p>虽然可以组合多达 5 种参数，但不要同时使用太多的组合，否则函数接口的可理解性很差。</p></blockquote><blockquote><p>小结</p></blockquote><ul><li><p>Python 的函数具有非常灵活的参数形态，既可以实现简单的调用，又可以传入非常复杂的参数。</p></li><li><p>默认参数一定要用不可变对象，如果是可变对象，程序运行时会有逻辑错误！</p></li><li><p>要注意定义可变参数和关键字参数的语法：</p></li><li><p><code>*args</code>是可变参数，args 接收的是一个tuple；</p></li><li><p><code>**kw</code>是关键字参数，kw 接收的是一个dict。</p></li><li><p>以及调用函数时如何传入可变参数和关键字参数的语法：</p><ul><li>可变参数既可以直接传入：<code>func(1, 2, 3)</code>，又可以先组装 list 或 tuple，再通过<code>*args</code>传入：<code>func(*(1, 2, 3))</code>；</li><li>关键字参数既可以直接传入：<code>func(a=1, b=2)</code>，又可以先组装 dict，再通过<code>**kw</code>传入：<code>func(**{'a': 1, 'b': 2})</code>。</li><li>使用<code>*args</code>和<code>**kw</code>是 Python 的习惯写法，当然也可以用其他参数名，但最好使用习惯用法。</li></ul></li><li><p>命名的关键字参数是为了限制调用者可以传入的参数名，同时可以提供默认值。</p></li><li><p>定义命名的关键字参数在没有可变参数的情况下不要忘了写分隔符<code>*</code>，否则定义的将是位置参数。</p></li></ul><blockquote><p>✏️ 练习题：</p></blockquote><p>接收一个或多个数并计算乘积</p><p>以下函数允许计算两个数的乘积，请稍加改造，变成可接收一个或多个数并计算乘积：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">product</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * y</span><br></pre></td></tr></table></figure><h2 id="24-递归函数"><a class="markdownIt-Anchor" href="#24-递归函数"></a> 2.4 递归函数</h2><blockquote><p>在函数内部，可以调用其他函数。如果一个函数在内部调用自身本身，这个函数就是递归函数。</p></blockquote><p>举个例子，我们来计算阶乘<code>n! = 1 x 2 x 3 x ... x n</code>，用函数<code>fact(n)</code>表示，可以看出：</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mi>a</mi><mi>c</mi><mi>t</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>n</mi><mo stretchy="false">!</mo><mo>=</mo><mn>1</mn><mo>×</mo><mn>2</mn><mo>×</mo><mn>3</mn><mo>×</mo><mo>⋅</mo><mo>⋅</mo><mo>⋅</mo><mo>×</mo><mo stretchy="false">(</mo><mi>n</mi><mi mathvariant="normal">−</mi><mn>1</mn><mo stretchy="false">)</mo><mo>×</mo><mi>n</mi><mo>=</mo><mo stretchy="false">(</mo><mi>n</mi><mi mathvariant="normal">−</mi><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">!</mo><mo>×</mo><mi>n</mi><mo>=</mo><mi>f</mi><mi>a</mi><mi>c</mi><mi>t</mi><mo stretchy="false">(</mo><mi>n</mi><mi mathvariant="normal">−</mi><mn>1</mn><mo stretchy="false">)</mo><mo>×</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">fact(n)=n!=1×2×3×⋅⋅⋅×(n−1)×n=(n−1)!×n=fact(n−1)×n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.44445em;vertical-align:0em;"></span><span class="mord">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span></p><p>所以，<code>fact(n)</code>可以表示为<code>n x fact(n-1)</code>，只有 n = 1 时需要特殊处理。</p><p>于是，<code>fact(n)</code>用递归的方式写出来就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> n * fact(n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>如果我们计算<code>fact(5)</code>，可以根据函数定义看到计算过程如下：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200703160052.png" alt="image-20200703160050927" /></p><p>!&gt; 递归函数的优点是定义简单，逻辑清晰。理论上，所有的递归函数都可以写成循环的方式，但循环的逻辑不如递归清晰。</p><p>使用递归函数需要注意防止栈溢出。在计算机中，函数调用是通过栈（stack）这种数据结构实现的，每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈帧。由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出。可以试试<code>fact(1000)</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>fact(<span class="number">1000</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">4</span>, <span class="keyword">in</span> fact</span><br><span class="line">  ...</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">4</span>, <span class="keyword">in</span> fact</span><br><span class="line">RuntimeError: maximum recursion depth exceeded <span class="keyword">in</span> comparison</span><br></pre></td></tr></table></figure><p>解决递归调用栈溢出的方法是通过<strong>尾递归</strong>优化，事实上尾递归和循环的效果是一样的，所以，把循环看成是一种特殊的尾递归函数也是可以的。</p><p>🔴 尾递归是指，<strong>在函数返回的时候，调用自身本身，并且，return 语句不能包含表达式</strong>。这样，编译器或者解释器就可以把尾递归做优化，使递归本身无论调用多少次，都只占用一个栈帧，不会出现栈溢出的情况。</p><p>上面的<code>fact(n)</code>函数由于<code>return n * fact(n - 1)</code>引入了乘法表达式，所以就不是尾递归了。要改成尾递归方式，需要多一点代码，主要是要把每一步的乘积传入到递归函数中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> fact_iter(n, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact_iter</span><span class="params">(num, product)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> product</span><br><span class="line">    <span class="keyword">return</span> fact_iter(num - <span class="number">1</span>, num * product)</span><br></pre></td></tr></table></figure><p>可以看到，<code>return fact_iter(num - 1, num * product)</code>仅返回递归函数本身，<code>num - 1</code>和<code>num * product</code>在函数调用前就会被计算，不影响函数调用。</p><p><code>fact(5)</code>对应的<code>fact_iter(5, 1)</code>的调用如下：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200703160637.png" alt="image-20200703160635854" /></p><p>尾递归调用时，如果做了优化，栈不会增长，因此，无论多少次调用也不会导致栈溢出。</p><p>😏😏 遗憾的是，大多数编程语言没有针对尾递归做优化，Python 解释器也没有做优化，所以，即使把上面的<code>fact(n)</code>函数改成尾递归方式，也会导致栈溢出。</p><blockquote><p>🔔 小结</p></blockquote><ul><li>使用递归函数的优点是逻辑简单清晰，缺点是过深的调用会导致栈溢出。</li><li>针对尾递归优化的语言可以通过尾递归防止栈溢出。尾递归事实上和循环是等价的，没有循环语句的编程语言只能通过尾递归实现循环。</li><li>Python 标准的解释器没有针对尾递归做优化，任何递归函数都存在栈溢出的问题。</li></ul><blockquote><p>✏️ 练习题：</p></blockquote><p><a href="http://baike.baidu.com/view/191666.htm" target="_blank" rel="noopener">汉诺塔</a>的移动可以用递归函数非常简单地实现。</p><p>请编写<code>move(n, a, b, c)</code>函数，它接收参数<code>n</code>，表示 3 个柱子 A、B、C 中第 1 个柱子 A 的盘子数量，然后打印出把所有盘子从 A 借助 B 移动到 C 的方法，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(n,a,b,c)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">        print(a,<span class="string">'--&gt;'</span>,c)   <span class="comment">#如果只有一个盘子，直接从a柱移动到c柱</span></span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        move(n<span class="number">-1</span>,a,c,b)    <span class="comment">#将a柱上的n-1个盘子通过c柱移动到b柱</span></span><br><span class="line">        print(a,<span class="string">'--&gt;'</span>,c)   <span class="comment">#移动完n-1个盘子之后，a柱剩下的最大盘子直接从a柱移到c柱</span></span><br><span class="line">        move(n<span class="number">-1</span>,b,a,c)    <span class="comment">#b柱上的n-1个盘子通过a柱移动到c柱</span></span><br><span class="line">move(<span class="number">3</span>,<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>)</span><br></pre></td></tr></table></figure><h2 id="25-参考资料"><a class="markdownIt-Anchor" href="#25-参考资料"></a> 2.5 参考资料</h2><ul><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017105145133280" target="_blank" rel="noopener">廖雪峰 - Python 3.x - 函数</a></li><li><a href="https://docs.python.org/3/library/functions.html" target="_blank" rel="noopener">Python 官网内置函数</a></li><li><a href="https://veal98.github.io/CS-Wiki/#/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/Python/Python%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2-%E5%87%BD%E6%95%B0?id=%F0%9F%93%90-%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">CS - WiKi</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python/Python入门学习笔记/CH1-Python基础</title>
      <link href="/2020/08/15/Python/Python%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/CH1-Python%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/08/15/Python/Python%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/CH1-Python%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-python-基础"><a class="markdownIt-Anchor" href="#第一章-python-基础"></a> 第一章 Python 基础</h1><blockquote><p>Python 非常适合初学者用来进入计算机编程领域。Python 属于非常高级的语言，掌握了这门高级语言，就对计算机编程的核心思想——抽象有了初步理解。如果希望继续深入学习计算机编程，可以学习 Java、C、JavaScript、Lisp 等不同类型的语言，只有多掌握不同领域的语言，有比较才更有收获。</p></blockquote><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200611064140.png" alt="image-20200611064112524" /></p><h2 id="11-环境准备"><a class="markdownIt-Anchor" href="#11-环境准备"></a> 1.1 环境准备</h2><h3 id="111-python-安装"><a class="markdownIt-Anchor" href="#111-python-安装"></a> 1.1.1 Python 安装</h3><p>（1）官网下载 Python</p><p>进入官网（<a href="https://www.python.org/" target="_blank" rel="noopener">https://www.python.org</a>），点击 Downloads，选择要下载的版本：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517223149.png" alt="image-20200517223148826" /></p><p>（2）安装 Python</p><p>安装时注意下图勾选部分一定要勾选：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517223528.png" alt="image-20200517223527044" /></p><h3 id="112-安装代码编辑器-pycharm"><a class="markdownIt-Anchor" href="#112-安装代码编辑器-pycharm"></a> 1.1.2 安装代码编辑器 PyCharm</h3><p>（1）官网下载 PyCharm</p><p>进入官网（<a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">https://www.jetbrains.com/pycharm</a>），点击 Downloads，选择要下载的版本：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517223349.png" alt="image-20200517223348661" /></p><p>（2）安装 PyCharm</p><p>设置安装路径之后，一直点 next 即可。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517224624.png" alt="image-20200517224622654" /></p><p>（3）优化 PyCharm 使用</p><ul><li><a href="Python/PyCharm%E4%BC%98%E5%8C%96%E4%BD%BF%E7%94%A8.md">PyCharm 优化使用</a></li></ul><h3 id="113-安装-jupyter-notebook"><a class="markdownIt-Anchor" href="#113-安装-jupyter-notebook"></a> 1.1.3 安装 Jupyter notebook</h3><p>数据分析，对我来说最好用的还是 Jupyter notebook</p><ul><li><strong>Jupyter notebook</strong> ：基于 web 的交互式计算环境，可以编辑易于人们阅读的文档，用于展示数据分析的过程。</li></ul><p>✨ 使用文档可参考我的笔记：<a href="Python/Jupyter-notebook%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97">Jupyter - notebook 使用指南</a></p><h2 id="12-第一个-python-程序"><a class="markdownIt-Anchor" href="#12-第一个-python-程序"></a> 1.2 第一个 Python 程序</h2><h3 id="121-helloworld"><a class="markdownIt-Anchor" href="#121-helloworld"></a> 1.2.1 HelloWorld</h3><p>创建第一个项目 HelloWorld --&gt; 创建文件 <a href="http://app.py" target="_blank" rel="noopener">app.py</a> --&gt; 写入代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"HelloWorld"</span>)</span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517225659.png" alt="image-20200517225658342" /></p><h3 id="122-输入和输出"><a class="markdownIt-Anchor" href="#122-输入和输出"></a> 1.2.2 输入和输出</h3><h4 id="1-输出"><a class="markdownIt-Anchor" href="#1-输出"></a> ① 输出</h4><p>用 <code>print()</code> 在括号中加上字符串，就可以向屏幕上输出指定的文字。比如输出 <code>hello, world</code>，用代码实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'hello, world'</span>)</span><br></pre></td></tr></table></figure><p><code>print()</code> 函数也可以接受多个字符串，用逗号 “,” 隔开，就可以连成一串输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'The quick brown fox'</span>, <span class="string">'jumps over'</span>, <span class="string">'the lazy dog'</span>)</span><br></pre></td></tr></table></figure><p><code>print()</code> 会依次打印每个字符串，遇到逗号 “,” 会输出一个空格，因此，输出的字符串是这样拼起来的：</p><p>?&gt; The quick brown fox jumps over the lazy dog</p><p><code>print()</code>也可以打印整数，或者计算结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="number">300</span>)</span><br><span class="line">print(<span class="string">'100 + 200 = '</span>,<span class="number">100</span> + <span class="number">200</span>) <span class="comment"># 输出 100 + 200 = 300</span></span><br></pre></td></tr></table></figure><p>!&gt; 注意，对于 <code>100 + 200</code>，Python 解释器自动计算出结果 <code>300</code>，但是，<code>'100 + 200 ='</code>是字符串而非数学公式，Python 把它视为字符串</p><h4 id="2-输入"><a class="markdownIt-Anchor" href="#2-输入"></a> ② 输入</h4><p>Python 提供了一个 <code>input()</code>，可以让用户输入字符串，并存放到一个变量里。比如输入用户的名字：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'Input your name: '</span>)</span><br><span class="line">name = input()</span><br><span class="line">print(<span class="string">'Hello! '</span>,name)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200610194542.png" alt="image-20200610194537419" /></p><p>我们也可以直接在 input 中显示一个字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = input(<span class="string">'Input your name: '</span>)</span><br><span class="line">print(<span class="string">'Hello! '</span>,name)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200610194824.png" alt="image-20200610194823007" /></p><h3 id="123-小结"><a class="markdownIt-Anchor" href="#123-小结"></a> 1.2.3 小结</h3><p>任何计算机程序都是为了执行一个特定的任务，有了输入，用户才能告诉计算机程序所需的信息，有了输出，程序运行后才能告诉用户任务的结果。</p><p>输入是 Input，输出是 Output，因此，我们把输入输出统称为 Input / Output，或者简写为 IO。</p><p><code>input()</code> 和 <code>print()</code> 是在命令行下面最基本的输入和输出，但是，用户也可以通过其他更高级的图形界面完成输入和输出，比如，在网页上的一个文本框输入自己的名字，点击 “确定” 后在网页上看到输出信息。</p><h2 id="13-python-基础"><a class="markdownIt-Anchor" href="#13-python-基础"></a> 1.3 Python 基础</h2><p>Python 是一种计算机编程语言。计算机编程语言和我们日常使用的自然语言有所不同，最大的区别就是，自然语言在不同的语境下有不同的理解，而计算机要根据编程语言执行任务，就必须保证编程语言写出的程序决不能有歧义，所以，任何一种编程语言都有自己的一套语法，编译器或者解释器就是负责把符合语法的程序代码转换成 CPU 能够执行的机器码，然后执行。Python 也不例外。</p><p>Python 的语法比较简单，采用缩进方式，写出来的代码就像下面的样子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># print absolute value of an integer:</span></span><br><span class="line">a = <span class="number">100</span></span><br><span class="line"><span class="keyword">if</span> a &gt;= <span class="number">0</span>:</span><br><span class="line">    print(a)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(-a)</span><br></pre></td></tr></table></figure><p>以 <code>#</code> 开头的语句是注释，注释是给人看的，可以是任意内容，解释器会忽略掉注释。其他每一行都是一个语句，当语句以冒号<code>:</code>结尾时，缩进的语句视为代码块。</p><p>缩进有利有弊。好处是强迫你写出格式化的代码，但没有规定缩进是几个空格还是Tab。按照约定俗成的惯例，<strong>应该始终坚持使用 4 个空格的缩进。</strong></p><p>缩进的另一个好处是强迫你写出缩进较少的代码，你会倾向于把一段很长的代码拆分成若干函数，从而得到缩进较少的代码。</p><p>缩进的坏处就是“复制－粘贴”功能失效了，这是最坑爹的地方。当你重构代码时，粘贴过去的代码必须重新检查缩进是否正确。此外，IDE 很难像格式化 Java 代码那样格式化 Python 代码。</p><p>最后，请务必注意，Python 程序是<code>大小写敏感</code>的，如果写错了大小写，程序会报错。</p><h3 id="131-数据类型"><a class="markdownIt-Anchor" href="#131-数据类型"></a> 1.3.1 数据类型</h3><p>计算机顾名思义就是可以做数学计算的机器，因此，计算机程序理所当然地可以处理各种数值。但是，计算机能处理的远不止数值，还可以处理文本、图形、音频、视频、网页等各种各样的数据，不同的数据，需要定义不同的数据类型。在 Python 中，能够直接处理的数据类型有以下几种：</p><ul><li>整数</li><li>浮点数</li><li>字符串</li><li>布尔值 True / False</li><li>空值 None</li><li>列表 list / tuple</li><li>字典 dict / set</li><li>自定义数据类型</li></ul><h4 id="1-整数"><a class="markdownIt-Anchor" href="#1-整数"></a> ① 整数</h4><p>Python 可以处理任意大小的整数，当然包括负整数，在程序中的表示方法和数学上的写法一模一样。</p><p>例如：<code>1</code>，<code>100</code>，<code>-8080</code>，<code>0</code>，等等。</p><p>计算机由于使用<code>二进制</code>，所以，有时候用十六进制表示整数比较方便，十六进制用 <code>0x</code> 前缀和 0 - 9， a - f 表示。</p><p>例如：<code>0xff00</code>，<code>0xa5b4c3d2</code>，等等。</p><h4 id="2-浮点数"><a class="markdownIt-Anchor" href="#2-浮点数"></a> ② 浮点数</h4><p>浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，比如，1.23x10^9  和 12.3x10^8 是完全相等的。浮点数可以用数学写法，如 1.23，3.14，-9.01，等等。但是对于很大或很小的浮点数，就必须用科学计数法表示，把 10 用 e 替代， 1.23x10^9 就是 1.23e9，或者 12.3e8，0.000012 可以写成 1.2e-5，等等。</p><p>整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的（除法难道也是精确的？是的！），而浮点数运算则可能会有四舍五入的误差。</p><blockquote><p>注意：</p></blockquote><p>在 Python 中，有两种除法，一种除法是 <code>/</code> ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="number">10</span> / <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 输出 3.3333333333333335</span></span><br></pre></td></tr></table></figure><p><code>/</code> 除法计算结果是浮点数，即使是两个整数恰好整除，结果也是浮点数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="number">9</span> / <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 输出 3.0</span></span><br></pre></td></tr></table></figure><p>还有一种除法是 <code>//</code>，称为地板除，两个整数的除法仍然是整数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="number">10</span> // <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 输出 3</span></span><br></pre></td></tr></table></figure><p>你没有看错，整数的地板除 <code>//</code> 永远是整数，即使除不尽。要做精确的除法，使用 <code>/</code> 就可以。</p><p>因为 <code>//</code> 除法只取结果的整数部分，所以 Python 还提供一个余数运算，可以得到两个整数相除的余数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="number">10</span> % <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 输出 1</span></span><br></pre></td></tr></table></figure><p>无论整数做 <code>//</code> 除法还是取余数，结果永远是整数，所以，整数运算结果永远是精确的。</p><h4 id="3-字符串"><a class="markdownIt-Anchor" href="#3-字符串"></a> ③ 字符串</h4><p>字符串是以单引号 <code>'</code> 或双引号 <code>&quot;</code> 括起来的任意文本，比如 <code>'abc'</code>，<code>&quot;xyz&quot;</code> 等等。请注意，<code>''</code> 或 <code>&quot;&quot;</code> 本身只是一种表示方式，不是字符串的一部分，因此，字符串 <code>'abc'</code> 只有 <code>a</code>，<code>b</code>，<code>c</code> 这3个字符。如果 <code>'</code> 本身也是一个字符，那就可以用 <code>&quot;&quot;</code> 括起来，比如 <code>&quot;I'm OK&quot;</code> 包含的字符是 <code>I</code>，<code>'</code>，<code>m</code>， 空格，<code>O</code>，<code>K</code>这 6 个字符。</p><p>如果字符串内部既包含 <code>'</code> 又包含 <code>&quot;</code> 怎么办？可以用转义字符 <code>\</code> 来标识，比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'I\'m \"OK\"!'</span></span><br></pre></td></tr></table></figure><p>表示的字符串内容是：</p><p><code>I'm &quot;OK&quot;!</code></p><p>转义字符 <code>\</code> 可以转义很多字符，比如 <code>\n</code> 表示换行，<code>\t</code> 表示制表符，字符 <code>\</code> 本身也要转义，所以 <code>\\</code> 表示的字符就是 <code>\</code>。</p><p>如果字符串里面有很多字符都需要转义，就需要加很多 <code>\</code>，为了简化，Python 还允许用 <code>r '...'</code> 表示，<code>'...'</code> 内部的字符串默认不转义，可以自己试试：</p><p>💬 示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'\\\t\\'</span>)</span><br><span class="line"><span class="comment"># 输出：\       \</span></span><br><span class="line">print(<span class="string">r'\\\t\\'</span>)</span><br><span class="line"><span class="comment"># 输出：\\\t\\</span></span><br></pre></td></tr></table></figure><p>如果字符串内部有很多换行，用 <code>\n</code> 写在一行里不好阅读，为了简化，Python 允许用 <code>'''...'''</code> 的格式表示多行内容，可以自己试试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'''line1</span></span><br><span class="line"><span class="string">line2</span></span><br><span class="line"><span class="string">line3'''</span>)</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200610222140.png" alt="image-20200610222139397" /></p><h4 id="4-布尔值"><a class="markdownIt-Anchor" href="#4-布尔值"></a> ④ 布尔值</h4><p>布尔值和布尔代数的表示完全一致，一个布尔值只有 <code>True</code>、<code>False</code> 两种值，要么是 <code>True</code>，要么是 <code>False</code>，在 Python 中，可以直接用 <code>True</code>、<code>False</code> 表示布尔值（请注意大小写），也可以通过布尔运算计算出来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="number">3</span> &gt; <span class="number">2</span>)</span><br><span class="line">print(<span class="number">3</span> &gt; <span class="number">5</span>)</span><br><span class="line">print(<span class="literal">True</span>)</span><br><span class="line">print(<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>布尔值可以用 <code>and</code>、<code>or</code>和 <code>not</code> 运算。</p><p><code>and</code> 运算是与运算，只有所有都为 <code>True</code>，<code>and</code>运算结果才是 <code>True</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="literal">True</span> <span class="keyword">and</span> <span class="literal">True</span>) <span class="comment"># True</span></span><br><span class="line">print(<span class="literal">True</span> <span class="keyword">and</span> <span class="literal">False</span>) <span class="comment"># False</span></span><br><span class="line">print(<span class="literal">False</span> <span class="keyword">and</span> <span class="literal">False</span>) <span class="comment"># False</span></span><br><span class="line">print(<span class="number">5</span> &gt; <span class="number">3</span> <span class="keyword">and</span> <span class="number">3</span> &gt; <span class="number">1</span>) <span class="comment"># True</span></span><br></pre></td></tr></table></figure><p><code>or</code>运算是或运算，只要其中有一个为 <code>True</code>，<code>or</code>运算结果就是 <code>True</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="literal">True</span> <span class="keyword">or</span> <span class="literal">False</span>) <span class="comment"># True</span></span><br><span class="line">print(<span class="number">5</span> &lt; <span class="number">3</span> <span class="keyword">or</span> <span class="number">1</span> &gt; <span class="number">3</span>) <span class="comment"># False</span></span><br></pre></td></tr></table></figure><p><code>not</code> 运算是非运算，它是一个单目运算符，把 <code>True</code> 变成 <code>False</code>，<code>False</code> 变成 <code>True</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="keyword">not</span> <span class="literal">True</span>) <span class="comment"># False</span></span><br><span class="line">print(<span class="keyword">not</span> <span class="number">1</span> &gt; <span class="number">3</span>) <span class="comment"># True</span></span><br></pre></td></tr></table></figure><p>布尔值经常用在条件判断中，比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age = int(input())</span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">'adult'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'teenager'</span>)</span><br></pre></td></tr></table></figure><h4 id="5-空值"><a class="markdownIt-Anchor" href="#5-空值"></a> ⑤ 空值</h4><p>空值是 Python 里一个特殊的值，用 <code>None</code> 表示。<code>None</code> 不能理解为 <code>0</code>，因为 <code>0</code> 是有意义的，而 <code>None</code> 是一个特殊的空值。</p><p>此外，Python 还提供了列表、字典等多种数据类型，还允许创建自定义数据类型，我们后面会继续讲到。</p><h4 id="6-列表"><a class="markdownIt-Anchor" href="#6-列表"></a> ⑥ 列表</h4><h5 id="i-可变的有序列表-list"><a class="markdownIt-Anchor" href="#i-可变的有序列表-list"></a> Ⅰ 可变的有序列表 list [ ]</h5><p>Python 内置的一种数据类型是列表：list，list 是一种有序的集合，可以随时<code>添加</code>和<code>删除</code>其中的元素。</p><ul><li><strong>创建</strong></li></ul><p>比如，列出班里所有同学的名字，就可以用一个 list 表示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">classmates = [<span class="string">'Michael'</span>,<span class="string">'Bob'</span>,<span class="string">'Tracy'</span>]</span><br><span class="line">print(classmates) <span class="comment"># 输出 ['Michael', 'Bob', 'Tracy']</span></span><br></pre></td></tr></table></figure><p>变量 <code>classmates</code> 就是一个 list。用 <code>len()</code>函数可以获得 list 元素的个数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(len(classmates)) <span class="comment"># 输出 3</span></span><br></pre></td></tr></table></figure><p>🚩 list 里面的元素的数据类型可以不同，比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="string">'Apple'</span>, <span class="number">123</span>, <span class="literal">True</span>]</span><br></pre></td></tr></table></figure><p>list 元素也可以是 另一个 list，比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = [<span class="string">'Python'</span>, <span class="string">'Java'</span>, [<span class="string">'C'</span>, <span class="string">'C++'</span>], <span class="string">'C#'</span>]</span><br><span class="line">print(s) <span class="comment"># ['Python', 'Java', ['C', 'C++'], 'C#']</span></span><br><span class="line">print(len(s)) <span class="comment"># 4</span></span><br></pre></td></tr></table></figure><p>要注意 <code>s</code> 只有 4 个元素，其中 <code>s[2]</code> 又是一个 list，如果拆开写就更容易理解了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p = [<span class="string">'C'</span>, <span class="string">'C++'</span>]</span><br><span class="line">s = [<span class="string">'Python'</span>, <span class="string">'Java'</span>, p, <span class="string">'C#'</span>]</span><br><span class="line">print(s) <span class="comment"># ['Python', 'Java', ['C', 'C++'], 'C#']</span></span><br><span class="line">print(len(s)) <span class="comment"># 4</span></span><br></pre></td></tr></table></figure><p>要拿到<code>'C++'</code>可以写 <code>p[1]</code> 或者 <code>s[2][1]</code>，因此 <code>s</code> 可以看成是一个二维数组，类似的还有三维、四维……数组，不过很少用到。</p><p>如果一个 list 中一个元素也没有，就是一个空的 list，它的长度为0：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">L = []</span><br><span class="line">print(len(L)) <span class="comment"># 0</span></span><br></pre></td></tr></table></figure><ul><li><strong>访问</strong></li></ul><p>用索引来访问 list 中每一个位置的元素，记得索引是从 <code>0</code> 开始的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">classmates = [<span class="string">'Michael'</span>,<span class="string">'Bob'</span>,<span class="string">'Tracy'</span>]</span><br><span class="line">print(classmates[<span class="number">0</span>]) <span class="comment"># 输出 Michael</span></span><br></pre></td></tr></table></figure><p>当索引超出了范围时，Python 会报一个 <code>IndexError</code> 错误，所以，要确保索引不要越界，记得最后一个元素的索引是 <code>len(classmates) - 1</code>。</p><p>🚩 如果要取最后一个元素，除了计算索引位置外，还可以用 <code>-1</code> 做索引，直接获取最后一个元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">classmates = [<span class="string">'Michael'</span>,<span class="string">'Bob'</span>,<span class="string">'Tracy'</span>]</span><br><span class="line">print(classmates[<span class="number">-1</span>]) <span class="comment"># 输出 Tracy</span></span><br></pre></td></tr></table></figure><p>以此类推，可以获取倒数第 2 个、倒数第 3 个：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">classmates = [<span class="string">'Michael'</span>,<span class="string">'Bob'</span>,<span class="string">'Tracy'</span>]</span><br><span class="line">print(classmates[<span class="number">-1</span>]) <span class="comment"># Tracy</span></span><br><span class="line">print(classmates[<span class="number">-2</span>]) <span class="comment"># Bob</span></span><br><span class="line">print(classmates[<span class="number">-3</span>]) <span class="comment"># Michael</span></span><br></pre></td></tr></table></figure><ul><li><strong>插入</strong></li></ul><p>list 是一个可变的有序表，所以，可以利用 <code>append</code> 往 list 中追加元素到末尾：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">classmates.append(<span class="string">'WuGenQiang'</span>)</span><br></pre></td></tr></table></figure><p>也可以利用 <code>insert</code> 把元素插入到指定的位置，比如索引号为<code>1</code>的位置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">classmates.insert(<span class="number">1</span>,<span class="string">'MengLinLin'</span>)</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200611164620.png" alt="image-20200611164619720" /></p><ul><li><strong>删除</strong></li></ul><p>要删除 list 末尾的元素，用 <code>pop()</code> 方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">classmates.pop()</span><br></pre></td></tr></table></figure><p>要删除指定位置的元素，用 <code>pop(i)</code> 方法，其中 <code>i</code> 是索引位置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">classmates.pop(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200611165044.png" alt="image-20200611165043478" /></p><ul><li><strong>替换</strong></li></ul><p>要把某个元素替换成别的元素，可以直接赋值给对应的索引位置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">classmates[<span class="number">1</span>] = <span class="string">'Oliver'</span></span><br></pre></td></tr></table></figure><h5 id="ii-不可变有序列表-元组-tuple"><a class="markdownIt-Anchor" href="#ii-不可变有序列表-元组-tuple"></a> Ⅱ 不可变有序列表 - 元组 tuple ( )</h5><p>另一种有序列表叫元组：tuple。tuple 和 list 非常类似，但是 tuple 一旦初始化就不能修改，比如同样是列出同学的名字：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">classmates = (<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>)</span><br></pre></td></tr></table></figure><p>现在，classmates 这个 tuple 不能变了，它也没有 append()，insert() 这样的方法。其他获取元素的方法和 list 是一样的，你可以正常地使用 <code>classmates[0]</code>，<code>classmates[-1]</code>，但不能赋值成另外的元素。</p><p>!&gt; 不可变的 tuple 有什么意义？因为 tuple 不可变，所以代码更安全。如果可能，能用 tuple 代替 list 就尽量用 tuple。</p><p>🚨 <strong>tuple 的陷阱</strong>：当你定义一个 tuple 时，在定义的时候，tuple 的元素就必须被确定下来，比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">print(t) <span class="comment"># (1, 2)</span></span><br></pre></td></tr></table></figure><p>如果要定义一个空的 tuple，可以写成 <code>()</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = ()</span><br><span class="line">print(t) <span class="comment"># ()</span></span><br></pre></td></tr></table></figure><p>但是，要定义一个只有 1 个元素的 tuple，如果你这么定义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1</span>)</span><br><span class="line">print(t) <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><p>定义的不是 tuple，是 <code>1</code> 这个数！这是因为括号 <code>()</code> 既可以表示 tuple，又可以表示数学公式中的小括号，这就产生了歧义，因此，<strong>Python 规定，这种情况下，按小括号进行计算</strong>，计算结果自然是 <code>1</code>。</p><p>所以，<strong>只有 1 个元素的 tuple 定义时必须加一个逗号<code>,</code>，来消除歧义</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1</span>,)</span><br><span class="line">print(t) <span class="comment"># (1,)</span></span><br></pre></td></tr></table></figure><p>?&gt; Python 在显示只有 1 个元素的 tuple 时，也会加一个逗  <code>,</code>，以免你误解成数学计算意义上的括号。</p><p>最后来看一个 <strong>“可变的” tuple</strong> ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="string">'a'</span>, <span class="string">'b'</span>, [<span class="string">'A'</span>, <span class="string">'B'</span>])</span><br><span class="line">t[<span class="number">2</span>][<span class="number">0</span>] = <span class="string">'X'</span></span><br><span class="line">t[<span class="number">2</span>][<span class="number">1</span>] = <span class="string">'Y'</span></span><br><span class="line">print(t) <span class="comment"># ('a', 'b', ['X', 'Y'])</span></span><br></pre></td></tr></table></figure><p>这个 tuple 定义的时候有 3 个元素，分别是<code>'a'</code>，<code>'b'</code>和一个 list。不是说 tuple 一旦定义后就不可变了吗？怎么后来又变了？</p><p>别急，我们先看看定义的时候 tuple 包含的 3 个元素：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200611170359.png" alt="image-20200611170358099" /></p><p>当我们把 list 的元素 <code>'A'</code> 和 <code>'B'</code> 修改为 <code>'X'</code>和 <code>'Y'</code> 后，tuple 变为：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200611170516.png" alt="image-20200611170515905" /></p><p>表面上看，tuple 的元素确实变了，但其实变的不是 tuple 的元素，而是 list 的元素。tuple 一开始指向的 list 并没有改成别的 list，所以，⭐ <strong>tuple 所谓的 “不变” 是说，tuple 的每个元素，指向永远不变。即指向 <code>'a'</code>，就不能改成指向 <code>'b'</code>，指向一个 list，就不能改成指向其他对象，但指向的这个 list 本身是可变的！</strong></p><p>理解了 “指向不变” 后，要创建一个内容也不变的 tuple 怎么做？那就必须保证 tuple 的每一个元素本身也不能变。</p><h4 id="7-字典"><a class="markdownIt-Anchor" href="#7-字典"></a> ⑦ 字典</h4><h5 id="i-dictkey-value"><a class="markdownIt-Anchor" href="#i-dictkey-value"></a> Ⅰ dict（key - value） { }</h5><p>Python 内置了字典：dict 的支持，dict 全称 dictionary，在其他语言中也称为 map，使用键 - 值（key - value）存储，具有极快的查找速度。</p><ul><li><strong>创建</strong></li></ul><p>示例代码：学生姓名和成绩</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'Michael'</span>: <span class="number">95</span>, <span class="string">'Bob'</span>: <span class="number">75</span>, <span class="string">'Tracy'</span>: <span class="number">85</span>&#125;</span><br><span class="line">print(d) <span class="comment"># &#123;'Michael': 95, 'Bob': 75, 'Tracy': 85&#125;</span></span><br><span class="line">print(d[<span class="string">'Michael'</span>]) <span class="comment"># 95</span></span><br><span class="line"></span><br><span class="line">print(d[<span class="number">0</span>]) <span class="comment"># KeyError: 0</span></span><br></pre></td></tr></table></figure><p>为什么 dict 查找速度这么快？因为 dict 的实现原理和查字典是一样的。假设字典包含了 1 万个汉字，我们要查某一个字，一个办法是把字典从第一页往后翻，直到找到我们想要的字为止，这种方法就是在 list 中查找元素的方法，list 越大，查找越慢。</p><p>第二种方法是先在字典的索引表里（比如部首表）查这个字对应的页码，然后直接翻到该页，找到这个字。无论找哪个字，这种查找速度都非常快，不会随着字典大小的增加而变慢。</p><p>dict 就是第二种实现方式，给定一个名字，比如<code>'Michael'</code>，dict 在内部就可以直接计算出 <code>Michael</code> 对应的存放成绩的 “页码”，也就是 <code>95</code> 这个数字存放的内存地址，直接取出来，所以速度非常快。</p><p>把数据放入 dict 的方法，除了初始化时指定外，还可以通过 key 放入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d[<span class="string">'Adam'</span>] = <span class="number">67</span></span><br><span class="line">print(d[<span class="string">'Adam'</span>]) <span class="comment"># 67</span></span><br><span class="line">print(d) <span class="comment"># &#123;'Michael': 95, 'Bob': 75, 'Tracy': 85, 'Adam': 67&#125;</span></span><br></pre></td></tr></table></figure><ul><li><strong>判断 value 是否存在</strong></li></ul><p>由于一个 key 只能对应一个 value，所以，多次对一个 key 放入 value，后面的值会把前面的值冲掉：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d[<span class="string">'Adam'</span>] = <span class="number">67</span></span><br><span class="line">print(d[<span class="string">'Adam'</span>]) <span class="comment"># 67</span></span><br><span class="line">d[<span class="string">'Adam'</span>] = <span class="number">97</span></span><br><span class="line">print(d[<span class="string">'Adam'</span>]) <span class="comment"># 97</span></span><br></pre></td></tr></table></figure><p>如果 key 不存在，dict 就会报错：<code>KeyError</code>。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200611172244.png" alt="image-20200611172243031" /></p><p>要避免 key 不存在的错误，有两种办法，一是通过<code>in</code>判断 key 是否存在：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'Thomas'</span> <span class="keyword">in</span> d) <span class="comment"># False</span></span><br></pre></td></tr></table></figure><p>二是通过 dict 提供的 <code>get()</code> 方法，如果 key 不存在，可以返回 <code>None</code>，或者自己指定的 value：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(d.get(<span class="string">'Thomas'</span>))  <span class="comment"># None</span></span><br><span class="line">print(d.get(<span class="string">'Thomas'</span>, <span class="number">-1</span>))  <span class="comment"># -1</span></span><br></pre></td></tr></table></figure><ul><li><strong>删除</strong></li></ul><p>要删除一个 key，用 <code>pop(key)</code> 方法，对应的 value 也会从 dict 中删除：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d.pop(<span class="string">'Bob'</span>)</span><br></pre></td></tr></table></figure><p>!&gt; 请务必注意，dict 内部存放的顺序和 key 放入的顺序是没有关系的。</p><p>⭐ 和 list 比较，dict 有以下几个特点：</p><ul><li>查找和插入的速度极快，不会随着 key 的增加而变慢；</li><li>需要占用大量的内存，内存浪费多。</li></ul><p>而 list 相反：</p><ul><li>查找和插入的时间随着元素的增加而增加；</li><li>占用空间小，浪费内存很少。</li></ul><p>所以，dict 是用空间来换取时间的一种方法。</p><p>dict 可以用在需要高速查找的很多地方，在 Python 代码中几乎无处不在，正确使用 dict 非常重要，需要牢记的第一条就是 dict 的 key 必须是<strong>不可变对象</strong>。</p><p>这是因为 dict 根据 key 来计算 value 的存储位置，如果每次计算相同的 key 得出的结果不同，那 dict 内部就完全混乱了。这个通过 key 计算位置的算法称为哈希算法（Hash）。</p><p>要保证 hash 的正确性，作为 key 的对象就不能变。在 Python 中，字符串、整数等都是不可变的，因此，可以放心地作为 key。而 list 是可变的，就不能作为 key：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200611173458.png" alt="image-20200611173457932" /></p><h5 id="ii-setkey且-key-不可重复"><a class="markdownIt-Anchor" href="#ii-setkey且-key-不可重复"></a> Ⅱ set（key，且 key 不可重复） ([ ])</h5><p>set 和 dict 类似，也是一组 key 的集合，但不存储 value。由于 key 不能重复，所以，在 set 中，没有重复的 key。</p><p>set 和 dict 的唯一区别仅在于没有存储对应的 value，但是，set 的原理和 dict 一样，所以，同样<strong>不可以放入可变对象</strong>，因为无法判断两个可变对象是否相等，也就无法保证 set 内部 “不会有重复元素”。</p><ul><li><strong>创建</strong></li></ul><p>要创建一个 set，需要提供一个 list 作为输入集合：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">print(s) <span class="comment"># &#123;1, 2, 3&#125;</span></span><br></pre></td></tr></table></figure><p>注意，传入的参数 <code>[1, 2, 3]</code> 是一个 list，而显示的 <code>{1, 2, 3}</code> 只是告诉你这个 set 内部有 1，2，3 这 3 个元素，显示的顺序也不表示 set 是有序的。</p><p><strong>重复元素在 set 中自动被过滤：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = set([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>])</span><br><span class="line">print(s) <span class="comment"># &#123;1, 2, 3&#125;</span></span><br></pre></td></tr></table></figure><ul><li><strong>添加</strong></li></ul><p>通过 <code>add(key)</code> 方法可以添加元素到 set 中，可以重复添加，但不会有效果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s.add(<span class="number">4</span>)</span><br><span class="line">print(s) <span class="comment"># &#123;1, 2, 3, 4&#125;</span></span><br><span class="line">s.add(<span class="number">4</span>)</span><br><span class="line">print(s) <span class="comment"># &#123;1, 2, 3, 4&#125;</span></span><br></pre></td></tr></table></figure><ul><li><strong>删除</strong></li></ul><p>通过 <code>remove(key)</code> 方法可以删除元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s.remove(<span class="number">4</span>)</span><br><span class="line">print(s) <span class="comment"># &#123;1, 2, 3&#125;</span></span><br></pre></td></tr></table></figure><ul><li><strong>并集、交集操作</strong></li></ul><p>set 可以看成数学意义上的无序和无重复元素的集合，因此，两个 set 可以做数学意义上的交集、并集等操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1 = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">s2 = set([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">print(s1 &amp; s2) <span class="comment"># &#123;2, 3&#125;</span></span><br><span class="line">print((s1 | s2)) <span class="comment"># &#123;1, 2, 3, 4&#125;</span></span><br></pre></td></tr></table></figure><h3 id="132-再议不可变对象"><a class="markdownIt-Anchor" href="#132-再议不可变对象"></a> 1.3.2 再议不可变对象</h3><p>上面我们讲了，str 是不变对象，而 list 是可变对象。</p><p>对于可变对象，比如 list，对 list 进行操作，list 内部的内容是会变化的，比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>]</span><br><span class="line">a.sort()</span><br><span class="line">print(a) <span class="comment"># ['a', 'b', 'c']</span></span><br></pre></td></tr></table></figure><p>而对于不可变对象，比如 str，对 str 进行操作呢：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'abc'</span></span><br><span class="line">print(a.replace(<span class="string">'a'</span>, <span class="string">'A'</span>)) <span class="comment"># 'Abc'</span></span><br><span class="line">print(a) <span class="comment"># 'abc'</span></span><br></pre></td></tr></table></figure><p>虽然字符串有个 <code>replace()</code> 方法，也确实变出了 <code>'Abc'</code>，但变量 <code>a</code> 最后仍是 <code>'abc'</code>，应该怎么理解呢？</p><p>我们先把代码改成下面这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'abc'</span></span><br><span class="line">b = a.replace(<span class="string">'a'</span>, <span class="string">'A'</span>)</span><br><span class="line">print(b) <span class="comment"># 'Abc'</span></span><br><span class="line">print(a) <span class="comment"># 'abc'</span></span><br></pre></td></tr></table></figure><p>要始终牢记的是，<code>a</code> 是变量，而 <code>'abc'</code> 才是字符串对象！有些时候，我们经常说，对象 <code>a</code> 的内容是 <code>'abc'</code>，但其实是指，<code>a</code> 本身是一个变量，它指向的对象的内容才是 <code>'abc'</code>：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200611175124.png" alt="image-20200611175123150" /></p><p>当我们调用 <code>a.replace('a', 'A')</code> 时，实际上调用方法 <code>replace</code> 是作用在字符串对象 <code>'abc'</code> 上的，而这个方法虽然名字叫 <code>replace</code>，但却没有改变字符串 <code>'abc'</code> 的内容。相反，<code>replace</code> 方法创建了一个新字符串 <code>'Abc'</code> 并返回，如果我们用变量 <code>b</code> 指向该新字符串，就容易理解了，变量 <code>a</code> 仍指向原有的字符串 <code>'abc'</code>，但变量 <code>b</code> 却指向新字符串 <code>'Abc'</code> 了：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200611175232.png" alt="image-20200611175231653" /></p><p>所以，对于不变对象来说，调用对象自身的任意方法，也不会改变该对象自身的内容。相反，这些方法会创建新的对象并返回，这样，就保证了不可变对象本身永远是不可变的。</p><p>!&gt; 小结</p><ul><li>使用 key - value 存储结构的 dict 在 Python 中非常有用，选择不可变对象作为 key 很重要，最常用的 key 是字符串。</li><li>tuple 虽然是不变对象，但试试把<code>(1, 2, 3)</code>和<code>(1, [2, 3])</code>放入 dict 或 set 中，就会有新发现。</li></ul><h3 id="133-变量与常量"><a class="markdownIt-Anchor" href="#133-变量与常量"></a> 1.3.3 变量与常量</h3><h4 id="1-变量"><a class="markdownIt-Anchor" href="#1-变量"></a> ① 变量</h4><p>变量名必须是大小写英文、数字和 <code>_</code> 的组合，且不能用数字开头</p><p>在 Python 中，等号 <code>=</code> 是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">123</span> <span class="comment"># a是整数</span></span><br><span class="line">print(a)</span><br><span class="line">a = <span class="string">'ABC'</span> <span class="comment"># a变为字符串</span></span><br><span class="line">print(a)</span><br><span class="line">a = <span class="literal">True</span> <span class="comment"># a是一个布尔值True</span></span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><p>🚩 这种变量本身类型不固定的语言称之为 <strong>动态语言 (Python、…)</strong>，与之对应的是 <strong>静态语言（Java、C++、…）</strong>。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。</p><p>例如 Java 是静态语言，赋值语句如下（// 表示注释）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">123</span>; <span class="comment">// a是整数类型变量</span></span><br><span class="line">a = <span class="string">"ABC"</span>; <span class="comment">// 错误：不能把字符串赋给整型变量</span></span><br></pre></td></tr></table></figure><p>和静态语言相比，动态语言更灵活，就是这个原因。</p><p>请不要把赋值语句的等号等同于数学的等号。比如下面的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span></span><br><span class="line">x = x + <span class="number">2</span></span><br></pre></td></tr></table></figure><p>如果从数学上理解 <code>x = x + 2</code> 那无论如何是不成立的，在程序中，赋值语句先计算右侧的表达式 <code>x + 2</code>，得到结果 <code>12</code>，再赋给变量 <code>x</code>。由于 <code>x</code> 之前的值是 <code>10</code>，重新赋值后，<code>x</code> 的值变成 <code>12</code>。</p><p>最后，理解变量在计算机内存中的表示也非常重要。当我们写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'ABC'</span></span><br></pre></td></tr></table></figure><p>时，Python 解释器干了两件事情：</p><ul><li>在内存中创建了一个 <code>'ABC'</code> 的字符串；</li><li>在内存中创建了一个名为 <code>a</code> 的变量，并把它指向 <code>'ABC'</code>。</li></ul><p>🔥 也可以把一个变量 <code>a</code> 赋值给另一个变量 <code>b</code>，这个操作实际上是把变量 <code>b</code> 指向变量 <code>a</code> 所指向的数据，例如下面的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'ABC'</span></span><br><span class="line">b = a</span><br><span class="line">a = <span class="string">'XYZ'</span></span><br><span class="line">print(b) <span class="comment"># 输出 ABC</span></span><br></pre></td></tr></table></figure><p>最后一行打印出变量 <code>b</code> 的内容到底是<code>'ABC'</code>呢还是<code>'XYZ'</code>？如果从数学意义上理解，就会错误地得出 <code>b</code> 和 <code>a</code> 相同，也应该是<code>'XYZ'</code>，但实际上 <code>b</code> 的值是 <code>'ABC'</code>，让我们一行一行地执行代码，就可以看到到底发生了什么事：</p><ul><li><p>执行<code>a = 'ABC'</code>，解释器创建了字符串<code>'ABC'</code>和变量<code>a</code>，并把<code>a</code>指向<code>'ABC'</code>：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200611180919.png" alt="img" /></p></li><li><p>执行<code>b = a</code>，解释器创建了变量<code>b</code>，并把<code>b</code>指向<code>a</code>指向的字符串<code>'ABC'</code>：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200611180923.png" alt="img" /></p></li><li><p>执行<code>a = 'XYZ'</code>，解释器创建了字符串’XYZ’，并把<code>a</code>的指向改为<code>'XYZ'</code>，但<code>b</code>并没有更改：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200611180926.png" alt="img" /></p></li><li><p>所以，最后打印变量<code>b</code>的结果自然是<code>'ABC'</code>了。</p></li></ul><h4 id="2-常量"><a class="markdownIt-Anchor" href="#2-常量"></a> ② 常量</h4><p>所谓常量就是不能变的变量，比如常用的数学常数 π 就是一个常量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PI = <span class="number">3.14159265359</span></span><br></pre></td></tr></table></figure><p>在 Python 中，通常用<code>全部大写</code>的变量名表示常量。</p><p>但事实上 <code>PI</code> 仍然是一个变量，Python 根本没有任何机制保证 <code>PI</code> 不会被改变，所以，用全部大写的变量名表示常量只是一个习惯上的用法，如果你一定要改变变量 <code>PI</code> 的值，也没人能拦住你。</p><h3 id="134-字符串和编码"><a class="markdownIt-Anchor" href="#134-字符串和编码"></a> 1.3.4 字符串和编码</h3><h4 id="1-字符串编码问题"><a class="markdownIt-Anchor" href="#1-字符串编码问题"></a> ① 字符串编码问题</h4><p>我们已经讲过了，字符串也是一种数据类型，但是，字符串比较特殊的是还有一个编码问题。</p><p>因为计算机只能处理数字，如果要处理文本，就必须先把文本转换为数字才能处理。最早的计算机在设计时采用 8 个比特（bit）作为一个字节（byte），所以，一个字节能表示的最大的整数就是 255（二进制 11111111 = 十进制 255），如果要表示更大的整数，就必须用更多的字节。比如两个字节可以表示的最大整数是<code>65535</code>，4 个字节可以表示的最大整数是<code>4294967295</code>。</p><p>由于计算机是美国人发明的，因此，最早只有 127 个字符被编码到计算机里，也就是大小写英文字母、数字和一些符号，这个编码表被称为<code>ASCII</code>编码，比如大写字母<code>A</code>的编码是<code>65</code>，小写字母<code>z</code>的编码是<code>122</code>。</p><p>但是要处理中文显然一个字节是不够的，至少需要两个字节，而且还不能和 ASCII 编码冲突，所以，中国制定了<code>GB2312</code>编码，用来把中文编进去。</p><p>你可以想得到的是，全世界有上百种语言，日本把日文编到<code>Shift_JIS</code>里，韩国把韩文编到<code>Euc-kr</code>里，各国有各国的标准，就会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200623172826.png" alt="image-20200623172824974" /></p><p>因此，Unicode 应运而生。<strong>Unicode 把所有语言都统一到一套编码里，这样就不会再有乱码问题了。</strong></p><p>Unicode 标准也在不断发展，但最常用的是用两个字节表示一个字符（如果要用到非常偏僻的字符，就需要 4 个字节）。现代操作系统和大多数编程语言都直接支持 Unicode。</p><p>🚩 现在，捋一捋 ASCII 编码和 Unicode 编码的区别：<strong>ASCII 编码是 1 个字节，而 Unicode 编码通常是 2 个字节。</strong></p><ul><li>字母<code>A</code>用 ASCII 编码是十进制的<code>65</code>，二进制的<code>01000001</code>；</li><li>字符<code>0</code>用 ASCII 编码是十进制的<code>48</code>，二进制的<code>00110000</code>，注意字符<code>'0'</code>和整数<code>0</code>是不同的；</li><li>汉字<code>中</code>已经超出了 ASCII 编码的范围，用 Unicode 编码是十进制的<code>20013</code>，二进制的<code>01001110 00101101</code>。</li></ul><p>你可以猜测，如果把 ASCII 编码的<code>A</code>用 Unicode 编码，只需要在前面补 0 就可以，因此，<code>A</code>的 Unicode 编码是<code>00000000 01000001</code>。</p><p>新的问题又出现了：如果统一成 Unicode 编码，乱码问题从此消失了。但是，如果你写的文本基本上全部是英文的话，用 Unicode 编码比 ASCII 编码需要<code>多一倍</code>的<code>存储空间</code>，在存储和传输上就十分不划算。</p><p>所以，本着节约的精神，又出现了把 Unicode 编码转化为 “可变长编码” 的<code>UTF-8</code>编码。UTF-8 编码把一个 Unicode 字符根据不同的数字大小编码成 1-6 个字节，常用的英文字母被编码成 1 个字节，汉字通常是 3 个字节，只有很生僻的字符才会被编码成 4-6 个字节。如果你要传输的文本包含大量英文字符，用 UTF-8 编码就能节省空间：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200623173835.png" alt="image-20200623173834408" /></p><p>从上面的表格还可以发现，UTF-8 编码有一个额外的好处，就是 ASCII 编码实际上可以被看成是 UTF-8 编码的一部分，所以，大量只支持 ASCII 编码的历史遗留软件可以在 UTF-8 编码下继续工作。</p><p>搞清楚了 ASCII、Unicode 和 UTF-8 的关系，我们就可以总结一下现在计算机系统通用的字符编码工作方式：</p><p>🚩 <strong>在计算机内存中，统一使用 Unicode 编码，当需要保存到硬盘或者需要传输的时候，就转换为 UTF-8 编码。</strong></p><p>用记事本编辑的时候，从文件读取的 UTF-8 字符被转换为 Unicode 字符到内存里，编辑完成后，保存的时候再把 Unicode 转换为 UTF-8 保存到文件：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200623174151.png" alt="image-20200623174150679" /></p><p>浏览网页的时候，服务器会把动态生成的 Unicode 内容转换为 UTF-8 再传输到浏览器：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200623174255.png" alt="image-20200623174254190" /></p><p>所以你看到很多网页的源码上会有类似 <code>&lt;meta charset=&quot;UTF-8&quot; /&gt;</code> 的信息，表示该网页正是用的 UTF-8 编码。</p><h4 id="2-字符串详解"><a class="markdownIt-Anchor" href="#2-字符串详解"></a> ② 字符串详解</h4><p>搞清楚了令人头疼的字符编码问题后，我们再来研究 Python 的字符串。</p><p>在最新的 Python 3 版本中，字符串是以 Unicode 编码的，也就是说，<strong>Python 的字符串支持多语言</strong>，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'包含中文的str'</span>)</span><br><span class="line"><span class="comment"># 输出：包含中文的str</span></span><br></pre></td></tr></table></figure><p>对于单个字符的编码，Python 提供了<code>ord()</code>函数获取字符的整数表示，<code>chr()</code>函数把编码转换为对应的字符：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ord(<span class="string">'A'</span>) <span class="comment"># 65</span></span><br><span class="line">ord(<span class="string">'中'</span>) <span class="comment"># 20013</span></span><br><span class="line">chr(<span class="number">66</span>) <span class="comment"># 'B'</span></span><br><span class="line">chr(<span class="number">25991</span>) <span class="comment"># '文'</span></span><br></pre></td></tr></table></figure><p>如果知道字符的整数编码，还可以用十六进制这么写<code>str</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'\u4e2d\u6587'</span>) <span class="comment"># 中文</span></span><br></pre></td></tr></table></figure><p>两种写法完全是等价的。</p><p>由于 Python 的字符串类型是<code>str</code>，在内存中以 Unicode 表示，一个字符对应若干个字节。如果要在网络上传输，或者保存到磁盘上，就需要把<code>str</code>变为以字节为单位的<code>bytes</code>。</p><p>Python 对<code>bytes</code>类型的数据用带<code>b</code>前缀的单引号或双引号表示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">b'ABC'</span></span><br></pre></td></tr></table></figure><p>要注意区分<code>'ABC'</code>和<code>b'ABC'</code>，前者是<code>str</code>，后者虽然内容显示得和前者一样，但<code>bytes</code>的每个字符都只占用一个字节。</p><p>以 Unicode 表示的<code>str</code>通过<code>encode()</code>方法可以编码为指定的<code>bytes</code>，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'ABC'</span>.encode(<span class="string">'ascii'</span>)) <span class="comment"># b'ABC'</span></span><br><span class="line">print(<span class="string">'中文'</span>.encode(<span class="string">'utf-8'</span>)) <span class="comment"># b'\xe4\xb8\xad\xe6\x96\x87'</span></span><br></pre></td></tr></table></figure><p>纯英文的<code>str</code>可以用<code>ASCII</code>编码为<code>bytes</code>，内容是一样的，含有中文的<code>str</code>可以用<code>UTF-8</code>编码为<code>bytes</code>。<strong>含有中文的<code>str</code>无法用<code>ASCII</code>编码</strong>，因为中文编码的范围超过了<code>ASCII</code>编码的范围，Python 会报错。</p><p>反过来，如果我们从网络或磁盘上读取了字节流，那么读到的数据就是<code>bytes</code>。要把<code>bytes</code>变为<code>str</code>，就需要用<code>decode()</code>方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">b'ABC'</span>.decode(<span class="string">'ascii'</span>))</span><br><span class="line">print(<span class="string">b'\xe4\xb8\xad\xe6\x96\x87'</span>.decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><p>如果<code>bytes</code>中包含无法解码的字节，<code>decode()</code>方法会报错：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200623175619.png" alt="image-20200623175618702" /></p><p>如果<code>bytes</code>中只有一小部分无效的字节，可以传入<code>errors='ignore'</code>忽略错误的字节：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200623175707.png" alt="image-20200623175706636" /></p><p>要计算<code>str</code>包含多少个字符，可以用<code>len()</code>函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(len(<span class="string">'ABC'</span>)) <span class="comment"># 3</span></span><br><span class="line">print(len(<span class="string">'中文'</span>)) <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><p><code>len()</code>函数计算的是<code>str</code>的字符数，如果换成<code>bytes</code>，<code>len()</code>函数就计算字节数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(len(<span class="string">b'ABC'</span>)) <span class="comment"># 3</span></span><br><span class="line">print(len(<span class="string">b'\xe4\xb8\xad\xe6\x96\x87'</span>)) <span class="comment"># 6</span></span><br><span class="line">print(len(<span class="string">'中文'</span>.encode(<span class="string">'utf-8'</span>))) <span class="comment"># 6</span></span><br></pre></td></tr></table></figure><p>可见，1 个中文字符经过 UTF-8 编码后通常会占用 3 个字节，而 1 个英文字符只占用 1 个字节。</p><blockquote><p>🚨 在操作字符串时，我们经常遇到<code>str</code>和<code>bytes</code>的互相转换。为了避免乱码问题，应当始终坚持使用 UTF-8 编码对<code>str</code>和<code>bytes</code>进行转换。</p><p>由于 Python 源代码也是一个文本文件，所以，当你的源代码中包含中文的时候，<strong>在保存源代码时，就需要务必指定保存为 UTF-8 编码</strong>。当 Python 解释器读取源代码时，为了让它按 UTF-8 编码读取，我们通常在文件开头写上这两行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-CopyErrorOK!</span></span><br></pre></td></tr></table></figure><p>第一行注释是为了告诉 Linux/OS X 系统，这是一个 Python 可执行程序，Windows 系统会忽略这个注释；</p><p>第二行注释是为了告诉 Python 解释器，按照 UTF-8 编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。</p></blockquote><h4 id="3-格式化"><a class="markdownIt-Anchor" href="#3-格式化"></a> ③ 格式化</h4><p>最后一个常见的问题是如何<code>输出格式化的字符串</code>。我们经常会输出类似<code>'亲爱的 xxx 你好！你 xx 月的话费是 xx，余额是 xx'</code>之类的字符串，而 xxx 的内容都是根据变量变化的，所以，需要一种简便的格式化字符串的方式。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200623180526.png" alt="image-20200623180524717" /></p><p>在 Python 中，采用的格式化方式和 C 语言是一致的，用<code>%</code>实现，举例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'Hello, %s'</span> % <span class="string">'world'</span>) <span class="comment"># Hello, world</span></span><br><span class="line">print(<span class="string">'Hello, %s, you have %d money'</span> %(<span class="string">'WuGenQiang'</span>,<span class="number">100</span>))</span><br><span class="line"><span class="comment"># Hello, WuGenQiang, you have 100 money</span></span><br></pre></td></tr></table></figure><p>你可能猜到了，<code>%</code>运算符就是用来格式化字符串的。在字符串内部，<code>%s</code>表示用字符串替换，<code>%d</code>表示用整数替换，有几个<code>%?</code>占位符，后面就跟几个变量或者值，顺序要对应好。如果只有一个<code>%?</code>，括号可以省略。</p><p>常见的占位符有：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200623181029.png" alt="image-20200623181028546" /></p><p>其中，格式化整数和浮点数还可以指定是否补 0 和整数与小数的位数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'%2d-%02d'</span> % (<span class="number">3</span>, <span class="number">1</span>)) <span class="comment">#  3-01</span></span><br><span class="line">print(<span class="string">'%.2f'</span> % <span class="number">3.1415926</span>) <span class="comment"># 3.14</span></span><br></pre></td></tr></table></figure><p>如果你不太确定应该用什么，<code>%s</code>永远起作用，它会把任何数据类型转换为字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'Age: %s Gender: %s'</span> % (<span class="number">25</span>, <span class="literal">True</span>))</span><br><span class="line"><span class="comment"># 输出：Age: 25 Gender: True</span></span><br></pre></td></tr></table></figure><p>有些时候，字符串里面的<code>%</code>是一个普通字符怎么办？这个时候就需要转义，用<code>%%</code>来表示一个<code>%</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(‘growth rate: %d %%<span class="string">' % 7)</span></span><br><span class="line"><span class="string"># 输出：'</span>growth rate: <span class="number">7</span> %<span class="string">'</span></span><br></pre></td></tr></table></figure><h4 id="4-format"><a class="markdownIt-Anchor" href="#4-format"></a> ④ format()</h4><p>另一种格式化字符串的方法是使用字符串的<code>format()</code>方法，它会用传入的参数依次替换字符串内的占位符<code>{0}</code>、<code>{1}</code>……，不过这种方式写起来比 % 要麻烦得多：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'Hello, &#123;0&#125;, 成绩提升了 &#123;1:.1f&#125;%'</span>.format(<span class="string">'小明'</span>, <span class="number">17.125</span>))</span><br><span class="line"><span class="comment"># 输出：Hello, 小明, 成绩提升了 17.1%</span></span><br></pre></td></tr></table></figure><blockquote><p>✏️ 练习题：</p></blockquote><p>【题目】小明的成绩从去年的 72 分提升到了今年的 85 分，请计算小明成绩提升的百分点，并用字符串格式化显示出<code>'xx.x%'</code>，只保留小数点后 1 位：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">score1 = <span class="number">72</span></span><br><span class="line">score2 = <span class="number">85</span></span><br><span class="line">r = (score2 - score1) * <span class="number">100</span> / score1</span><br><span class="line">print(<span class="string">'%.1f %%'</span> %r)</span><br></pre></td></tr></table></figure><h3 id="135-条件判断"><a class="markdownIt-Anchor" href="#135-条件判断"></a> 1.3.5 条件判断</h3><p>计算机之所以能做很多自动化的任务，因为它可以自己做<code>条件判断</code>。</p><p>比如，输入用户年龄，根据年龄打印不同的内容，在 Python 程序中，用<code>if</code>语句实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">20</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">'your age is'</span>, age)</span><br><span class="line">    print(<span class="string">'adult'</span>)</span><br></pre></td></tr></table></figure><p>根据 Python 的缩进规则，如果<code>if</code>语句判断是<code>True</code>，就把缩进的两行 print 语句执行了，否则，什么也不做。</p><p>也可以给<code>if</code>添加一个<code>else</code>语句，意思是，如果<code>if</code>判断是<code>False</code>，不要执行<code>if</code>的内容，去把<code>else</code>执行了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">3</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">'your age is'</span>, age)</span><br><span class="line">    print(<span class="string">'adult'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'your age is'</span>, age)</span><br><span class="line">    print(<span class="string">'teenager'</span>)</span><br></pre></td></tr></table></figure><p>!&gt; 注意不要少写了冒号<code>:</code>。</p><p>当然上面的判断是很粗略的，完全可以用<code>elif</code>做更细致的判断：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">3</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">'adult'</span>)</span><br><span class="line"><span class="keyword">elif</span> age &gt;= <span class="number">6</span>:</span><br><span class="line">    print(<span class="string">'teenager'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'kid'</span>)</span><br></pre></td></tr></table></figure><p><code>elif</code>是<code>else if</code>的缩写，完全可以有多个<code>elif</code>，所以<code>if</code>语句的完整形式就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> &lt;条件判断<span class="number">1</span>&gt;:</span><br><span class="line">    &lt;执行<span class="number">1</span>&gt;</span><br><span class="line"><span class="keyword">elif</span> &lt;条件判断<span class="number">2</span>&gt;:</span><br><span class="line">    &lt;执行<span class="number">2</span>&gt;</span><br><span class="line"><span class="keyword">elif</span> &lt;条件判断<span class="number">3</span>&gt;:</span><br><span class="line">    &lt;执行<span class="number">3</span>&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;执行<span class="number">4</span>&gt;</span><br></pre></td></tr></table></figure><p>⭐ <code>if</code>语句执行有个特点，它是从上往下判断，如果在某个判断上是<code>True</code>，把该判断对应的语句执行后，就忽略掉剩下的<code>elif</code>和<code>else</code>，所以，下面的程序打印的是<code>teenager</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">20</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">6</span>:</span><br><span class="line">    print(<span class="string">'teenager'</span>)</span><br><span class="line"><span class="keyword">elif</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">'adult'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'kid'</span>)</span><br></pre></td></tr></table></figure><p><code>if</code>判断条件还可以简写，比如写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> x:</span><br><span class="line">    print(<span class="string">'True'</span>)</span><br></pre></td></tr></table></figure><p>只要<code>x</code>是非零数值、非空字符串、非空 list 等，就判断为<code>True</code>，否则为<code>False</code>。</p><blockquote><p>再议 input</p></blockquote><p>最后看一个有问题的条件判断。很多同学会用<code>input()</code>读取用户的输入，这样可以自己输入，程序运行得更有意思：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">birth = input(<span class="string">'birth: '</span>)</span><br><span class="line"><span class="keyword">if</span> birth &lt; <span class="number">2000</span>:</span><br><span class="line">    print(<span class="string">'00前'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'00后'</span>)</span><br></pre></td></tr></table></figure><p>输入<code>1982</code>，结果报错：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: unorderable types: str() &gt; int()</span><br></pre></td></tr></table></figure><p>这是因为<code>input()</code>返回的数据类型是<code>str</code>，<code>str</code>不能直接和整数比较，必须先把<code>str</code>转换成整数。Python 提供了<code>int()</code>函数来完成这件事情：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = input(<span class="string">'birth: '</span>)</span><br><span class="line">birth = int(s)</span><br><span class="line"><span class="keyword">if</span> birth &lt; <span class="number">2000</span>:</span><br><span class="line">    print(<span class="string">'00前'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'00后'</span>)</span><br></pre></td></tr></table></figure><p>再次运行，就可以得到正确地结果。但是，如果输入<code>abc</code>呢？又会得到一个错误信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ValueError: invalid literal <span class="keyword">for</span> int() <span class="keyword">with</span> base <span class="number">10</span>: <span class="string">'abc'</span></span><br></pre></td></tr></table></figure><p>原来<code>int()</code>函数发现一个字符串并不是合法的数字时就会报错，程序就退出了。</p><p>如何检查并捕获程序运行期的错误呢？后面的错误和调试会讲到。</p><blockquote><p>✏️ 练习题：</p></blockquote><p>小明身高 1.75，体重 80.5kg。请根据 BMI 公式（体重除以身高的平方）帮小明计算他的 BMI 指数，并根据 BMI 指数：</p><ul><li>低于 18.5 ：过轻</li><li>18.5-25 ：正常</li><li>25-28 ：过重</li><li>28-32 ：肥胖</li><li>高于 32 ：严重肥胖</li></ul><p>用<code>if-elif</code>判断并打印结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">height = <span class="number">1.75</span></span><br><span class="line">weight = <span class="number">80.5</span></span><br><span class="line">bmi = weight / (height * height)</span><br><span class="line"><span class="keyword">if</span> bmi &gt;= <span class="number">32</span>:</span><br><span class="line">    print(<span class="string">'严重肥胖'</span>)</span><br><span class="line"><span class="keyword">elif</span> bmi &lt; <span class="number">32</span> <span class="keyword">and</span> bmi &gt;= <span class="number">28</span>:</span><br><span class="line">    print(<span class="string">'肥胖'</span>)</span><br><span class="line"><span class="keyword">elif</span> bmi &lt; <span class="number">28</span> <span class="keyword">and</span> bmi &gt;= <span class="number">25</span>:</span><br><span class="line">    print(<span class="string">'过重'</span>)</span><br><span class="line"><span class="keyword">elif</span> bmi &lt; <span class="number">25</span> <span class="keyword">and</span> bmi &gt;= <span class="number">18.5</span>:</span><br><span class="line">    print(<span class="string">'正常'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'过轻'</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="136-循环"><a class="markdownIt-Anchor" href="#136-循环"></a> 1.3.6 循环</h3><p>要计算 1+2+3，我们可以直接写表达式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="number">1</span> + <span class="number">2</span> + <span class="number">3</span>) <span class="comment"># 6</span></span><br></pre></td></tr></table></figure><p>要计算 1+2+3+…+10，勉强也能写出来。</p><p>但是，要计算 1+2+3+…+10000，直接写表达式就不可能了。</p><p>为了让计算机能计算成千上万次的重复运算，我们就需要循环语句。</p><h4 id="1-for-in"><a class="markdownIt-Anchor" href="#1-for-in"></a> ① for … in</h4><p>Python 的循环有两种，一种是 <code>for...in</code> 循环，依次把 list 或 tuple 中的每个元素迭代出来，看例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    print(name)</span><br></pre></td></tr></table></figure><p>执行这段代码，会依次打印<code>names</code>的每一个元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Michael</span><br><span class="line">Bob</span><br><span class="line">Tracy</span><br></pre></td></tr></table></figure><p>所以<code>for x in ...</code>循环就是把每个元素代入变量<code>x</code>，然后执行缩进块的语句。</p><p>再比如我们想计算 1-10 的整数之和，可以用一个<code>sum</code>变量做累加：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]:</span><br><span class="line">    sum = sum + x</span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure><p>如果要计算 1-100 的整数之和，从 1 写到 100 有点困难，幸好 Python 提供一个<code>range()</code>函数，可以生成一个整数序列，再通过<code>list()</code>函数可以转换为 list。比如<code>range(5)</code>生成的序列是从 0 开始小于 5 的整数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = list(range(<span class="number">5</span>))</span><br><span class="line">print(a) <span class="comment"># [0, 1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><p><code>range(101)</code>就可以生成 0-100 的整数序列，计算如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">101</span>):</span><br><span class="line">    sum = sum + x</span><br><span class="line">print(sum) <span class="comment"># 5050</span></span><br></pre></td></tr></table></figure><h4 id="2-while-循环"><a class="markdownIt-Anchor" href="#2-while-循环"></a> ② while 循环</h4><p>第二种循环是 while 循环，只要条件满足，就不断循环，条件不满足时退出循环。</p><p>比如我们要计算 100 以内所有奇数之和，可以用 while 循环实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sum = <span class="number">0</span></span><br><span class="line">n = <span class="number">99</span></span><br><span class="line"><span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">    sum = sum + n</span><br><span class="line">    n = n - <span class="number">2</span></span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure><p>在循环内部变量<code>n</code>不断自减，直到变为<code>-1</code>时，不再满足 while 条件，循环退出。</p><blockquote><p>✏️ 练习题：</p></blockquote><p>请利用循环依次对 list 中的每个名字打印出<code>Hello, xxx!</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="string">'Bart'</span>, <span class="string">'Lisa'</span>, <span class="string">'Adam'</span>]</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> L:</span><br><span class="line">    print(<span class="string">'Hello, '</span>+item)</span><br></pre></td></tr></table></figure><h4 id="3-break"><a class="markdownIt-Anchor" href="#3-break"></a> ③ break</h4><p>在循环中，<code>break</code>语句可以提前退出循环。例如，本来要循环打印 1～100 的数字：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> n &lt;= <span class="number">100</span>:</span><br><span class="line">    print(n)</span><br><span class="line">    n = n + <span class="number">1</span></span><br><span class="line">print(<span class="string">'END'</span>)</span><br></pre></td></tr></table></figure><p>上面的代码可以打印出 1~100。</p><p>如果要提前结束循环，可以用<code>break</code>语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> n &lt;= <span class="number">100</span>:</span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">10</span>: <span class="comment"># 当n = 11时，条件满足，执行break语句</span></span><br><span class="line">        <span class="keyword">break</span> <span class="comment"># break语句会结束当前循环</span></span><br><span class="line">    print(n)</span><br><span class="line">    n = n + <span class="number">1</span></span><br><span class="line">print(<span class="string">'END'</span>)</span><br></pre></td></tr></table></figure><p>执行上面的代码可以看到，打印出 1~10 后，紧接着打印<code>END</code>，程序结束。</p><p>可见<code>break</code>的作用是提前结束循环。</p><h4 id="4-continue"><a class="markdownIt-Anchor" href="#4-continue"></a> ④ continue</h4><p>在循环过程中，也可以通过<code>continue</code>语句，跳过当前的这次循环，直接开始下一次循环。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> n &lt; <span class="number">10</span>:</span><br><span class="line">    n = n + <span class="number">1</span></span><br><span class="line">    print(n)</span><br></pre></td></tr></table></figure><p>上面的程序可以打印出 1～10。但是，如果我们想只打印奇数，可以用<code>continue</code>语句跳过某些循环：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> n &lt; <span class="number">10</span>:</span><br><span class="line">    n = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>: <span class="comment"># 如果n是偶数，执行continue语句</span></span><br><span class="line">        <span class="keyword">continue</span> <span class="comment"># continue语句会直接继续下一轮循环，后续的print()语句不会执行</span></span><br><span class="line">    print(n)</span><br></pre></td></tr></table></figure><p>执行上面的代码可以看到，打印的不再是 1～10，而是 1，3，5，7，9。</p><p>可见<code>continue</code>的作用是提前结束本轮循环，并直接开始下一轮循环。</p><blockquote><p>✏️ 总结：</p></blockquote><p>循环是让计算机做重复任务的有效的方法。</p><p><code>break</code>语句可以在循环过程中直接退出循环，而<code>continue</code>语句可以提前结束本轮循环，并直接开始下一轮循环。这两个语句通常都必须配合<code>if</code>语句使用。</p><p>要特别注意，不要滥用<code>break</code>和<code>continue</code>语句。<code>break</code>和<code>continue</code>会造成代码执行逻辑分叉过多，容易出错。大多数循环并不需要用到<code>break</code>和<code>continue</code>语句，上面的两个例子，都可以通过改写循环条件或者修改循环逻辑，去掉<code>break</code>和<code>continue</code>语句。</p><p>有些时候，如果代码写得有问题，会让程序陷入“死循环”，也就是永远循环下去。这时可以用<code>Ctrl+C</code>退出程序，或者强制结束 Python 进程。</p><h2 id="14-参考资料"><a class="markdownIt-Anchor" href="#14-参考资料"></a> 1.4 参考资料</h2><ul><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017063413904832" target="_blank" rel="noopener">廖雪峰 - Python 3.x - Python 基础</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python/Anaconda/Anaconda入门指南</title>
      <link href="/2020/08/15/Python/Anaconda/Anaconda%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2020/08/15/Python/Anaconda/Anaconda%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="anaconda-入门指南"><a class="markdownIt-Anchor" href="#anaconda-入门指南"></a> Anaconda 入门指南</h1><h2 id="一-下载安装-anaconda"><a class="markdownIt-Anchor" href="#一-下载安装-anaconda"></a> 一、下载安装 Anaconda</h2><p>1、下载地址：<a href="https://www.anaconda.com/products/individual" target="_blank" rel="noopener">Anaconda</a></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200528104836.png" alt="image-20200528104813205" /></p><p>推荐下载 python3 版本, 毕竟未来 python2 是要停止维护的。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200528105150.png" alt="image-20200528105149268" /></p><p>2、安装 Anaconda</p><p>按照安装程序提示一步步安装就好了, 安装完成之后会多几个应用：</p><ul><li><strong>Anaconda Navigtor</strong> ：用于管理工具包和环境的图形用户界面，后续涉及的众多管理命令也可以在 Navigator 中手工实现。</li><li><strong>Jupyter notebook</strong> ：基于 web 的交互式计算环境，可以编辑易于人们阅读的文档，用于展示数据分析的过程。</li><li><strong>qtconsole</strong> ：一个可执行 IPython 的仿终端图形界面程序，相比 Python Shell 界面，qtconsole 可以直接显示代码生成的图形，实现多行代码输入执行，以及内置许多有用的功能和函数。</li><li><strong>spyder</strong> ：一个使用 Python 语言、跨平台的、科学运算集成开发环境。</li></ul><h2 id="二-配置环境变量"><a class="markdownIt-Anchor" href="#二-配置环境变量"></a> 二、配置环境变量</h2><p>如果是 windows 的话需要去 <code>控制面板\系统和安全\系统\高级系统设置\环境变量\用户变量\PATH</code> 中添加 anaconda 的安装目录的 Scripts 文件夹，比如我的路径是<code>D:\developer_tools\python3\Anaconda3\Scripts</code>，看个人安装路径不同需要自己调整。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200528110349.png" alt="image-20200528110347519" /></p><p>之后就可以打开命令行(最好用管理员模式打开) 输入 <code>conda --version</code></p><p>如果输出<code>conda 4.8.2</code>之类的就说明环境变量设置成功了。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200528111113.png" alt="image-20200528111112375" /></p><p>为了避免可能发生的错误，我们在命令行输入<code>conda upgrade --all</code> 先把所有工具包进行升级。</p><h2 id="三-管理虚拟环境"><a class="markdownIt-Anchor" href="#三-管理虚拟环境"></a> 三、管理虚拟环境</h2><p>接下来我们就可以用 Anaconda 来创建我们一个个独立的 Python 环境了。接下来的例子都是在命令行操作的，请打开你的命令行吧。</p><h3 id="1-activate"><a class="markdownIt-Anchor" href="#1-activate"></a> 1. activate</h3><p>activate 能将我们引入 anaconda 设定的虚拟环境中，如果你后面什么参数都不加那么会进入 anaconda 自带的 base 环境。</p><p>你可以输入 python 试试，这样会进入 base 环境的 python 解释器，如果你把原来环境中 python 环境去除掉会更能体会到， 这个时候在命令行中使用的已经不是你原来的 python 而是 base 环境下的 python。而命令行前面也会多一个<code>(base)</code> 说明当前我们处于的是 base 环境下。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200528120616.png" alt="image-20200528120615920" /></p><h3 id="2-与-pycharm-连接"><a class="markdownIt-Anchor" href="#2-与-pycharm-连接"></a> 2. 与 pycharm 连接</h3><p>在工作环境中我们会集成开发环境去编码，这里推荐 JB 公司的 pycharm，而 pycharm 也能很方便的和 anaconda 的虚拟环境结合。</p><p>在<code>Setting =&gt; Project =&gt; Project Interpreter</code> 里面修改 Project Interpreter , 点击齿轮标志再点击 Add Local 为你某个环境的 python.exe 解释器就行了。</p><h2 id="四-使用-jupyter-notebook"><a class="markdownIt-Anchor" href="#四-使用-jupyter-notebook"></a> 四、使用 Jupyter notebook</h2><blockquote><p>方便检查数据</p></blockquote><p>官网：<a href="https://jupyter.org/" target="_blank" rel="noopener">https://jupyter.org/</a></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200531132633.png" alt="image-20200531132632083" /></p><p>启动 <code>Jupyter notebook</code></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200531180131.png" alt="image-20200531180130207" /></p><p>然后会看到下面：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200531180155.png" alt="image-20200531180154403" /></p><p>自动跳转打开 127.0.0.1:8888/</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200531180527.png" alt="image-20200531180526658" /></p><p>新建 Python3 进行代码编写：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200531180656.png" alt="image-20200531180654772" /></p><p>然后跳转至下面页面：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200531180816.png" alt="image-20200531180814664" /></p><blockquote><p>加速使用 Jupyter notebook</p></blockquote><ul><li><a href="Python/Jupyter-notebook%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97.md">Jupyter - notebook 使用指南</a></li></ul><p>接着进行遨游吧！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python/6小时Python入门/6小时Python入门</title>
      <link href="/2020/08/15/Python/6%E5%B0%8F%E6%97%B6Python%E5%85%A5%E9%97%A8/6%E5%B0%8F%E6%97%B6Python%E5%85%A5%E9%97%A8/"/>
      <url>/2020/08/15/Python/6%E5%B0%8F%E6%97%B6Python%E5%85%A5%E9%97%A8/6%E5%B0%8F%E6%97%B6Python%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="6-小时-python-入门"><a class="markdownIt-Anchor" href="#6-小时-python-入门"></a> 6 小时 Python 入门</h1><blockquote><p>以下操作均在 Windows 环境下进行操作，先说明一下哈</p></blockquote><h2 id="一-安装-python"><a class="markdownIt-Anchor" href="#一-安装-python"></a> 一、安装 Python</h2><p>1、官网下载 Python</p><p>进入官网（<a href="https://www.python.org/" target="_blank" rel="noopener">https://www.python.org</a>），点击 Downloads，选择要下载的版本：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517223149.png" alt="image-20200517223148826" /></p><p>2、安装 Python</p><p>安装时注意下图勾选部分一定要勾选：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517223528.png" alt="image-20200517223527044" /></p><h2 id="二-安装代码编辑器-pycharm"><a class="markdownIt-Anchor" href="#二-安装代码编辑器-pycharm"></a> 二、安装代码编辑器 PyCharm</h2><p>1、官网下载 PyCharm</p><p>进入官网（<a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">https://www.jetbrains.com/pycharm</a>），点击 Downloads，选择要下载的版本：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517223349.png" alt="image-20200517223348661" /></p><p>2、安装 PyCharm</p><p>设置安装路径之后，一直点 next 即可。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517224624.png" alt="image-20200517224622654" /></p><p>3、优化 PyCharm 使用</p><ul><li><a href="Python/PyCharm%E4%BC%98%E5%8C%96%E4%BD%BF%E7%94%A8.md">PyCharm 优化使用</a></li></ul><h2 id="三-helloworld"><a class="markdownIt-Anchor" href="#三-helloworld"></a> 三、HelloWorld</h2><p>创建第一个项目 HelloWorld --&gt; 创建文件 <a href="http://app.py" target="_blank" rel="noopener">app.py</a> --&gt; 写入代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"HelloWorld"</span>)</span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517225659.png" alt="image-20200517225658342" /></p><h2 id="四-python-语法"><a class="markdownIt-Anchor" href="#四-python-语法"></a> 四、Python 语法</h2><p>看语法部分之前，推荐直接看下面入门练习题，潜移默化中对 Python 基本语法会有一定了解之后，再回来看这一部分，会更加熟悉 Python 的使用！</p><ul><li><a href="Python/Python%E8%AF%AD%E6%B3%95.md">Python 语法使用要熟记于心</a></li></ul><h2 id="五-入门练习题"><a class="markdownIt-Anchor" href="#五-入门练习题"></a> 五、入门练习题</h2><h3 id="1打印-10-个"><a class="markdownIt-Anchor" href="#1打印-10-个"></a> 1.打印 10 个 *</h3><blockquote><p>使用到表达式</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'*'</span> * <span class="number">10</span>)</span><br></pre></td></tr></table></figure><h3 id="2打印价格"><a class="markdownIt-Anchor" href="#2打印价格"></a> 2.打印价格</h3><blockquote><p>使用到变量</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">price = <span class="number">10</span></span><br><span class="line">print(price)</span><br></pre></td></tr></table></figure><h3 id="3描述医院病人的信息"><a class="markdownIt-Anchor" href="#3描述医院病人的信息"></a> 3.描述医院病人的信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@Time        : 2020/5/18</span></span><br><span class="line"><span class="string">@Author      : WuGenQiang</span></span><br><span class="line"><span class="string">@File        : hospital</span></span><br><span class="line"><span class="string">@Description : 描述医院病人的信息</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">full_name = <span class="string">'John Smith'</span></span><br><span class="line">age = <span class="number">20</span></span><br><span class="line">is_new = <span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="4接收用户输入打印问候信息"><a class="markdownIt-Anchor" href="#4接收用户输入打印问候信息"></a> 4.接收用户输入，打印问候信息</h3><blockquote><p>使用输入函数 input() 进行输入</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = input(<span class="string">'what is your name?'</span>)</span><br><span class="line">print(<span class="string">'Hi '</span> + name)</span><br></pre></td></tr></table></figure><p>测试：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200518092806.png" alt="image-20200518092805760" /></p><h3 id="5打印年龄"><a class="markdownIt-Anchor" href="#5打印年龄"></a> 5.打印年龄</h3><blockquote><p>使用到强制类型转换</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">birth_year = input(<span class="string">'Birth year: '</span>)</span><br><span class="line">age = <span class="number">2019</span> - int(birth_year)</span><br><span class="line">print(age)</span><br></pre></td></tr></table></figure><p>使用 type() 打印数据类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(type(birth_year))</span><br></pre></td></tr></table></figure><h3 id="6字符串打印"><a class="markdownIt-Anchor" href="#6字符串打印"></a> 6.字符串打印</h3><blockquote><p>三种字符串表达形式</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">course_1 = <span class="string">'Python for "Beginners"'</span></span><br><span class="line">print(course_1)</span><br><span class="line">course_2 = <span class="string">"Python is my 'love'"</span></span><br><span class="line">print(course_2)</span><br><span class="line">course_3 = <span class="string">'''</span></span><br><span class="line"><span class="string">Hi John</span></span><br><span class="line"><span class="string">welcome to python world!</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(course_3)</span><br></pre></td></tr></table></figure><p>效果呈现：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200518100440.png" alt="image-20200518100439122" /></p><p>获取 course_1 的第一个索引值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(course_1[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>获取 course_1 的最后一个索引值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(course_1[<span class="number">-1</span>])</span><br></pre></td></tr></table></figure><p>那么获取倒数第二个索引值呢：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(course_1[<span class="number">-2</span>])</span><br></pre></td></tr></table></figure><p>返回索引为 0 - 2 的值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(course_1[<span class="number">0</span>:<span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>返回索引 0 以及 0 之后的所有字符：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(course_1[<span class="number">0</span>:])</span><br></pre></td></tr></table></figure><p>返回索引小于 5 的所有字符：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(course_1[:<span class="number">5</span>])</span><br></pre></td></tr></table></figure><p>返回所有字符：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(course_1[:])</span><br></pre></td></tr></table></figure><p>返回从第 2 位开始，不包括最后一位字符的字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(course_1[<span class="number">1</span>:<span class="number">-1</span>])</span><br></pre></td></tr></table></figure><h3 id="7格式化字符串"><a class="markdownIt-Anchor" href="#7格式化字符串"></a> 7.格式化字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">first = <span class="string">'WuGenQiang'</span></span><br><span class="line">last = <span class="string">'happy'</span></span><br><span class="line"><span class="comment"># 字符串拼接</span></span><br><span class="line">message = first + <span class="string">' ['</span> + last + <span class="string">'] is a coder'</span></span><br><span class="line"><span class="comment"># 格式化字符串</span></span><br><span class="line">msg = <span class="string">f'<span class="subst">&#123;first&#125;</span> [<span class="subst">&#123;last&#125;</span>] is a coder'</span></span><br><span class="line">print(message)</span><br><span class="line">print(msg)</span><br></pre></td></tr></table></figure><h3 id="8字符串方法使用"><a class="markdownIt-Anchor" href="#8字符串方法使用"></a> 8.字符串方法使用</h3><p>（1）len() 函数：求字符串长度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">course = <span class="string">'Python for Beginners'</span></span><br><span class="line"><span class="comment"># 字符串长度</span></span><br><span class="line">print(len(course))</span><br></pre></td></tr></table></figure><p>（2）upper() 函数：转换成大写字母</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 转换成大写字母</span></span><br><span class="line">print(course.upper())</span><br></pre></td></tr></table></figure><p>（3）lower() 函数：转换成小写字母</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 转换成小写字母</span></span><br><span class="line">print(course.lower())</span><br></pre></td></tr></table></figure><p>（4）find() 函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 找字符返回第一个匹配的索引值</span></span><br><span class="line">print(course.find(<span class="string">'n'</span>))</span><br></pre></td></tr></table></figure><p>找不到返回 -1，并且区分大小写</p><p>（5）replace() 函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 替换字符</span></span><br><span class="line">print(course.replace(<span class="string">'Beginners'</span>, <span class="string">'Absolute Beginners'</span>))</span><br></pre></td></tr></table></figure><p>（6）in 使用：产生布尔值 False or True</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断字符串是否在字符串里</span></span><br><span class="line">print(<span class="string">'Python'</span> <span class="keyword">in</span> course)</span><br></pre></td></tr></table></figure><h3 id="9算术运算符"><a class="markdownIt-Anchor" href="#9算术运算符"></a> 9.算术运算符</h3><p>举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="number">10</span> / <span class="number">3</span>)</span><br><span class="line">print(<span class="number">10</span> % <span class="number">3</span>)</span><br><span class="line">print(<span class="number">10</span> * <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 10 的 3 次方</span></span><br><span class="line">print(<span class="number">10</span> ** <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">x = <span class="number">10</span></span><br><span class="line">x = x + <span class="number">3</span></span><br><span class="line">x += <span class="number">3</span></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><p>思索下面 x 为多少：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span> + <span class="number">3</span> * <span class="number">2</span> ** <span class="number">2</span></span><br></pre></td></tr></table></figure><p>答案是 22，因为取幂运算符是优先的，所以先算 2 的 2 次方</p><ul><li>取绝对值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(abs(<span class="number">-2.9</span>))</span><br></pre></td></tr></table></figure><h3 id="10引入数学模块"><a class="markdownIt-Anchor" href="#10引入数学模块"></a> 10.引入数学模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">print(math.floor(<span class="number">2.9</span>))</span><br></pre></td></tr></table></figure><h3 id="11条件语句的使用"><a class="markdownIt-Anchor" href="#11条件语句的使用"></a> 11.条件语句的使用</h3><blockquote><p>使用 if - elif - else</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">is_hot = <span class="literal">False</span></span><br><span class="line">is_cold = <span class="literal">True</span></span><br><span class="line"><span class="keyword">if</span> is_hot:</span><br><span class="line">    print(<span class="string">"It's a hot day"</span>)</span><br><span class="line"><span class="keyword">elif</span> is_cold:</span><br><span class="line">    print(<span class="string">"It's a cold day"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"It's a lovely day"</span>)</span><br><span class="line">print(<span class="string">"Enjoy your day"</span>)</span><br></pre></td></tr></table></figure><p>当条件多个并且是 “and” 的关系时，使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">has_high_income = <span class="literal">True</span></span><br><span class="line">has_good_credit = <span class="literal">True</span></span><br><span class="line"><span class="keyword">if</span> has_good_credit <span class="keyword">and</span> has_high_income:</span><br><span class="line">    print(<span class="string">"Eligible for loan"</span>)</span><br></pre></td></tr></table></figure><p>若当条件多个并且是 “or” 的关系时，使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">has_high_income = <span class="literal">False</span></span><br><span class="line">has_good_credit = <span class="literal">True</span></span><br><span class="line"><span class="keyword">if</span> has_good_credit <span class="keyword">or</span> has_high_income:</span><br><span class="line">    print(<span class="string">"Eligible for loan"</span>)</span><br></pre></td></tr></table></figure><p>如何使用 “not”，看下面：(not 相当于取反)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">has_good_credit = <span class="literal">True</span></span><br><span class="line">has_criminal_record = <span class="literal">False</span></span><br><span class="line"><span class="keyword">if</span> has_good_credit <span class="keyword">and</span> <span class="keyword">not</span> has_criminal_record:</span><br><span class="line">    print(<span class="string">"Eligible for loan"</span>)</span><br></pre></td></tr></table></figure><h3 id="12打印天气"><a class="markdownIt-Anchor" href="#12打印天气"></a> 12.打印天气</h3><blockquote><p>使用比较运算符</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">temperature = <span class="number">30</span></span><br><span class="line"><span class="keyword">if</span> temperature &gt; <span class="number">30</span>:</span><br><span class="line">    print(<span class="string">"It's a hot day"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"It's a cold day"</span>)</span><br></pre></td></tr></table></figure><h3 id="13打印名字是否符合要求"><a class="markdownIt-Anchor" href="#13打印名字是否符合要求"></a> 13.打印名字是否符合要求</h3><blockquote><p>使用比较运算符</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">"James"</span></span><br><span class="line"><span class="keyword">if</span> len(name) &lt; <span class="number">3</span>:</span><br><span class="line">    print(<span class="string">"Name must be at least 3 character"</span>)</span><br><span class="line"><span class="keyword">elif</span> len(name) &gt; <span class="number">50</span>:</span><br><span class="line">    print(<span class="string">"Name must be a maximum of 50 character"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"Name looks good"</span>)</span><br></pre></td></tr></table></figure><h3 id="14判断体重"><a class="markdownIt-Anchor" href="#14判断体重"></a> 14.判断体重</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">weight = int(input(<span class="string">'weight: '</span>))</span><br><span class="line">unit = input(<span class="string">'(L)bs or (K)g: '</span>)</span><br><span class="line"><span class="keyword">if</span> unit.upper() == <span class="string">"L"</span>:</span><br><span class="line">    converted = weight * <span class="number">0.45</span></span><br><span class="line">    print(<span class="string">f"You are <span class="subst">&#123;converted&#125;</span> kilos"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    converted = weight / <span class="number">0.45</span></span><br><span class="line">    print(<span class="string">f"You are <span class="subst">&#123;converted&#125;</span> pounds"</span>)</span><br></pre></td></tr></table></figure><h3 id="15打印-1-5"><a class="markdownIt-Anchor" href="#15打印-1-5"></a> 15.打印 1 - 5</h3><blockquote><p>使用到 while 循环语句或者 for 循环语句</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">5</span>:</span><br><span class="line">    print(i)</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">print(<span class="string">"Done"</span>)</span><br></pre></td></tr></table></figure><h3 id="16猜数秘密号码"><a class="markdownIt-Anchor" href="#16猜数秘密号码"></a> 16.猜数（秘密号码）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">secret_number = <span class="number">9</span></span><br><span class="line">guess_count = <span class="number">0</span></span><br><span class="line">guess_limit = <span class="number">3</span></span><br><span class="line"><span class="keyword">while</span> guess_count &lt; guess_limit:</span><br><span class="line">    guess = int(input(<span class="string">'Guess: '</span>))</span><br><span class="line">    guess_count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> guess == secret_number:</span><br><span class="line">        print(<span class="string">'You won!'</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'Sorry, you failed'</span>)</span><br></pre></td></tr></table></figure><h3 id="17car-game"><a class="markdownIt-Anchor" href="#17car-game"></a> 17.Car game</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">command = <span class="string">""</span></span><br><span class="line">started = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    command = input(<span class="string">"&gt; "</span>).lower()</span><br><span class="line">    <span class="keyword">if</span> command == <span class="string">"start"</span>:</span><br><span class="line">        <span class="keyword">if</span> started:</span><br><span class="line">            print(<span class="string">"Car is already started!"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            started = <span class="literal">True</span></span><br><span class="line">            print(<span class="string">"Car started..."</span>)</span><br><span class="line">    <span class="keyword">elif</span> command == <span class="string">"stop"</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> started:</span><br><span class="line">            print(<span class="string">"Car is already stopped!"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            started = <span class="literal">False</span></span><br><span class="line">            print(<span class="string">"Car stopped."</span>)</span><br><span class="line">    <span class="keyword">elif</span> command == <span class="string">"help"</span>:</span><br><span class="line">        print(<span class="string">"""</span></span><br><span class="line"><span class="string">        start - to start the car</span></span><br><span class="line"><span class="string">        stop - to stop the car</span></span><br><span class="line"><span class="string">        quit - to quit</span></span><br><span class="line"><span class="string">        """</span>)</span><br><span class="line">    <span class="keyword">elif</span> command == <span class="string">"quit"</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"Sorry, I don't understand that!"</span>)</span><br></pre></td></tr></table></figure><h3 id="18for-循环使用"><a class="markdownIt-Anchor" href="#18for-循环使用"></a> 18.for 循环使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印 Python</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> <span class="string">'Python'</span>:</span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> [<span class="string">'Mosh'</span>, <span class="string">'John'</span>, <span class="string">'Sarah'</span>]:</span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]:</span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用范围函数 range, range(10) 表示 0 - 9</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    print(item)</span><br><span class="line"><span class="comment"># range(5, 10) 表示 5 - 9</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">5</span>, <span class="number">10</span>):</span><br><span class="line">    print(item)</span><br><span class="line"><span class="comment"># range(5, 10, 2) 表示 5 - 9, 但是 step = 2</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">5</span>, <span class="number">10</span>, <span class="number">2</span>):</span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure><h3 id="19计算价格总量"><a class="markdownIt-Anchor" href="#19计算价格总量"></a> 19.计算价格总量</h3><blockquote><p>使用到 for 循环</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">prices = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line">total = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> price <span class="keyword">in</span> prices:</span><br><span class="line">    total += price</span><br><span class="line">print(<span class="string">f"Total: <span class="subst">&#123;total&#125;</span>"</span>)</span><br></pre></td></tr></table></figure><h3 id="20嵌套循环"><a class="markdownIt-Anchor" href="#20嵌套循环"></a> 20.嵌套循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        print(<span class="string">f'(<span class="subst">&#123;x&#125;</span>, <span class="subst">&#123;y&#125;</span>)'</span>)</span><br></pre></td></tr></table></figure><p><strong>画个大大的 &quot;F&quot;</strong></p><ul><li>方式一：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>]</span><br><span class="line"><span class="keyword">for</span> x_count <span class="keyword">in</span> numbers:</span><br><span class="line">    print(<span class="string">'x'</span> * x_count)</span><br></pre></td></tr></table></figure><ul><li>方式二：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>]</span><br><span class="line"><span class="keyword">for</span> x_count <span class="keyword">in</span> numbers:</span><br><span class="line">    output = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> count <span class="keyword">in</span> range(x_count):</span><br><span class="line">        output += <span class="string">'x'</span></span><br><span class="line">    print(output)</span><br></pre></td></tr></table></figure><h3 id="21list"><a class="markdownIt-Anchor" href="#21list"></a> 21.List</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'John'</span>, <span class="string">'Bob'</span>, <span class="string">'Mosh'</span>, <span class="string">'Sarah'</span>, <span class="string">'Mary'</span>]</span><br><span class="line">print(names)</span><br><span class="line">print(names[:])</span><br><span class="line">print(names[<span class="number">2</span>:])</span><br><span class="line"><span class="comment"># 输出第一个索引值</span></span><br><span class="line">print(names[<span class="number">0</span>])</span><br><span class="line"><span class="comment"># 输出最后一个索引值</span></span><br><span class="line">print(names[<span class="number">-1</span>])</span><br></pre></td></tr></table></figure><h3 id="22list-中找最大值"><a class="markdownIt-Anchor" href="#22list-中找最大值"></a> 22.List 中找最大值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">3</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">10</span>]</span><br><span class="line">max = numbers[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> numbers:</span><br><span class="line">    <span class="keyword">if</span> number &gt; max:</span><br><span class="line">        max = number</span><br><span class="line">print(max)</span><br></pre></td></tr></table></figure><h3 id="23访问矩阵中的各项"><a class="markdownIt-Anchor" href="#23访问矩阵中的各项"></a> 23.访问矩阵中的各项</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">matrix = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">    [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">]</span><br><span class="line">matrix[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">20</span></span><br><span class="line">print(matrix[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> matrix:</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> row:</span><br><span class="line">        print(item)</span><br></pre></td></tr></table></figure><h3 id="24数组中常用函数调用"><a class="markdownIt-Anchor" href="#24数组中常用函数调用"></a> 24.数组中常用函数调用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">4</span>]</span><br><span class="line"><span class="comment"># 排序(升序)</span></span><br><span class="line">numbers.sort()</span><br><span class="line"><span class="comment"># 逆序</span></span><br><span class="line">numbers.reverse()</span><br><span class="line">print(numbers)</span><br><span class="line"><span class="comment"># 复制拷贝</span></span><br><span class="line">numbers2 = numbers.copy()</span><br><span class="line">print(numbers2)</span><br><span class="line"><span class="comment"># 移除 1</span></span><br><span class="line">numbers.remove(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 清空</span></span><br><span class="line">numbers.clear()</span><br><span class="line"><span class="comment"># 末尾加入 20</span></span><br><span class="line">numbers.append(<span class="number">20</span>)</span><br><span class="line"><span class="comment"># 在特定位置插入 12</span></span><br><span class="line">numbers.insert(<span class="number">0</span>, <span class="number">12</span>)</span><br><span class="line"><span class="comment"># 末尾删除</span></span><br><span class="line">numbers.pop()</span><br><span class="line"><span class="comment"># 返回 5 的索引地址</span></span><br><span class="line">print(numbers.index(<span class="number">12</span>))</span><br><span class="line">print(numbers)</span><br><span class="line"><span class="comment"># 输出 50 是否在 numbers 中</span></span><br><span class="line">print(<span class="number">50</span> <span class="keyword">in</span> numbers)</span><br><span class="line"><span class="comment"># 输出数字的数量</span></span><br><span class="line">print(numbers.count(<span class="number">12</span>))</span><br></pre></td></tr></table></figure><ul><li>末尾加入数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">1</span>]</span><br><span class="line">uniques = []</span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> numbers:</span><br><span class="line">    <span class="keyword">if</span> number <span class="keyword">not</span> <span class="keyword">in</span> uniques:</span><br><span class="line">        uniques.append(number)</span><br><span class="line">print(uniques)</span><br></pre></td></tr></table></figure><h3 id="25元组"><a class="markdownIt-Anchor" href="#25元组"></a> 25.元组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">numbers = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">print(numbers[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>注意：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">coordinates = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># x = coordinates[0]</span></span><br><span class="line"><span class="comment"># y = coordinates[1]</span></span><br><span class="line"><span class="comment"># z = coordinates[2]</span></span><br><span class="line"><span class="comment"># 与上面相同结果</span></span><br><span class="line">x, y, z = coordinates</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><h3 id="26使用字典"><a class="markdownIt-Anchor" href="#26使用字典"></a> 26.使用字典</h3><ul><li>案例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">customer = &#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"John Smith"</span>,</span><br><span class="line">    <span class="string">"age"</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="string">"is_verified"</span>: <span class="literal">True</span></span><br><span class="line">&#125;</span><br><span class="line">customer[<span class="string">"name"</span>] = <span class="string">"Jack Smith"</span></span><br><span class="line">print(customer[<span class="string">"name"</span>])</span><br><span class="line">print(customer.get(<span class="string">"name"</span>))</span><br><span class="line">print(customer.get(<span class="string">"host"</span>, <span class="string">"123.12.1.1"</span>))</span><br></pre></td></tr></table></figure><ul><li>读号码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">phone = input(<span class="string">"Phone: "</span>)</span><br><span class="line">digits_mapping = &#123;</span><br><span class="line">    <span class="string">"1"</span>: <span class="string">"One"</span>,</span><br><span class="line">    <span class="string">"2"</span>: <span class="string">"Two"</span>,</span><br><span class="line">    <span class="string">"3"</span>: <span class="string">"Three"</span>,</span><br><span class="line">    <span class="string">"4"</span>: <span class="string">"Four"</span>,</span><br><span class="line">    <span class="string">"5"</span>: <span class="string">"Five"</span></span><br><span class="line">&#125;</span><br><span class="line">output = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> phone:</span><br><span class="line">    output += digits_mapping.get(ch, <span class="string">"!"</span>) + <span class="string">" "</span></span><br><span class="line">print(output)</span><br></pre></td></tr></table></figure><h3 id="27输出表情符号"><a class="markdownIt-Anchor" href="#27输出表情符号"></a> 27.输出表情符号</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">message = input(<span class="string">"&gt; "</span>)</span><br><span class="line">words = message.split(<span class="string">' '</span>)</span><br><span class="line"><span class="comment"># 调用表情符号</span></span><br><span class="line">emojis = &#123;</span><br><span class="line">    <span class="string">":)"</span>: <span class="string">"😄"</span>,</span><br><span class="line">    <span class="string">":("</span>: <span class="string">"😣"</span></span><br><span class="line">&#125;</span><br><span class="line">output = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">    output += emojis.get(word, word) + <span class="string">" "</span></span><br><span class="line">print(output)</span><br></pre></td></tr></table></figure><p>使用函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@Time        : 2020/5/20</span></span><br><span class="line"><span class="string">@Author      : WuGenQiang</span></span><br><span class="line"><span class="string">@File        : testList</span></span><br><span class="line"><span class="string">@Description : </span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">emoji_converter</span><span class="params">(message)</span>:</span></span><br><span class="line">    words = message.split(<span class="string">' '</span>)</span><br><span class="line">    <span class="comment"># 调用表情符号</span></span><br><span class="line">    emojis = &#123;</span><br><span class="line">        <span class="string">":)"</span>: <span class="string">"😄"</span>,</span><br><span class="line">        <span class="string">":("</span>: <span class="string">"😣"</span></span><br><span class="line">    &#125;</span><br><span class="line">    output = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">        output += emojis.get(word, word) + <span class="string">" "</span></span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line">message = input(<span class="string">"&gt; "</span>)</span><br><span class="line">result = emoji_converter(message)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><h3 id="28函数"><a class="markdownIt-Anchor" href="#28函数"></a> 28.函数</h3><ul><li>先定义函数，然后才能使用：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'Hi, function!'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Start"</span>)</span><br><span class="line">greet_user()</span><br><span class="line">print(<span class="string">"Finished"</span>)</span><br></pre></td></tr></table></figure><ul><li>传参：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">f'Hi, <span class="subst">&#123;name&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Start"</span>)</span><br><span class="line">greet_user(<span class="string">"John"</span>)</span><br><span class="line">print(<span class="string">"Finished"</span>)</span><br></pre></td></tr></table></figure><ul><li>打印数的平方</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span><span class="params">(number)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> number * number</span><br><span class="line"></span><br><span class="line">result = square(<span class="number">3</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><h3 id="29异常处理"><a class="markdownIt-Anchor" href="#29异常处理"></a> 29.异常处理</h3><ul><li>出现异常，打印错误信息</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    age = int(input(<span class="string">'Age: '</span>))</span><br><span class="line">    income = <span class="number">20000</span></span><br><span class="line">    risk = income / age</span><br><span class="line">    print(age)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">'Age cannot be 0.'</span>)</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    print(<span class="string">'Invalid value'</span>)</span><br></pre></td></tr></table></figure><h3 id="30注释"><a class="markdownIt-Anchor" href="#30注释"></a> 30.注释</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是注释：print Sky is blue</span></span><br><span class="line">print(<span class="string">'Sky is blue'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算和返回数的平方</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span><span class="params">(number)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> number * number</span><br></pre></td></tr></table></figure><h3 id="31类的使用"><a class="markdownIt-Anchor" href="#31类的使用"></a> 31.类的使用</h3><ul><li>示例 1：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>:</span></span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"move"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">draw</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"draw"</span>)</span><br><span class="line"><span class="comment"># point1 = Point()</span></span><br><span class="line"><span class="comment"># point1.draw()</span></span><br><span class="line">point2 = Point(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"><span class="comment"># point2.x = 20</span></span><br><span class="line">print(point2.x)</span><br></pre></td></tr></table></figure><ul><li>示例 2：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">f"Hi, I am <span class="subst">&#123;self.name&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># john = Person()</span></span><br><span class="line"><span class="comment"># john.talk()</span></span><br><span class="line">john = Person(<span class="string">"John Smith"</span>)</span><br><span class="line">john.talk()</span><br><span class="line"></span><br><span class="line">bob = Person(<span class="string">"Bob Smith"</span>)</span><br><span class="line">bob.talk()</span><br></pre></td></tr></table></figure><h3 id="32继承的使用"><a class="markdownIt-Anchor" href="#32继承的使用"></a> 32.继承的使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 继承性讲解</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mammal</span>:</span></span><br><span class="line">    <span class="comment"># Mammal: 哺乳动物</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">walk</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"walk"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Mammal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bark</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"bark"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Mammal)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">dog1 = Dog()</span><br><span class="line">dog1.walk()</span><br><span class="line">dog1.bark()</span><br></pre></td></tr></table></figure><h3 id="33调用模块使用"><a class="markdownIt-Anchor" href="#33调用模块使用"></a> 33.调用模块使用</h3><p>先创建 <a href="http://converters.py" target="_blank" rel="noopener">converters.py</a>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lbs_to_kg</span><span class="params">(weight)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> weight * <span class="number">0.45</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kg_to_lbs</span><span class="params">(weight)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> weight / <span class="number">0.45</span></span><br></pre></td></tr></table></figure><p>然后在需要调用的 py 文件中这样写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> converters</span><br><span class="line">print(converters.kg_to_lbs(<span class="number">70</span>))</span><br></pre></td></tr></table></figure><p>初步实现，然后根据需求完成自己的项目吧！</p><h3 id="34从整个模块中导入特定的函数"><a class="markdownIt-Anchor" href="#34从整个模块中导入特定的函数"></a> 34.从整个模块中导入特定的函数</h3><p>不需要模块名作为前缀</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># import converters</span></span><br><span class="line"><span class="keyword">from</span> converters <span class="keyword">import</span> kg_to_lbs</span><br><span class="line">print(kg_to_lbs(<span class="number">100</span>))</span><br></pre></td></tr></table></figure><p>由此，我们可以为之前写的一些功能实现写一个工具文件，包含着各种要实现的功能函数：</p><p>比如这样：</p><p>举例：实现求最大数</p><ul><li>（1）创建 <a href="http://utils.py" target="_blank" rel="noopener">utils.py</a> 工具文件，写入：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_max</span><span class="params">(numbers)</span>:</span></span><br><span class="line">    max = numbers[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> numbers:</span><br><span class="line">        <span class="keyword">if</span> number &gt; max:</span><br><span class="line">            max = number</span><br><span class="line">    <span class="keyword">return</span> max</span><br></pre></td></tr></table></figure><ul><li>（2）调用使用：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># import utils</span></span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> find_max</span><br><span class="line">numbers = [<span class="number">10</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">2</span>]</span><br><span class="line">print(find_max(numbers))</span><br></pre></td></tr></table></figure><h3 id="35从包中导入特定的函数"><a class="markdownIt-Anchor" href="#35从包中导入特定的函数"></a> 35.从包中导入特定的函数</h3><p>举例：</p><p>创建 Python 包 ecommerce，包中创建文件 <a href="http://shhipping.py" target="_blank" rel="noopener">shhipping.py</a>，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_shipping</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"calc shipping"</span>)</span><br></pre></td></tr></table></figure><p>调用：</p><ul><li>第一种方式：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ecommerce.shipping</span><br><span class="line">ecommerce.shipping.calc_shipping()</span><br></pre></td></tr></table></figure><ul><li>第二种方式：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ecommerce.shipping <span class="keyword">import</span> calc_shipping</span><br><span class="line">calc_shipping()</span><br></pre></td></tr></table></figure><ul><li>第三种方式：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ecommerce <span class="keyword">import</span> shipping</span><br><span class="line">shipping.calc_shipping()</span><br></pre></td></tr></table></figure><h3 id="36生成随机值"><a class="markdownIt-Anchor" href="#36生成随机值"></a> 36.生成随机值</h3><ul><li>举例 1：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    <span class="comment">#打印随机值</span></span><br><span class="line">    print(random.random())</span><br><span class="line">    <span class="comment">#指定范围的随机数</span></span><br><span class="line">    print(random.randint(<span class="number">10</span>, <span class="number">20</span>))</span><br></pre></td></tr></table></figure><ul><li>举例 2：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">members = [<span class="string">'John'</span>, <span class="string">'Mary'</span>, <span class="string">'Mosh'</span>]</span><br><span class="line">leader = random.choice(members)</span><br><span class="line">print(leader)</span><br></pre></td></tr></table></figure><ul><li>举例 3：1 - 6 间自动生成 2 个随机值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dice</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">roll</span><span class="params">(self)</span>:</span></span><br><span class="line">        first = random.randint(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">        second = random.randint(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">        <span class="keyword">return</span> first, second</span><br><span class="line"></span><br><span class="line">dice = Dice()</span><br><span class="line">print(dice.roll())</span><br></pre></td></tr></table></figure><h3 id="37寻找目录路径"><a class="markdownIt-Anchor" href="#37寻找目录路径"></a> 37.寻找目录路径</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line">path = Path(<span class="string">"ecommerce"</span>)</span><br><span class="line">print(path.exists())</span><br></pre></td></tr></table></figure><p>如果有会输出 True，没有的话就会输出 False，那就使用下面命令创建一个新的目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.mkdir()</span><br></pre></td></tr></table></figure><p>删除目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.rmdir</span><br></pre></td></tr></table></figure><p>搜索文件，打印生成器对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line">path = Path()</span><br><span class="line">print(path.glob(<span class="string">'*.*'</span>))</span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line">path = Path()</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> path.glob(<span class="string">'*.py'</span>):</span><br><span class="line">    print(file)</span><br></pre></td></tr></table></figure><p>显示目录下所有文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line">path = Path()</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> path.glob(<span class="string">'*'</span>):</span><br><span class="line">    print(file)</span><br></pre></td></tr></table></figure><h3 id="38表格中读取信息"><a class="markdownIt-Anchor" href="#38表格中读取信息"></a> 38.表格中读取信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl <span class="keyword">as</span> xl</span><br><span class="line">wb = xl.load_workbook(<span class="string">'transactions.xlsx'</span>)</span><br><span class="line">sheet = wb[<span class="string">'Sheet1'</span>]</span><br><span class="line">cell = sheet[<span class="string">'A1'</span>]</span><br><span class="line">cell = sheet.cell(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">print(cell.value)</span><br></pre></td></tr></table></figure><p>查看数据有多少行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(sheet.max_row)</span><br></pre></td></tr></table></figure><p>实现图表显示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@Time        : 2020/5/18</span></span><br><span class="line"><span class="string">@Author      : WuGenQiang</span></span><br><span class="line"><span class="string">@File        : app</span></span><br><span class="line"><span class="string">@Description : </span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> openpyxl <span class="keyword">as</span> xl</span><br><span class="line">wb = xl.load_workbook(<span class="string">'test.xlsx'</span>)</span><br><span class="line">sheet = wb[<span class="string">'Sheet1'</span>]</span><br><span class="line"><span class="comment">#cell = sheet['A1']</span></span><br><span class="line"><span class="comment">#cell = sheet.cell(1, 1)</span></span><br><span class="line"><span class="comment">#print(cell.value)</span></span><br><span class="line">print(sheet.max_row)</span><br><span class="line"><span class="keyword">from</span> openpyxl.chart <span class="keyword">import</span> BarChart, Reference</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> range(<span class="number">1</span>, sheet.max_row + <span class="number">1</span>):</span><br><span class="line">    cell = sheet.cell(row, <span class="number">3</span>)</span><br><span class="line">    print(cell.value)</span><br><span class="line">    corrected_price = cell.value * <span class="number">0.9</span> + <span class="number">2</span></span><br><span class="line">    corrected_price_cell = sheet.cell(row, <span class="number">4</span>)</span><br><span class="line">    corrected_price_cell.value = corrected_price</span><br><span class="line">values = Reference(sheet,</span><br><span class="line">          min_row=<span class="number">1</span>,</span><br><span class="line">          max_row=sheet.max_row,</span><br><span class="line">          min_col=<span class="number">4</span>,</span><br><span class="line">          max_col=<span class="number">4</span>)</span><br><span class="line">chart = BarChart()</span><br><span class="line">chart.add_data(values)</span><br><span class="line">sheet.add_chart(chart, <span class="string">'E2'</span>)</span><br><span class="line">wb.save(<span class="string">'test2.xlsx'</span>)</span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200526165658.png" alt="image-20200526165657549" /></p><p>优化：子函数调用版</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@Time        : 2020/5/18</span></span><br><span class="line"><span class="string">@Author      : WuGenQiang</span></span><br><span class="line"><span class="string">@File        : app</span></span><br><span class="line"><span class="string">@Description : </span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> openpyxl <span class="keyword">as</span> xl</span><br><span class="line"><span class="keyword">from</span> openpyxl.chart <span class="keyword">import</span> BarChart, Reference</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_workbook</span><span class="params">(filename)</span>:</span></span><br><span class="line">    wb = xl.load_workbook(filename)</span><br><span class="line">    sheet = wb[<span class="string">'Sheet1'</span>]</span><br><span class="line">    <span class="comment"># cell = sheet['A1']</span></span><br><span class="line">    <span class="comment"># cell = sheet.cell(1, 1)</span></span><br><span class="line">    <span class="comment"># print(cell.value)</span></span><br><span class="line">    print(sheet.max_row)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> range(<span class="number">1</span>, sheet.max_row + <span class="number">1</span>):</span><br><span class="line">        cell = sheet.cell(row, <span class="number">3</span>)</span><br><span class="line">        print(cell.value)</span><br><span class="line">        corrected_price = cell.value * <span class="number">0.9</span> + <span class="number">2</span></span><br><span class="line">        corrected_price_cell = sheet.cell(row, <span class="number">4</span>)</span><br><span class="line">        corrected_price_cell.value = corrected_price</span><br><span class="line">    values = Reference(sheet,</span><br><span class="line">                       min_row=<span class="number">1</span>,</span><br><span class="line">                       max_row=sheet.max_row,</span><br><span class="line">                       min_col=<span class="number">4</span>,</span><br><span class="line">                       max_col=<span class="number">4</span>)</span><br><span class="line">    chart = BarChart()</span><br><span class="line">    chart.add_data(values)</span><br><span class="line">    sheet.add_chart(chart, <span class="string">'E2'</span>)</span><br><span class="line">    wb.save(filename)</span><br><span class="line"></span><br><span class="line">process_workbook(<span class="string">'test.xlsx'</span>)</span><br></pre></td></tr></table></figure><h3 id="39csv-文件导入数据"><a class="markdownIt-Anchor" href="#39csv-文件导入数据"></a> 39.CSV 文件导入数据</h3><blockquote><p>数据集下载：<a href="https://wugenqiang.github.io/NoteBook/Python/6%E5%B0%8F%E6%97%B6Python%E5%85%A5%E9%97%A8/vgsales.csv" target="_blank" rel="noopener">vgsales.csv</a></p></blockquote><h4 id="整体输出数据"><a class="markdownIt-Anchor" href="#整体输出数据"></a> 整体输出数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment">#从CSV文件导入数据，存储在df中</span></span><br><span class="line">df = pd.read_csv(<span class="string">'vgsales.csv'</span>)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200531195557.png" alt="image-20200531195556447" /></p><h4 id="获取数据集的形状"><a class="markdownIt-Anchor" href="#获取数据集的形状"></a> 获取数据集的形状</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取数据集的形状</span></span><br><span class="line">df.shape</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200531200757.png" alt="image-20200531200756673" /></p><h4 id="分段输出数据"><a class="markdownIt-Anchor" href="#分段输出数据"></a> 分段输出数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#描述方法</span></span><br><span class="line">df.describe()</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200531201608.png" alt="image-20200531201607125" /></p><h4 id="获取值"><a class="markdownIt-Anchor" href="#获取值"></a> 获取值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.values</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200531202109.png" alt="image-20200531202108365" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200531204832.png" alt="image-20200531204830570" /></p><h4 id="清洁数据"><a class="markdownIt-Anchor" href="#清洁数据"></a> 清洁数据</h4><p>删除数据举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment">#从CSV文件导入数据，存储在df中</span></span><br><span class="line">df = pd.read_csv(<span class="string">'vgsales.csv'</span>)</span><br><span class="line">x = df.drop(columns=[<span class="string">'JP_Sales'</span>])</span><br><span class="line">x</span><br></pre></td></tr></table></figure><p>获取某一列数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment">#从CSV文件导入数据，存储在df中</span></span><br><span class="line">df = pd.read_csv(<span class="string">'vgsales.csv'</span>)</span><br><span class="line">y = df[<span class="string">'JP_Sales'</span>]</span><br><span class="line">y</span><br></pre></td></tr></table></figure><h3 id="40决策树"><a class="markdownIt-Anchor" href="#40决策树"></a> 40.决策树</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line"><span class="comment">#从CSV文件导入数据，存储在df中</span></span><br><span class="line">df = pd.read_csv(<span class="string">'vgsales.csv'</span>)</span><br><span class="line">x = df.drop(columns=[<span class="string">'JP_Sales'</span>])</span><br><span class="line">y = df[<span class="string">'JP_Sales'</span>]</span><br><span class="line"><span class="comment">#树分类器</span></span><br><span class="line">model = DecisionTreeClassifier()</span><br><span class="line">model.fit(x, y)</span><br><span class="line"><span class="comment">#调用模型预测</span></span><br><span class="line">predictions = model.predict([[<span class="number">41.49</span>, <span class="number">29.02</span>], [<span class="number">29.08</span>, <span class="number">3.58</span>]])</span><br><span class="line">predictions</span><br></pre></td></tr></table></figure><p>可能数据不对，可以使用其他测试数据</p><h4 id="测量数据精确度"><a class="markdownIt-Anchor" href="#测量数据精确度"></a> 测量数据精确度</h4><p>数据被分为两组：训练和测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line"><span class="comment">#从CSV文件导入数据，存储在df中</span></span><br><span class="line">df = pd.read_csv(<span class="string">'vgsales.csv'</span>)</span><br><span class="line">x = df.drop(columns=[<span class="string">'JP_Sales'</span>])</span><br><span class="line">y = df[<span class="string">'JP_Sales'</span>]</span><br><span class="line"><span class="comment">#培训和测试数据输入输出集</span></span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=<span class="number">0.2</span>)</span><br><span class="line"><span class="comment">#树分类器</span></span><br><span class="line">model = DecisionTreeClassifier()</span><br><span class="line">model.fit(x_train, y_train)</span><br><span class="line"><span class="comment">#调用模型预测</span></span><br><span class="line">predictions = model.predict(x_test)</span><br><span class="line">score = accuracy_score(y_test, predictions)</span><br><span class="line">score</span><br></pre></td></tr></table></figure><h2 id="六-参考资料"><a class="markdownIt-Anchor" href="#六-参考资料"></a> 六、参考资料</h2><p><a href="https://www.bilibili.com/video/BV1h64y1M7UC" target="_blank" rel="noopener">[1] 2020 最新 Python 教程 6 小时入门</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python/Python语法</title>
      <link href="/2020/08/15/Python/Python%E8%AF%AD%E6%B3%95/"/>
      <url>/2020/08/15/Python/Python%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="python-语法"><a class="markdownIt-Anchor" href="#python-语法"></a> Python 语法</h1><ul><li><a href="Python/Python%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/CH1-Python%E5%9F%BA%E7%A1%80.md">1 - Python 基础</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python/README</title>
      <link href="/2020/08/15/Python/README/"/>
      <url>/2020/08/15/Python/README/</url>
      
        <content type="html"><![CDATA[<h1 id="python-王国"><a class="markdownIt-Anchor" href="#python-王国"></a> Python 王国 ✨</h1><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200518090717.png" alt="" /></p><h2 id="python-入门学习笔记"><a class="markdownIt-Anchor" href="#python-入门学习笔记"></a> Python 入门学习笔记</h2><p>对于还没入门的小伙伴们，推荐先跟<a href="Python/6%E5%B0%8F%E6%97%B6Python%E5%85%A5%E9%97%A8/6%E5%B0%8F%E6%97%B6Python%E5%85%A5%E9%97%A8.md">6 小时 Python 入门学习笔记</a>这篇文档敲一遍，行云流水之后对 Python 有了初步的认识，继而根据下面章节深入学习：</p><h2 id="python-数据分析"><a class="markdownIt-Anchor" href="#python-数据分析"></a> Python 数据分析</h2><h3 id="开源的-python-工具包"><a class="markdownIt-Anchor" href="#开源的-python-工具包"></a> 开源的 Python 工具包</h3><h4 id="anaconda"><a class="markdownIt-Anchor" href="#anaconda"></a> Anaconda</h4><blockquote><p>开源的 Python 包管理器，其包含了 conda、Python 等 180 多个科学包及其依赖项</p></blockquote><ul><li><a href="Python/Anaconda/Anaconda%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97.md">Anaconda 入门指南</a></li></ul><h4 id="sklearn"><a class="markdownIt-Anchor" href="#sklearn"></a> Sklearn</h4><p>Python 上最流行的机器学习/数据科学工具包。</p><ul><li><a href="https://scikit-learn.org/stable/" target="_blank" rel="noopener">Sklearn</a></li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200602234145.png" alt="image-20200602234144192" /></p><h3 id="数据集来源"><a class="markdownIt-Anchor" href="#数据集来源"></a> 数据集来源</h3><h4 id="kaggle"><a class="markdownIt-Anchor" href="#kaggle"></a> Kaggle</h4><ul><li><a href="https://kaggle.com" target="_blank" rel="noopener">kaggle.com</a> 是一个进行数据科学项目的地方，一般我会在这里获取测试数据</li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200531182516.png" alt="image-20200531182515005" /></p><h4 id="uci"><a class="markdownIt-Anchor" href="#uci"></a> UCI</h4><ul><li><a href="http://archive.ics.uci.edu/ml/index.php" target="_blank" rel="noopener">UCI 公开数据集</a></li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200602223947.png" alt="image-20200602223910610" /></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python/Jupyter-notebook使用指南</title>
      <link href="/2020/08/15/Python/Jupyter-notebook%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2020/08/15/Python/Jupyter-notebook%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="jupyter-notebook-使用指南"><a class="markdownIt-Anchor" href="#jupyter-notebook-使用指南"></a> Jupyter notebook 使用指南</h1><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>在我们的日常学习中，能够编写和运行 Python 文件的程序很多，比如 Python 安装自带的 IDE、程序员喜爱的Pycharm、数据科学全家桶 Anaconda，还有 Spyder、Thonny 等。就我个人使用而言，如果进行大型项目推荐使用 Pycharm，如果进行数据处理和分析，最好选用 Jupyter notebook。可以说，<strong>Jupyter notebook 是用Python 进行数据科学、机器学习的必备工具。</strong></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200713115135.png" alt="image-20200713115134320" /></p><blockquote><p>🔊 突出优点：</p></blockquote><ul><li><p>学习 Jupyter notebook 非常容易，按照我的教程一步一步做，再自己尝试一下，之后写代码即可健步如飞。</p></li><li><p>能够独立运行一个、几个或全部 Python 代码块，更容易看到中间变量的值，从而进行调试</p></li><li><p>可以插入 Markdown 说明文字和 Latex 数学公式，让枯燥的代码充满颜值，可读性爆表</p></li><li><p>能够调用 Ipython 丰富的“魔法函数”，比如程序计时、重复运行、显示图片等</p></li><li><p>写好的代码和文档能够以网页和 ppt 的形式在线分享。<a href="https://nbviewer.jupyter.org/" target="_blank" rel="noopener">在线看 Jupyter notebook 文件 </a></p></li><li><p>可以在云端远程服务器运行，不需本地安装配置各种环境。<a href="https://jupyter.org/try" target="_blank" rel="noopener">体验一下</a></p></li></ul><p>🔔 文件中包含了 Markdown 说明文档、代码块、代码运行结果、图片嵌入等元素，特别适合 Python 数据科学和机器学习撰写文档。</p><p>🔔 吴恩达的《深度学习》慕课的课后编程作业、大数据竞赛网站 Kaggle 上的代码文档、美国大学的数据科学课程的课后资料及编程作业，都是以 Jupyter notebook 文件的形式给出的，也就是<code>.ipynb</code>文件。</p><blockquote><p>其实 Jupyter notebook 不止可以运行 Python，还可以运行 Julia、R、Javascript 等语言，这也是<code>jupyter</code>这个名字的由来。<a href="https://github.com/jupyter/jupyter/wiki/Jupyter-kernels" target="_blank" rel="noopener">Jupyter notebook 支持的编程语言</a></p></blockquote><p>🔔 Jupyter notebook 集编程和写作于一身，这就叫做“文学编程”。</p><h2 id="安装和运行"><a class="markdownIt-Anchor" href="#安装和运行"></a> 安装和运行</h2><blockquote><p>在浏览器网页中运行 Python</p></blockquote><h3 id="ipython-内核"><a class="markdownIt-Anchor" href="#ipython-内核"></a> Ipython 内核</h3><p>Ipython 是更高级的 Python 解释器，而 Jupyter notebook 是基于 Ipython 内核的，在浏览器中以网页形式运行 Python 代码的工具，十分方便。</p><blockquote><p>Ipython 是啥？</p><p>Ipython 可以理解成更高级的 Python 解释器，相比原生的 Python 交互式命令行，Ipython 有更强大的命令计数、自动补全等交互功能。</p><p>Spyder 和 Jupyter notebook 都是以 Ipython 为内核的。</p></blockquote><h3 id="安装-jupyter-notebook"><a class="markdownIt-Anchor" href="#安装-jupyter-notebook"></a> 安装 Jupyter notebook</h3><p>如果你安装了 Python 数据科学全家桶 Anaconda，那么其中自带了 Jupyter notebook。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200713171917.png" alt="image-20200713171916125" /></p><p>如果你没安装 Anaconda，可以直接在命令行里运行这行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install jupyter -i //pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><h3 id="运行-jupyter-notebook"><a class="markdownIt-Anchor" href="#运行-jupyter-notebook"></a> 运行 Jupyter notebook</h3><p>打开命令行，输入 <code>jupyter notebook</code>，回车。稍等片刻即可跳出浏览器网页。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200713172810.png" alt="image-20200713172808869" /></p><p>🎉 看右上角：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200713173009.png" alt="image-20200713173007336" /></p><ul><li><p>点击 New --&gt; Python3 即可创建 Python 文档。</p></li><li><p>点击 New --&gt; Folder 可以创建新文件夹。</p></li><li><p>点击 New --&gt; Text File 可以创建空的<code>.txt</code>文件。</p></li><li><p>点击 New --&gt; Terminal 可以打开操作系统命令行，你可以使用操作系统对应的命令行进行目录切换、解压文件等操作。</p></li></ul><p>🔊 最常用的是点击右边的 New --&gt; Python3，创建 Python 文档。</p><h2 id="使用写代码"><a class="markdownIt-Anchor" href="#使用写代码"></a> 使用写代码</h2><h3 id="写下并运行第一行-python-代码"><a class="markdownIt-Anchor" href="#写下并运行第一行-python-代码"></a> 写下并运行第一行 Python 代码</h3><p>点击左上角<code>Untitled</code>给新建的 Python 文档文件重新命名。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200713224351.png" alt="image-20200713224350095" /></p><p>自古第一行代码，总是会写 Hello World，故名称设置为了 HelloWorld</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200713224538.png" alt="image-20200713224537278" /></p><p>在代码框中输入第一行 Python 代码，<code>shift + 回车</code>运行</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200713230014.png" alt="image-20200713230012217" /></p><h3 id="蓝绿两模式命令模式-编辑模式"><a class="markdownIt-Anchor" href="#蓝绿两模式命令模式-编辑模式"></a> 蓝绿两模式：命令模式、编辑模式</h3><p>Jupyter notebook 中，代码和文档都存在于一个个单元格中，每个单元格都有<code>蓝色</code>和<code>绿色</code>两种状态。</p><ul><li><p>命令模式（蓝色）：用于执行键盘输入的快捷命令（新增单元格、剪切、复制等等）。通过 <code>Esc</code> 键从绿色的编辑模式切换到蓝色的命令模式，此时单元左侧显示蓝色竖线。</p></li><li><p>编辑模式（绿色）：编辑文本和代码。选中单元并按 <code>Enter</code> 键进入编辑模式，此时单元左侧显示绿色竖线。</p></li></ul><blockquote><p>命令模式和编辑模式，其实是源自于著名的 vim 编辑器，vim 编辑器以特别难学和学成之后可以超神而闻名于世。</p></blockquote><h3 id="两种单元格代码单元格和-markdown-单元格"><a class="markdownIt-Anchor" href="#两种单元格代码单元格和-markdown-单元格"></a> 两种单元格：代码单元格和 Markdown 单元格</h3><p>Jupyter notebook 中，有两种单元格：代码单元格和 Markdown 单元格。</p><ul><li>代码单元格：这里是你编写代码的地方，通过按 <code>Shift + Enter</code> 运行代码，其结果显示在本单元下方。代码单元左边有 <code>In [1]:</code> 这样的序列标记，方便人们查看代码的执行次序。在蓝色命令模式下，按<code>y</code>键可以将 Markdown 单元格转换为代码单元格。</li><li>Markdown 单元格：在这里对文本进行编辑，采用 markdown 的语法规范，可以设置文本格式、插入链接、图片甚至数学公式。同样使用 <code>Shift + Enter</code> 运行 markdown 单元来显示渲染后的文本。在蓝色命令模式下按<code>m</code>键可以将代码单元格转换为 Markdown 单元格。</li></ul><blockquote><p>Markdown 是程序员通用的撰写文档的语法，可以轻松实现标题、引用、链接、图片等，非常简洁易学，Github 代码托管网站、有道云笔记、简书、知乎、CSDN 论坛、电子邮件等都支持 Markdown 语法。</p></blockquote><p>编辑 Markdown 单元格，输入以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 我是Markdown一号标题</span><br><span class="line">## 我是Markdown二号标题</span><br><span class="line">### 我是Markdown三号标题</span><br><span class="line">&gt; 我是引用，我这行开头有一个灰色竖杠</span><br><span class="line"></span><br><span class="line">[我是外部链接，点我上百度](https:&#x2F;&#x2F;www.baidu.com)</span><br><span class="line">![我是图片](https:&#x2F;&#x2F;gitee.com&#x2F;wugenqiang&#x2F;PictureBed&#x2F;raw&#x2F;master&#x2F;images01&#x2F;20200713231406.png)</span><br></pre></td></tr></table></figure><p>如下图：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200713232003.png" alt="image-20200713232002542" /></p><p>然后按<code>shift</code>+<code>Enter</code>运行该单元格。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200713231751.png" alt="image-20200713231750768" /></p><h2 id="抛弃鼠标只用键盘"><a class="markdownIt-Anchor" href="#抛弃鼠标只用键盘"></a> 抛弃鼠标，只用键盘</h2><p>下面介绍 Jupyter notebook 快捷键，掌握这些快捷键之后，你将彻底解放你拿鼠标的那只手，更专注、高效地敲代码了。</p><h3 id="最常用快捷键必会"><a class="markdownIt-Anchor" href="#最常用快捷键必会"></a> 最常用快捷键（必会）</h3><table><thead><tr><th>快捷键</th><th>释义</th></tr></thead><tbody><tr><td>h</td><td>查看所有快捷键</td></tr><tr><td>Enter</td><td>从命令模式进入编辑模式</td></tr><tr><td>Esc</td><td>从编辑模式退回到命令模式</td></tr><tr><td>m</td><td>将代码单元格转换为 Markdown 单元格</td></tr><tr><td>y</td><td>将 Markdown 单元格转换为代码单元格</td></tr><tr><td>shift + Enter</td><td>运行本单元格，选择下面的代码块</td></tr><tr><td>ctrl + Enter</td><td>运行本单元格</td></tr><tr><td>alt + Enter</td><td>运行本单元格，在下方新建一个单元格</td></tr><tr><td>a</td><td>在上方新建一个单元格（above）</td></tr><tr><td>b</td><td>在下方新建一个单元格（below）</td></tr><tr><td>d</td><td>删除选中的单元格（delete）</td></tr><tr><td>x</td><td>剪切本单元格</td></tr><tr><td>c</td><td>复制本单元格</td></tr><tr><td>shift + v</td><td>粘贴到上面</td></tr><tr><td>v</td><td>粘贴到下面</td></tr><tr><td>l</td><td>显示代码行号</td></tr></tbody></table><h3 id="所有快捷键"><a class="markdownIt-Anchor" href="#所有快捷键"></a> 所有快捷键</h3><p>h 查看所有快捷键</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200713233052.png" alt="命令行模式快捷键" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200713233152.png" alt="编辑模式快捷键" /></p><h2 id="在-markdown-单元格中输入数学公式"><a class="markdownIt-Anchor" href="#在-markdown-单元格中输入数学公式"></a> 在 Markdown 单元格中输入数学公式</h2><p>分别在两个 Markdown 单元格内输入以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是爱因斯坦的质能转换方程$E&#x3D;mc^2$，揭示了质量和能量之间的关系</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是一元二次方程求解公式</span><br><span class="line">$$x &#x3D; \frac&#123;-b\pm \sqrt&#123;b^2-4ac&#125;&#125;&#123;2a&#125;$$</span><br><span class="line">初中数学内容</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200713233439.png" alt="image-20200713233438637" /></p><p>按<code>shift</code>+<code>Enter</code>渲染运行：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200713233504.png" alt="image-20200713233502965" /></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python/PyCharm优化使用</title>
      <link href="/2020/08/15/Python/PyCharm%E4%BC%98%E5%8C%96%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/08/15/Python/PyCharm%E4%BC%98%E5%8C%96%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="pycharm-优化使用"><a class="markdownIt-Anchor" href="#pycharm-优化使用"></a> PyCharm 优化使用</h1><h2 id="设置-python-路径解释器设置"><a class="markdownIt-Anchor" href="#设置-python-路径解释器设置"></a> 设置 Python 路径（解释器设置）</h2><p>1、打开设置对话框</p><p>点击File --&gt; settings，弹出设置对话框</p><p>2、设置 Python 路径（解释器设置）</p><p>点击 Project --&gt; Project Interpreter，在右侧 Project Interpreter 下拉，选择 python 路径（若没有，选择 show all），实现 pycharm的 python 路径设置。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517235215.png" alt="image-20200517235214785" /></p><p>然后如下图操作即可</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517235402.png" alt="image-20200517235401232" /></p><p>设置成功显示下图</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517235458.png" alt="image-20200517235457258" /></p><h2 id="编码设置"><a class="markdownIt-Anchor" href="#编码设置"></a> 编码设置</h2><p>Python 的编码问题由来已久，为了避免一步一坑， Pycharm 提供了方便直接的解决方案<br />在 IDE Encoding、Project Encoding、Property Files 三处都使用 UTF-8 编码，同时在文件头添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding: utf-8 -*</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200518000024.png" alt="image-20200518000023055" /></p><h2 id="快捷键风格"><a class="markdownIt-Anchor" href="#快捷键风格"></a> 快捷键风格</h2><p>对于常用的快捷键，可以设置为自己熟悉的风格，我选的是 Eclipse。</p><p>File --&gt; Setting --&gt; Keymap --&gt; Keymaps --&gt; XXX --&gt; Apply</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200518000652.png" alt="image-20200518000651606" /></p><h2 id="改变字体大小"><a class="markdownIt-Anchor" href="#改变字体大小"></a> 改变字体大小</h2><p>1、修改代码栏字体</p><p>通过 File --&gt; Setting --&gt; Editor --&gt; Font 调节</p><p>2、修改菜单栏列表框字体</p><p>通过 setting&gt;&gt;&gt; 在搜索框搜 Appearance，勾选 Override default fonts by(not recommended)</p><p>3、鼠标改变字体</p><p>浏览器的时候我们习惯于 Ctrl + 鼠标滚轮改变字体大小，很多编辑工具也提供，那么 PyCharm 中支持吗？也是支持的，只是默认不开启，可以设置</p><p>File --&gt; Setting --&gt; Editor --&gt; General</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200518001248.png" alt="image-20200518001247655" /></p><h2 id="文件模板"><a class="markdownIt-Anchor" href="#文件模板"></a> 文件模板</h2><p>设置路径：</p><p>File --&gt; Settings --&gt; Editor --&gt; File and Code Templates --&gt; Python Scripts</p><p>输入信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@Time        : $&#123;DATE&#125;</span></span><br><span class="line"><span class="string">@Author      : $&#123;USER&#125;</span></span><br><span class="line"><span class="string">@File        : $&#123;NAME&#125;</span></span><br><span class="line"><span class="string">@Description : </span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>说明：</p><p>在 windows 上，第一行有没有都不会造成影响（ Windows 更具扩展名来判断文件类型），Linux 上执行文件时是 ./test.py 的形式，所以需要加上解释器的路径信息，告知用何种方式执行这个文件。</p><p>这种是为了防止用户并不是将 python 装在默认的 /usr/bin 路径里，当系统看到这行代码时，会到 env 设置里查找 python 的安装路径，再调用对应路径下的解释器程序完成操作。</p><p>第二行中，指定编码形式为 utf-8，让解释器以这种编码形式读取源代码。因为 Python2 默认使用的是 ASCII，所以并不支持中文，使用中文会报错。</p><p>而在 python3 已经默认使用了 utf-8 的编码形式，所以第二行对 python3 来说是忽略的，有没有都一样。</p><p>如图：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200518084011.png" alt="image-20200518084010759" /></p><p>测试：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200518084105.png" alt="image-20200518084104834" /></p><h2 id="设置提示函数及其参数和使用"><a class="markdownIt-Anchor" href="#设置提示函数及其参数和使用"></a> 设置提示函数及其参数和使用</h2><p>File --&gt; Settings --&gt; Editor --&gt; Code Completion</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200518104825.png" alt="image-20200518104823559" /></p><p>鼠标放到函数名或者按住 ctrl 即可查看</p><h2 id="设置自动提示功能"><a class="markdownIt-Anchor" href="#设置自动提示功能"></a> 设置自动提示功能</h2><p>File --&gt; Settings --&gt; Editor --&gt; Code Completion</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200518110553.png" alt="image-20200518110552692" /></p><h2 id="打出表情符号"><a class="markdownIt-Anchor" href="#打出表情符号"></a> 打出表情符号</h2><p>按住 <code>win + 。</code> 键</p><p>效果图：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200520161934.png" alt="image-20200520161932850" /></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能/机器学习/西瓜书/CH2-模型评估与选择</title>
      <link href="/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E8%A5%BF%E7%93%9C%E4%B9%A6/CH2-%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B0%E4%B8%8E%E9%80%89%E6%8B%A9/"/>
      <url>/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E8%A5%BF%E7%93%9C%E4%B9%A6/CH2-%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B0%E4%B8%8E%E9%80%89%E6%8B%A9/</url>
      
        <content type="html"><![CDATA[<h1 id="第二章-模型评估与选择"><a class="markdownIt-Anchor" href="#第二章-模型评估与选择"></a> 第二章 模型评估与选择</h1><h2 id="21-经验误差与过拟合"><a class="markdownIt-Anchor" href="#21-经验误差与过拟合"></a> 2.1 经验误差与过拟合</h2><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200610172523.png" alt="image-20200610172522324" /></p><p>我们将学习器对样本的实际预测结果与样本的真实值之间的差异成为：误差（error）。定义：</p><ul><li>在训练集上的误差称为训练误差（training error）或经验误差（empirical error）。</li><li>在测试集上的误差称为测试误差（test error）。</li><li>学习器在所有新样本上的误差称为泛化误差（generalization error）。</li></ul><p>显然，我们希望得到的是在新样本上表现得很好的学习器，即泛化误差小的学习器。因此，我们应该让学习器尽可能地从训练集中学出普适性的“一般特征”，这样在遇到新样本时才能做出正确的判别。然而，当学习器把训练集学得“太好”的时候，即把一些训练样本的自身特点当做了普遍特征；同时也有学习能力不足的情况，即训练集的基本特征都没有学习出来。我们定义：</p><ul><li>学习能力过强，以至于把训练样本所包含的不太一般的特性都学到了，称为：过拟合（overfitting）。</li><li>学习能太差，训练样本的一般性质尚未学好，称为：欠拟合（underfitting）。</li></ul><p>可以得知：在过拟合问题中，训练误差十分小，但测试误差较大；在欠拟合问题中，训练误差和测试误差都比较大。目前，欠拟合问题比较容易克服，例如增加迭代次数等，但过拟合问题还没有十分好的解决方案，<code>过拟合</code>是机器学习面临的关键障碍。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200610172335.png" alt="image-20200610172334317" /></p><h2 id="22-评估方法"><a class="markdownIt-Anchor" href="#22-评估方法"></a> 2.2 评估方法</h2><p>在现实任务中，我们往往有多种算法可供选择，那么我们应该选择哪一个算法才是最适合的呢？如上所述，我们希望得到的是泛化误差小的学习器，理想的解决方案是对模型的泛化误差进行评估，然后选择泛化误差最小的那个学习器。但是，泛化误差指的是模型在所有新样本上的适用能力，我们无法直接获得泛化误差。</p><p>因此，通常我们采用一个“测试集”来测试学习器对新样本的判别能力，然后以“测试集”上的“测试误差”作为“泛化误差”的近似。显然：我们选取的测试集应尽可能与训练集互斥，下面用一个小故事来解释why：</p><p>假设老师出了10 道习题供同学们练习，考试时老师又用同样的这10道题作为试题，可能有的童鞋只会做这10 道题却能得高分，很明显：这个考试成绩并不能有效地反映出真实水平。回到我们的问题上来，我们希望得到泛化性能好的模型，好比希望同学们课程学得好并获得了对所学知识”举一反三”的能力；训练样本相当于给同学们练习的习题，测试过程则相当于考试。显然，若测试样本被用作训练了，则得到的将是过于”乐观”的估计结果。</p><h2 id="23-训练集与测试集的划分方法"><a class="markdownIt-Anchor" href="#23-训练集与测试集的划分方法"></a> 2.3 训练集与测试集的划分方法</h2><p>如上所述：我们希望用一个“测试集”的“测试误差”来作为“泛化误差”的近似，因此我们需要对初始数据集进行有效划分，划分出互斥的“训练集”和“测试集”。下面介绍几种常用的划分方法：</p><h3 id="231-留出法"><a class="markdownIt-Anchor" href="#231-留出法"></a> 2.3.1 留出法</h3><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200610180637.png" alt="image-20200610180636734" /></p><p>将数据集D划分为两个互斥的集合，一个作为训练集S，一个作为测试集T，满足D=S∪T且S∩T=∅，常见的划分为：大约2/3-4/5的样本用作训练，剩下的用作测试。需要注意的是：训练/测试集的划分要尽可能保持数据分布的一致性，以避免由于分布的差异引入额外的偏差，常见的做法是采取分层抽样。同时，由于划分的随机性，单次的留出法结果往往不够稳定，一般要采用若干次随机划分，重复实验取平均值的做法。</p><h3 id="232-交叉验证法"><a class="markdownIt-Anchor" href="#232-交叉验证法"></a> 2.3.2 交叉验证法</h3><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200610181554.png" alt="image-20200610181553133" /></p><p>将数据集D划分为k个大小相同的互斥子集，满足D=D1∪D2∪…∪Dk，Di∩Dj=∅（i≠j），同样地尽可能保持数据分布的一致性，即采用分层抽样的方法获得这些子集。交叉验证法的思想是：每次用k-1个子集的并集作为训练集，余下的那个子集作为测试集，这样就有K种训练集/测试集划分的情况，从而可进行k次训练和测试，最终返回k次测试结果的均值。交叉验证法也称“k折交叉验证”，k最常用的取值是10，下图给出了10折交叉验证的示意图。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200610180818.png" alt="image-20200610180817004" /></p><p>与留出法类似，将数据集D划分为K个子集的过程具有随机性，因此K折交叉验证通常也要重复p次，称为p次k折交叉验证，常见的是10次10折交叉验证，即进行了100次训练/测试。特殊地当划分的k个子集的每个子集中只有一个样本时，称为“留一法”，显然，留一法的评估结果比较准确，但对计算机的消耗也是巨大的。</p><h3 id="233-自助法"><a class="markdownIt-Anchor" href="#233-自助法"></a> 2.3.3 自助法</h3><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200610181434.png" alt="image-20200610181433049" /></p><p>我们希望评估的是用整个D训练出的模型。但在留出法和交叉验证法中，由于保留了一部分样本用于测试，因此实际评估的模型所使用的训练集比D小，这必然会引入一些因训练样本规模不同而导致的估计偏差。留一法受训练样本规模变化的影响较小，但计算复杂度又太高了。“自助法”正是解决了这样的问题。</p><p>自助法的基本思想是：给定包含m个样本的数据集D，每次随机从D 中挑选一个样本，将其拷贝放入D’，然后再将该样本放回初始数据集D 中，使得该样本在下次采样时仍有可能被采到。重复执行m 次，就可以得到了包含m个样本的数据集D’。可以得知在m次采样中，样本始终不被采到的概率取极限为：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200610181123.png" alt="image-20200610181122279" /></p><p>这样，通过自助采样，初始样本集D中大约有36.8%的样本没有出现在D’中，于是可以将D’作为训练集，D-D’作为测试集。自助法在数据集较小，难以有效划分训练集/测试集时很有用，但由于自助法产生的数据集（随机抽样）改变了初始数据集的分布，因此引入了估计偏差。在初始数据集足够时，留出法和交叉验证法更加常用。</p><h2 id="24-调参与最终模型"><a class="markdownIt-Anchor" href="#24-调参与最终模型"></a> 2.4 调参与最终模型</h2><p>大多数学习算法都有些参数(parameter) 需要设定，参数配置不同，学得模型的性能往往有显著差别，这就是通常所说的”参数调节”或简称”调参” (parameter tuning)。</p><p>学习算法的很多参数是在实数范围内取值，因此，对每种参数取值都训练出模型来是不可行的。常用的做法是：对每个参数选定一个范围和步长λ，这样使得学习的过程变得可行。例如：假定算法有3 个参数，每个参数仅考虑5 个候选值，这样对每一组训练/测试集就有5<em>5</em>5= 125 个模型需考察，由此可见：拿下一个参数（即经验值）对于算法人员来说是有多么的happy。</p><p>最后需要注意的是：当选定好模型和调参完成后，我们需要使用初始的数据集D重新训练模型，即让最初划分出来用于评估的测试集也被模型学习，增强模型的学习效果。用上面考试的例子来比喻：就像高中时大家每次考试完，要将考卷的题目消化掉（大多数题目都还是之前没有见过的吧？），这样即使考差了也能开心的玩耍了~。</p><p>p8</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能/机器学习/西瓜书/CH1-绪论</title>
      <link href="/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E8%A5%BF%E7%93%9C%E4%B9%A6/CH1-%E7%BB%AA%E8%AE%BA/"/>
      <url>/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E8%A5%BF%E7%93%9C%E4%B9%A6/CH1-%E7%BB%AA%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-绪论"><a class="markdownIt-Anchor" href="#第一章-绪论"></a> 第一章 绪论</h1><p>傍晚小街路面上沁出微雨后的湿润，和熙的细风吹来，抬头看看天边的晚霞，嗯，明天又是一个好天气。走到水果摊旁，挑了个根蒂蜷缩、敲起来声音浊响的青绿西瓜，一边满心期待着皮薄肉厚瓢甜的爽落感，一边愉快地想着，这学期狠下了工夫，基础概念弄得清清楚楚，算法作业也是信手拈来，这门课成绩一定差不了！哈哈，也希望自己这学期的 Machine Learning 课程取得一个好成绩！</p><h2 id="11-引言"><a class="markdownIt-Anchor" href="#11-引言"></a> 1.1 引言</h2><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200609152838.png" alt="image-20200609152836836" /></p><h3 id="1-机器学习的定义"><a class="markdownIt-Anchor" href="#1-机器学习的定义"></a> ① 机器学习的定义</h3><p>正如我们根据过去的经验来判断明天的天气，吃货们希望从购买经验中挑选一个好瓜，那能不能让计算机帮助人类来实现这个呢？机器学习正是这样的一门学科，人的“经验”对应计算机中的“数据”，让计算机来学习这些经验数据，生成一个算法模型，在面对新的情况中，计算机便能作出有效的判断，这便是机器学习。</p><p>另一本经典教材的作者 Mitchell 给出了一个形式化的定义，假设：</p><ul><li>P：计算机程序在某任务类 T 上的性能。</li><li>T：计算机程序希望实现的任务类。</li><li>E：表示经验，即历史的数据集。</li></ul><p>若该计算机程序通过利用经验 E 在任务 T 上获得了性能 P 的改善，则称该程序对 E 进行了学习。</p><p><strong>总结归纳</strong></p><p>机器学习（Machine Learning）致力于研究如何通过计算的手段，利用经验来改善系统自身的性能，从而在计算机上从数据中产生“模型”，用于对新的情况给出判断。</p><p>在计算机系统中，“经验”通常以“数据”的形式存在。</p><p>ML 研究的主要内容：在计算机上、从数据中产生“模型 model ”的算法。即是：如何通过数据集产生模型？因此机器学习本质上，研究的是算法；而这种算法的作用是，从数据集中产生模型；而模型的作用是，当面对新的数据时，模型会给我们提供一定的判断，即是数据预测。</p><p>模型，可以看做是：从数据集中学得的结果。</p><p>机器学习，是研究<strong>算法</strong>的学问。</p><h2 id="12-基本术语"><a class="markdownIt-Anchor" href="#12-基本术语"></a> 1.2 基本术语</h2><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200609162200.png" alt="image-20200609162159805" /></p><p>假设我们收集了一批西瓜的数据，例如：（色泽=青绿;根蒂=蜷缩;敲声=浊响)， (色泽=乌黑;根蒂=稍蜷;敲声=沉闷)， (色泽=浅自;根蒂=硬挺;敲声=清脆)……每对括号内是一个西瓜的记录，定义：</p><ul><li>所有记录的集合为：数据集。</li><li>每一条记录为：一个示例（instance）或样本（sample）。</li><li>例如：色泽或敲声，单个的特点为特征（feature）或属性（attribute）。</li><li>对于一条记录，如果在坐标轴上表示，每个西瓜都可以用坐标轴中的一个点表示，一个点也是一个向量，例如（青绿，蜷缩，浊响），即每个西瓜为：一个特征向量（feature vector）。</li><li>一个样本的特征数为：维数（dimensionality），该西瓜的例子维数为3，当维数非常大时，也就是现在说的“维数灾难”。</li></ul><p>计算机程序学习经验数据生成算法模型的过程中，每一条记录称为一个“训练样本”，同时在训练好模型后，我们希望使用新的样本来测试模型的效果，则每一个新的样本称为一个“测试样本”。定义：</p><ul><li>所有训练样本的集合为：训练集（trainning set），[特殊]。</li><li>所有测试样本的集合为：测试集（test set），[一般]。</li><li>机器学习出来的模型适用于新样本的能力为：泛化能力（generalization），即从特殊到一般。</li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200609162404.png" alt="image-20200609162342909" /></p><p>西瓜的例子中，我们是想计算机通过学习西瓜的特征数据，训练出一个决策模型，来判断一个新的西瓜是否是好瓜。可以得知我们预测的是：西瓜是好是坏，即好瓜与差瓜两种，是离散值。同样地，也有通过历年的人口数据，来预测未来的人口数量，人口数量则是连续值。定义：</p><ul><li>预测值为离散值的问题为：分类（classification）。</li><li>预测值为连续值的问题为：回归（regression）。</li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200609162521.png" alt="image-20200609162519955" /></p><p>我们预测西瓜是否是好瓜的过程中，很明显对于训练集中的西瓜，我们事先已经知道了该瓜是否是好瓜，学习器通过学习这些好瓜或差瓜的特征，从而总结出规律，即训练集中的西瓜我们都做了标记，称为标记信息。但也有没有标记信息的情形，例如：我们想将一堆西瓜根据特征分成两个小堆，使得某一堆的西瓜尽可能相似，即都是好瓜或差瓜，对于这种问题，我们事先并不知道西瓜的好坏，样本没有标记信息。定义：</p><ul><li>训练数据有标记信息的学习任务为：监督学习（supervised learning），容易知道上面所描述的分类和回归都是监督学习的范畴。</li><li>训练数据没有标记信息的学习任务为：无监督学习（unsupervised learning），常见的有聚类和关联规则。</li></ul><h2 id="13-假设空间"><a class="markdownIt-Anchor" href="#13-假设空间"></a> 1.3 假设空间</h2><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200609164216.png" alt="image-20200609164215367" /></p><p>假设空间：即所有假设组成的空间</p><p>归纳和演绎是科学推理的两大基本手段：</p><ul><li>归纳——泛化过程</li><li>演绎——特化过程</li></ul><p>样本有3个属性，每个属性有3种可能取值，则假设空间规模大小为4×4×4+1=65，每个属性多出一种无论这个属性取什么值都满足的情况“*”，用空值表示分类的种类不存在的情况，比如无论属性是什么，瓜始终都是好瓜，不存在孬瓜（+1），代表空集。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200609165357.png" alt="image-20200609165356778" /></p><h2 id="14-归纳偏好"><a class="markdownIt-Anchor" href="#14-归纳偏好"></a> 1.4 归纳偏好</h2><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200609165944.png" alt="image-20200609165943594" /></p><p>学习过程中对某种类型假设的偏好称作归纳偏好。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200609170644.png" alt="image-20200609170643510" /></p><p>归纳偏好可看作学习算法自身在一个可能很庞大的假设空间中对假设进行选择的启发式或“价值观”。</p><p>“奥卡姆剃刀”是一种常用的、自然科学研究中最基本的原则，即“若有多个假设与观察一致，选最简单的那个”。</p><p>具体的现实问题中，学习算法本身所做的假设是否成立，也即算法的归纳偏好是否与问题本身匹配，大多数时候直接决定了算法能否取得好的性能。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能/机器学习/西瓜书/CH0-参考资料</title>
      <link href="/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E8%A5%BF%E7%93%9C%E4%B9%A6/CH0-%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/"/>
      <url>/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E8%A5%BF%E7%93%9C%E4%B9%A6/CH0-%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/</url>
      
        <content type="html"><![CDATA[<h1 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h1><ul><li><a href="https://wugenqiang.gitee.io/file-storage/pdf.js/web/viewer.html?file=../../%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%91%A8%E5%BF%97%E5%8D%8E-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0_.pdf" target="_blank" rel="noopener">机器学习西瓜书 PDF</a></li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200610163910.png" alt="image-20200610163909782" /></p><ul><li><a href="https://www.bilibili.com/video/BV17J411C7zZ" target="_blank" rel="noopener">机器学习西瓜书白话解读 - b 站视频</a></li><li><a href="https://www.bilibili.com/video/BV1iE411y7BD" target="_blank" rel="noopener">机器学习实战 b 站 晓唦</a></li><li><a href="https://www.bilibili.com/video/BV1aE411o7qd" target="_blank" rel="noopener">机器学习白板推导系列</a></li><li><a href="https://www.bookstack.cn/books/Vay-keen-Machine-learning-learning-notes" target="_blank" rel="noopener">进击的皇虫 - 周志华《机器学习》学习笔记</a></li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200610163810.png" alt="image-20200610163809345" /></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能/机器学习/机器学习课程-胡浩基/CH2-支持向量机</title>
      <link href="/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B-%E8%83%A1%E6%B5%A9%E5%9F%BA/CH2-%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA/"/>
      <url>/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B-%E8%83%A1%E6%B5%A9%E5%9F%BA/CH2-%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="第二章-支持向量机"><a class="markdownIt-Anchor" href="#第二章-支持向量机"></a> 第二章 支持向量机</h1><blockquote><p>没有免费午餐定理告诉我们，没有普适的、放之四海而皆准的算法，但是人们在长期的研究和实践中，能总结出能适应大多数应用场景、相对好的算法。</p></blockquote><p>下面从最著名的机器学习算法之一：支持向量机，开始学习。</p><p>支持向量机，由俄罗斯统计学家、数学家 <code>Vladimir Vapnik</code> 在 1995 年发表和创造的。在 20 世纪 70 年代，他就已经完成了支持向量机的主要理论框架。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200622180025.png" alt="image-20200622180024570" /></p><p>在介绍支持向量机之前，先介绍两个基础概念：</p><ul><li><p>（1）线性可分：Linear Separable</p><ul><li><p>举例一：特征空间为二维</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200622180508.png" alt="image-20200622180507116" /></p></li><li><p>举例二：特征空间为三维</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200622180906.png" alt="image-20200622180905622" /></p></li></ul></li><li><p>（2）线性不可分：Nonlinear Separable</p><ul><li><p>举例一：特征空间为二维</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200622180532.png" alt="image-20200622180531609" /></p></li><li><p>举例二：特征空间为三维</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200622180925.png" alt="image-20200622180924800" /></p></li></ul></li></ul><p>!&gt; 当特征空间维度 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>≥</mo></mrow><annotation encoding="application/x-tex">\geq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">≥</span></span></span></span> 四维时，将会变为<strong>超平面</strong>（<code>Hyperplane</code>）划分。由于人眼对空间的感知仅仅局限于三维，所以我们无法直观的画出一张图，在四维及四维以上的情况下说明线性可分和线性不可分。此时我们必须要借助<code>数学</code>对线性可分和线性不可分给出一个精确的定义。</p><p>特征空间是二维的情况下，线性可分：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200622182028.png" alt="image-20200622182027191" /></p><p>用数学严格定义训练样本以及他们的标签。</p><p>假设：我们有 N 个训练样本和他们的标签：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200622182418.png" alt="image-20200622182417848" /></p><h2 id="21-线性可分定义"><a class="markdownIt-Anchor" href="#21-线性可分定义"></a> 2.1 线性可分定义</h2><blockquote><p>下面用数学严格定义线性可分：</p></blockquote><p>线性可分的严格定义：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200623164137.png" alt="image-20200623164126751" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200623164202.png" alt="image-20200623164201315" /></p><p>用<code>向量形式</code>来定义线性可分：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200623164405.png" alt="image-20200623164404442" /></p><p>线性可分定义的<strong>最简化形式</strong>：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200623164713.png" alt="image-20200623164712169" /></p><blockquote><p>✏️ 思考题：</p></blockquote><p>（1）给出实际生活中，<strong>训练样本集</strong>是线性可分和线性不可分的例子？</p><h2 id="22-问题描述"><a class="markdownIt-Anchor" href="#22-问题描述"></a> 2.2 问题描述</h2><p><code>Vladimir Vapnik</code>  提出的支持向量机算法分成两个步骤：</p><ul><li>第一步：解决线性可分问题</li><li>第二步：再将线性可分问题中获得的结论推广到线性不可分情况</li></ul><p><strong>如何解决线性可分问题</strong></p><p><code>Vladimir Vapnik</code>  提出问题：在这无数多个分开各个类别的超平面中，到底哪一个最好呢？</p><p>二维特征空间中的<code>二分类</code>问题</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200623170227.png" alt="image-20200623170226284" /></p><p>哪一条是最好的呢？大部分人会认为第 2 条线最好，实际上是对训练样本先验分布有一定假设，这个假设是什么呢？例如：假设训练样本的位置在特征空间上有测量误差。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200623170547.png" alt="image-20200623170545869" /></p><p>相比较于 1 和 3 号线，2 号线更能抵御训练样本位置的误差。</p><p>那么，有人会问，2 号线是如何画出来的呢？<strong>基于最优化理论</strong>，将寻找 2 号线的过程，变成一个最优化问题。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200623171012.png" alt="image-20200623171011487" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200623171031.png" alt="image-20200623171030142" /></p><p>注：这条要找的线，在上下两条平行线的正中间！</p><p>所以，在线性可分情况下，支持向量机寻找的最优分类直线应满足以下条件：</p><ul><li>（1）该直线分开了两个类</li><li>（2）该直线最大化<strong>间隔</strong>（<code>margin</code>）</li><li>（3）该直线处于间隔的中间，到所有支持向量距离相等</li></ul><p>!&gt; 注：上述的讨论，是基于二维特征空间的结果，但是在高维空间中，以上结论却是一致的！</p><blockquote><p>✏️ 思考题：</p></blockquote><p>证明：在线性可分条件下，有且只有唯一一条直线，满足上面三个条件。</p><h2 id="23-优化问题"><a class="markdownIt-Anchor" href="#23-优化问题"></a> 2.3 优化问题</h2><p><strong>最优分类超平面应该满足：</strong></p><ul><li>（1）该超平面分开了两类</li><li>（2）该超平面有最大化间隔</li><li>（3）该超平面处于间隔的中间，到所有支持向量距离相等</li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200703225105.png" alt="image-20200703225104307" /></p><p>假定训练样本集是线性可分的，支持向量机需要寻找的是最大化间隔（Margin）的超平面。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200703230204.png" alt="image-20200703230203084" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200703225404.png" alt="image-20200703225403742" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200703230106.png" alt="image-20200703230105928" /></p><p>注意：</p><ul><li>事实一：</li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200703230308.png" alt="image-20200703230307554" /></p><ul><li>事实二：</li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200703230418.png" alt="image-20200703230417455" /></p><p>**说明：**在二维的情况下，点到超平面的距离公式：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200703230624.png" alt="image-20200703230623502" /></p><p>🍨 支持向量机优化问题推导中最难理解的部分：</p><p>用 α 去缩放 ω b</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200703230936.png" alt="image-20200703230935337" /></p><p>（ω, b） 表示的超平面和（αω, αb）表示的超平面是同一个平面，因此可以用参数 α 去缩放（ω, b） ，使满足上述条件。</p><p>根据<strong>事实二</strong>，支持向量 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>X</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">X_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 到超平面的距离将会变为：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200703231514.png" alt="image-20200703231513223" /></p><p>因此，最大化支持向量到超平面的距离，等价于最小化 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∥</mi><mi>ω</mi><mi mathvariant="normal">∥</mi></mrow><annotation encoding="application/x-tex">\| ω \|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∥</span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mord">∥</span></span></span></span></p><p>所以，我们把优化问题的目标函数定为：</p><p>最小化：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mn>2</mn></mfrac></mstyle><mi mathvariant="normal">∥</mi><mi>ω</mi><msup><mi mathvariant="normal">∥</mi><mn>2</mn></msup><mspace width="2em"/></mrow><annotation encoding="application/x-tex">\dfrac{1}{2}\|ω\|^2 \qquad</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord">∥</span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mord"><span class="mord">∥</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:2em;"></span></span></span></span> 最小化：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∥</mi><mi>ω</mi><mi mathvariant="normal">∥</mi></mrow><annotation encoding="application/x-tex">\|ω\|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∥</span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mord">∥</span></span></span></span></p><p>两者是完全一样的，因为后续的求导会更方便！</p><p><strong>限制条件：</strong></p><ul><li><p>（1）支持向量到超平面的距离为：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mn>2</mn></mfrac></mstyle><mi mathvariant="normal">∥</mi><mi>ϵ</mi><mi mathvariant="normal">∥</mi></mrow><annotation encoding="application/x-tex">\dfrac{1}{2}\|\epsilon \|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord">∥</span><span class="mord mathdefault">ϵ</span><span class="mord">∥</span></span></span></span></p></li><li><p>（2）在非支持向量上 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><msup><mi>ω</mi><mi>T</mi></msup><mo>+</mo><mi>b</mi><mi mathvariant="normal">∣</mi><mo>&gt;</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">|ω^T+b|&gt;1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p></li></ul><p>综合两者，限制条件可表述为：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mi>i</mi></msub><mo stretchy="false">(</mo><msup><mi>ω</mi><mi>T</mi></msup><msub><mi>x</mi><mi>i</mi></msub><mo>+</mo><mi>b</mi><mo stretchy="false">)</mo><mo>≥</mo><mn>1</mn><mspace width="1em"/><mi>i</mi><mo>=</mo><mn>1</mn><mo>∼</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">y_i({ω^T}x_i+b)\geq 1 \quad i = 1 \sim N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">y_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的作用是协调超平面的左右，让一边 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">（</mi><msup><mi>ω</mi><mi>T</mi></msup><mi>x</mi><mo>+</mo><mi>b</mi><mi mathvariant="normal">）</mi><mo>&gt;</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">（ω^Tx+b）&gt;1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.924661em;vertical-align:-0.08333em;"></span><span class="mord cjk_fallback">（</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">b</span><span class="mord cjk_fallback">）</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，而让另一边 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">（</mi><msup><mi>ω</mi><mi>T</mi></msup><mi>x</mi><mo>+</mo><mi>b</mi><mi mathvariant="normal">）</mi><mo>&lt;</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">（ω^Tx+b）&lt; 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.924661em;vertical-align:-0.08333em;"></span><span class="mord cjk_fallback">（</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">b</span><span class="mord cjk_fallback">）</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p><p>!&gt; 值得注意的是，上面的 <code>1</code> 可以改为任意正数，例如：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200703233512.png" alt="image-20200703233511706" /></p><p>但是代表的是同一个平面！</p><blockquote><p>🔊 总结一下：</p></blockquote><p>线性可分情况下，支持向量机寻找最佳超平面的优化问题可以表示为：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200703225404.png" alt="image-20200703225403742" /></p><p>$（x_i, y_i）,i=1 \sim N $ 是已知的，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">（</mi><mi>ω</mi><mo separator="true">,</mo><mi>b</mi><mi mathvariant="normal">）</mi></mrow><annotation encoding="application/x-tex">（ω, b）</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord cjk_fallback">（</span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mord cjk_fallback">）</span></span></span></span> 是待求的。</p><p>👕 我们可以看到，这是<strong>凸优化</strong>（<code>CONVEX OPTIMIZATION</code>）中的二次规划问题。</p><p><strong>二次规划的定义：</strong></p><ul><li>（1）目标函数（<code>Objective Function</code>）是二次项</li><li>（2）限制条件是一次项</li></ul><p>【说明】目标函数：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mn>2</mn></mfrac></mstyle><mi mathvariant="normal">∥</mi><mi>ω</mi><msup><mi mathvariant="normal">∥</mi><mn>2</mn></msup><mspace width="2em"/></mrow><annotation encoding="application/x-tex">\dfrac{1}{2}\|ω\|^2 \qquad</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord">∥</span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mord"><span class="mord">∥</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:2em;"></span></span></span></span> 限制条件：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mi>i</mi></msub><mo stretchy="false">(</mo><msup><mi>ω</mi><mi>T</mi></msup><msub><mi>x</mi><mi>i</mi></msub><mo>+</mo><mi>b</mi><mo stretchy="false">)</mo><mo>≥</mo><mn>1</mn><mspace width="1em"/><mi>i</mi><mo>=</mo><mn>1</mn><mo>∼</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">y_i({ω^T}x_i+b)\geq 1 \quad i = 1 \sim N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200703234923.png" alt="image-20200703234922103" /></p><p>这样的凸优化问题，要么无解，要么只有唯一的最小值。</p><p>🧪 在最优化的理论当中，如果一个问题是<strong>凸优化问题</strong>，我们就把它当成是一个已经解决的问题，因为<code>凸优化问题只有唯一一个全局极值</code>，我们可以利用梯度下降的算法，能够很方便的求出它的解。</p><p>👓 举例（凸优化问题）：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200703235528.png" alt="image-20200703235527358" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200703235730.png" alt="image-20200703235729120" /></p><blockquote><p>用凸优化解出的支持向量机最佳分类超平面的例子：</p></blockquote><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200703235920.png" alt="image-20200703235919951" /></p><h2 id="24-线性不可分情况"><a class="markdownIt-Anchor" href="#24-线性不可分情况"></a> 2.4 线性不可分情况</h2><p>在线性不可分的情况下，以上的最优化问题是<strong>无解</strong>的！</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200717210924.png" alt="image-20200717210923297" /></p><p>通过放松限制条件，使得最优化问题有解！</p><blockquote><p>放松限制条件的基本思路是：对每个训练样本及标签 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>X</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>Y</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(X_i,Y_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，我们需要设置一个松弛变量 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>δ</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">{\delta}_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> (slack variable)</p></blockquote><p>限制条件改写为：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mi>i</mi></msub><mo stretchy="false">(</mo><msup><mi>ω</mi><mi>T</mi></msup><msub><mi>x</mi><mi>i</mi></msub><mo>+</mo><mi>b</mi><mo stretchy="false">)</mo><mo>≥</mo><mn>1</mn><mo>−</mo><msub><mi>δ</mi><mi>i</mi></msub><mspace width="1em"/><mi>i</mi><mo>=</mo><mn>1</mn><mo>∼</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">y_i({ω^T}x_i+b)\geq 1 - {\delta}_i  \quad i = 1 \sim N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span></p><p>🎉 经改造后的支持向量机优化版本：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200717212131.png" alt="image-20200717212130407" /></p><p><code>比例因子 C</code>起到了平衡 ω 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>δ</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">{\delta}_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 两项的作用，平衡两项的比例因子 C 是人为设定的，我们把人为实现设定的参数叫做<strong>算法的超参数（Hyper Parameter）</strong>，我们会在实际的应用当中不断的变化 C 的值，同时对于每个 C，我们要不断测试算法的识别率！然后选取使得识别率达到最高的超参数 C 的值。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200717213540.png" alt="image-20200717213538973" /></p><p>!&gt; 这是凸优化问题，都可以被高效的求解！</p><p>👒 支持向量机是超参数很少的算法模型。</p><p>👒 超参数很多的算法模型举例：人工神经网络、卷积神经网络等等。</p><p>（<strong>举例</strong>）在线性不可分情况下应用支持向量机：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200717214042.png" alt="image-20200717214041673" /></p><p>使得超平面和线性可分情况保持基本一致。</p><p>分类面的展示：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200717214318.png" alt="image-20200717214317035" /></p><p>未达到求解目的！分错了将近一半的训练样本，和瞎猜没有区别！那么，问题出在哪里呢？</p><ul><li>问题出在我们假设分开两类的函数是线性的！但是，线性模型的表现力是不够的！</li><li>所以要扩大可选的函数范围！使它超越线性，以应对复杂的线性不可分情况！</li></ul><p>下面来详细说说：支持向量机是如何扩大可选函数范围，提高非线性可分的处理能力！</p><h2 id="25-低维到高维的映射"><a class="markdownIt-Anchor" href="#25-低维到高维的映射"></a> 2.5 低维到高维的映射</h2><p>人工神经网络、决策树，采用的是直接产生更多可选函数的方式，例如：在人工神经网络中，通过多层非线性函数的组合，能够产生类似于椭圆这样的曲线，从而分开下图中 ○ 和 × ：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200717215434.png" alt="image-20200717215433900" /></p><p>但是支持向量机不是直接产生这样的函数，而是通过将特征空间由低维映射到高维，然后在高维的特征空间中依然用<strong>线性超平面</strong>对数据进行分类！</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200717215803.png" alt="image-20200717215802526" /></p><blockquote><p>考查如图的异或问题：</p></blockquote><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200717220338.png" alt="image-20200717220337424" /></p><blockquote><p>这是一个在低维的特征空间中线性不可分，在映射到高维的特征空间后线性可分的例子</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能/机器学习/机器学习课程-胡浩基/CH1-引言</title>
      <link href="/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B-%E8%83%A1%E6%B5%A9%E5%9F%BA/CH1-%E5%BC%95%E8%A8%80/"/>
      <url>/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B-%E8%83%A1%E6%B5%A9%E5%9F%BA/CH1-%E5%BC%95%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-引言"><a class="markdownIt-Anchor" href="#第一章-引言"></a> 第一章 引言</h1><h2 id="11-机器学习定义"><a class="markdownIt-Anchor" href="#11-机器学习定义"></a> 1.1 机器学习定义</h2><blockquote><p>英语释义：Machine Learning</p></blockquote><h3 id="1-第一个定义"><a class="markdownIt-Anchor" href="#1-第一个定义"></a> ①  第一个定义</h3><p>学习之前，我们要了解一个人物： <code>ARTHUR SAMUEL</code> ：机器学习领域的先驱之一，他编写了世界上第一个棋类游戏的人工智能程序。</p><p>1959 年 <code>ARTHUR SAMUEL</code> 给出的定义：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621182214.png" alt="image-20200621182212199" /></p><p>但是，有人不禁会问，什么是<strong>显著式编程</strong>呢？通俗的来讲，有人为参与的编程就是显著式编程。</p><p>让计算机自己总结规律的编程方法，就叫做<strong>非显著式编程</strong>。</p><p><code>ARTHUR SAMUEL</code> 所定义的机器学习，是专指这种非显著式编程的方式。</p><p>!&gt; 显著式编程有很大的<code>劣势</code>：</p><ul><li>要机器人把它所处的环境调查得一清二楚。</li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621185632.png" alt="image-20200621185631253" /></p><p><strong>以取咖啡为例，非显著式编程下机器人怎么做：</strong></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621184658.png" alt="image-20200621184657839" /></p><p>规定：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621184749.png" alt="image-20200621184748677" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621184820.png" alt="image-20200621184819179" /></p><p>当我们规定了<code>行为</code>和<code>收益函数</code>后，让计算机自己去找<strong>最大化收益函数</strong>的行为。</p><ul><li>一开始，计算机采用<strong>随机化</strong>的行为；</li><li>只要我们的程序编的足够好，计算机是可能找到一个<strong>最大化收益函数</strong>的行为模式的。</li></ul><p>!&gt; 非显著式编程的<code>优势</code>：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621185730.png" alt="image-20200621185728913" /></p><h3 id="2-第二个定义"><a class="markdownIt-Anchor" href="#2-第二个定义"></a> ② 第二个定义</h3><p>1998 年 <code>Tom Mitshell</code> 写了下面这本书，该书被公认为是第一本成熟的教科书。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621190517.png" alt="image-20200621190516829" /></p><p>该书中给出了机器学习的第二个定义：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621190827.png" alt="image-20200621190826259" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621190859.png" alt="image-20200621190858616" /></p><p><strong>以识别菊花和玫瑰为例：</strong></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621190958.png" alt="image-20200621190956600" /></p><p>我们要了解一个专有名词：识别率：<code>Recognition Rate</code></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621191325.png" alt="image-20200621191324477" /></p><p>!&gt; 把识别的正确率简称为<strong>识别率</strong>，将识别率作为性能指标。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621191723.png" alt="image-20200621191722775" /></p><blockquote><p>这种算法的特点是：</p></blockquote><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621191840.png" alt="image-20200621191839280" /></p><p>这里我们要注意一下，<strong>显著式编程</strong>是无法达到这一目的的。因为显著式编程在一开始就定死了程序的输入和输出。</p><p><strong>以机器人冲咖啡为例：</strong></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621193025.png" alt="image-20200621193023794" /></p><blockquote><p>总结</p></blockquote><p><code>TOM MITSHELL</code> 的定义比 <code>ARTHUR SAMUEL</code> 的定义<strong>更加数学化</strong>。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621193323.png" alt="image-20200621193322329" /></p><blockquote><p>✏️ 思考题：</p></blockquote><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621193520.png" alt="image-20200621193519301" /></p><h2 id="12-机器学习的分类"><a class="markdownIt-Anchor" href="#12-机器学习的分类"></a> 1.2 机器学习的分类</h2><p>首先我们来考虑一个问题，在上面这道思考题中，如何对这四个任务进行分类呢？</p><p>这四个任务可以分为两类，（1）（4）和（2）（3）这两类。</p><p>划分的标准是什么呢？答案是<strong>经验 E</strong></p><p>在（2）（3）中，所有的经验 E 都是由人工采集并输入进计算机的。我们称之为<code>监督学习</code>（Supervised Learning）</p><p>例如（2）中：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621194500.png" alt="image-20200621194459607" /></p><p>例如（3）中：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621194614.png" alt="image-20200621194613804" /></p><p>我们把告诉计算机每一个训练样本是什么的过程，称为<strong>为训练数据打标签</strong>（<code>Labeling for training data</code>）</p><p>所以，<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621195254.png" alt="image-20200621195252874" /></p><p>值得一提的是，为数据打标签需要繁琐的人工。例如<strong>现代的人脸识别系统</strong>。需要数千万张带有标签的人脸图片，要耗费非常庞大的工作量和时间。</p><p>而在（1）（4）中，经验 E 是由<code>计算机与环境互动</code>获得的。</p><p>计算机产生行为，同时获得这个行为的结果，我们的程序只需要定义这些行为的<strong>收益函数</strong>（Reward function），对行为进行奖励或者惩罚。</p><p>例如计算机下棋这个任务中，下赢了就奖励，输了就惩罚。在自动驾驶的任务中，顺利到达目的地就奖励，中途出了事故就惩罚。</p><p>同时，我们要设计一定的算法，让计算机自动的改变自己的行为模式去<strong>最大化收益函数</strong>，完成机器学习的过程，我们将这一类学习任务称为<strong>强化学习</strong>（Reinforcement Learning）。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621200935.png" alt="image-20200621200933983" /></p><blockquote><p>总结：按照机器学习的<code>任务性质</code>的不同，机器学习算法可以分为<code>监督学习</code>和<code>强化学习</code>两类。</p></blockquote><p>监督学习和强化学习结合使用的典型例子：<code>ALPHAGO</code></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621214139.png" alt="image-20200621214137944" /></p><p>对于<code>监督学习</code>，根据数据标签的存在与否，分为三类：</p><ul><li>（1）传统的监督学习（Traditional Supervised Learning）</li><li>（2）非监督学习（Unsupervised Learning）</li><li>（3）半监督学习（Semi-Supervised Learning）</li></ul><blockquote><p>（1）传统的监督学习（Traditional Supervised Learning）</p></blockquote><ul><li>特点：每一个<code>训练数据</code>都有对应的<code>标签</code></li><li>会学习到的算法：<ul><li>支持向量机（Support Vector Machine）</li><li>人工神经网络（Neural Networks）</li><li>深度神经网络（Deep Neural Networks）</li></ul></li></ul><blockquote><p>（2）非监督学习（Unsupervised Learning）</p></blockquote><ul><li>特点：所有<code>训练数据</code>都没有对应的<code>标签</code></li><li>会学习到的算法：<ul><li>聚类（Clustering）</li><li>EM 算法（Expectation-Maximization algorithm）</li><li>主成分分析（Principle Component Analysis）</li></ul></li></ul><p>举例：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621215325.png" alt="image-20200621215324036" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621215454.png" alt="image-20200621215453678" /></p><blockquote><p>（3）半监督学习（Semi-Supervised Learning）</p></blockquote><ul><li>特点：<code>训练数据</code>中一部分<code>有标签</code>，一部分<code>没有标签</code></li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621220852.png" alt="image-20200621220851038" /></p><p>举例：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621220911.png" alt="image-20200621220910384" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621220940.png" alt="image-20200621220938698" /></p><blockquote><p>分类问题：人脸识别的任务</p></blockquote><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621221222.png" alt="image-20200621221221150" /></p><blockquote><p>回归问题：预测房价的走势</p></blockquote><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621221322.png" alt="image-20200621221321683" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621221348.png" alt="image-20200621221347702" /></p><p>!&gt; <code>分类</code>和<code>回归</code>问题的界限，其实是<code>非常模糊</code>的，连续与离散可以相互转换。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621221545.png" alt="image-20200621221544363" /></p><h2 id="13-机器学习算法的过程"><a class="markdownIt-Anchor" href="#13-机器学习算法的过程"></a> 1.3 机器学习算法的过程</h2><p>举例：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621221920.png" alt="image-20200621221919270" /></p><p>当我们拿到数据之后，构建机器学习算法的第一步是<code>观察数据，总结规律</code>。</p><p>如上图，可能被观察到的区别：</p><ul><li>（1）平均来说，白细胞面积比红细胞大</li><li>（2）白细胞没有红细胞圆</li><li>（3）白细胞内部纹理比红细胞粗糙</li></ul><blockquote><p>提取纹理特征</p></blockquote><p>机器学习的第一步是：特征提取（Feature Extraction）</p><p><code>特征提取</code>的含义：是指通过<code>训练样本</code>获得的，对机器学习任务有帮助的<code>多维度数据</code>。</p><p>在举例的实验中提取特征为：细胞的面积、圆形度、表面粗糙程度。</p><p>（1）提取细胞的面积特征的<code>方法</code>：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621223235.png" alt="image-20200621223233867" /></p><p>!&gt; 机器学习的重点，不是研究如何提取特征，而是假设在已经提取好特征的前提下，如何构造算法获得更好的性能！</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621223551.png" alt="image-20200621223549986" /></p><p>!&gt; 不同的媒质不同的任务，提取特征的方式千变万化！假设已经获得特征的前提下，研究合理的算法，学习系统获得较好的性能！</p><p>在提取特征这一步做完之后，下一步是对特征进行取舍，我们称之为<code>特征选择</code>（Feature Selection）</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621224055.png" alt="image-20200621224053606" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621224516.png" alt="image-20200621224515636" /></p><p>根据上图的区分度情况来看，选择<code>面积</code>和<code>周长</code>作为区分白细胞和红细胞的特征，来构建机器学习系统。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621224628.png" alt="image-20200621224627626" /></p><p>如何基于这两个特征构建算法呢？（⭐）</p><p>在这个示例中，采用支持向量机（Support Vector Machine）算法，使用到了支持向量机的三种内核：</p><ul><li>线性内核</li><li>多项式核</li><li>高斯径向基函数核</li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621225341.png" alt="image-20200621225340284" /></p><blockquote><p>学习一下：维度和标准</p></blockquote><ul><li>维度：特征空间是二维的，人眼对于超过三维的世界缺乏想象力</li><li>标准：对某一些区域的划分是不一样的，所以我们不能得出一个绝对意义上的好和坏的标准</li></ul><p>如何针对不同应用场景选择合适的机器学习算法？构造新的机器学习算法来解决目前无法解决的应用场景，以后慢慢学习。</p><blockquote><p>训练库准确率的比较：</p></blockquote><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621230344.png" alt="image-20200621230343688" /></p><blockquote><p>测试结果图像：</p></blockquote><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621230411.png" alt="image-20200621230409831" /></p><blockquote><p>总结：</p></blockquote><ul><li>机器学习算法的流程：（1）特征提取和特征选择（2）不同的算法对特征空间做不同的划分（3）获得不同的结果</li></ul><h2 id="14-没有免费午餐定理"><a class="markdownIt-Anchor" href="#14-没有免费午餐定理"></a> 1.4 没有免费午餐定理</h2><p>1995 年，<code>D.H. Wolpert</code> 等人提出<strong>没有免费午餐定理</strong>（<code>No Free Lunch Theorem</code>）：任何一个预测函数，如果在一些训练样本上表现好，那么必然在另一些训练样本上表现不好，如果不对数据在特征空间的先验分布有一定假设，那么表现好与表现不好的情况一样多。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200622113023.png" alt="image-20200622113022724" /></p><p>因此，<strong>没有任何情况下都表现最好的机器学习算法</strong>。</p><p>举例：预测另一个存储单元的位置是 <code>○</code> 还是 <code>×</code>？</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200622103513.png" alt="image-20200622103504052" /></p><p>这种预测有以下两种情况：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200622103553.png" alt="image-20200622103551875" /></p><p>如果不对数据在特征空间的先验分布有一定假设，那么，这两种情况的概率相同。</p><p>但是，计算机的存储单元不止两个呀，假设一台计算机有三个存储单元，我们用<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200622105821.png" alt="image-20200622105820497" />假设存储单元的位置如图所示：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200622110523.png" alt="image-20200622110522255" /></p><p>然后预测其余两个位置是 <code>○</code> 还是 <code>×</code>，有四种可能，如下：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200622110839.png" alt="image-20200622110838705" /></p><p>所以，<code>推理</code>得到，无论计算机的存储单元有多少，无论我们知道多少个类别，<code>结果不论对错</code>的概率都是<code>一半</code>，原因是什么？</p><p>没错，就是<strong>假设各种情况的先验概率一样</strong>了，假设有问题。</p><p>如果计算机的存储空间是 6 × 6 的格子：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200622111523.png" alt="image-20200622111522622" /></p><p>我们来预测红框内是 <code>○</code> 还是 <code>×</code>？根据格子中的图形分布情况，大部分人会做出如下预测：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200622111740.png" alt="image-20200622111739052" /></p><p>其实，目前流行的所有的机器学习算法都会和大家做出同样的预测。</p><p><strong>原因如下：</strong></p><p>在设计<strong>机器学习算法</strong>的时候有一个假设：在特征空间上距离接近的样本，他们属于同一个类别的概率会更高。</p><p>不禁有人会问：这个假设有道理吗？</p><p>首先我们应知道，道理是从以前的事实中来的，人可以通过<code>类比</code>推广到对未来的<code>预测</code>。</p><p>是否会预测出错呢？答案显然是很有可能。</p><p>!&gt; 注意点一：机器学习的本质</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200622113129.png" alt="image-20200622113128704" /></p><p>!&gt; 注意点二：再好的算法也存在<strong>犯错的风险</strong></p><h2 id="15-编程训练"><a class="markdownIt-Anchor" href="#15-编程训练"></a> 1.5 编程训练</h2><blockquote><p>学习完这门课程之后，我们可以做什么？</p></blockquote><ul><li><p>（1）人脸识别，使用 Training Dataset：<code>CASIA WebFace Database Evaluating Dataset</code></p></li><li><p>（2）人脸性别和年龄估计，使用 Database：<code>IMDB Database</code></p></li><li><p>（3）五子棋对战程序</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200622114300.png" alt="image-20200622114259600" /></p></li><li><p>（4）水果识别</p></li><li><p>（5）人脸特征点检测</p></li><li><p>（6）语种识别</p></li><li><p>（7）视频行为识别</p></li><li><p>（8）…</p></li></ul><h1 id="quiz测验"><a class="markdownIt-Anchor" href="#quiz测验"></a> ✍ Quiz（测验）</h1><h2 id="1-第-1-题"><a class="markdownIt-Anchor" href="#1-第-1-题"></a> ① 第 1 题</h2><p>【题目】举出其他监督学习、无监督学习、强化学习的例子</p><p>【解答】</p><ul><li>监督学习：有特征和标签的训练数据，即给定数据，预测标签，例如：人脸识别、指纹识别、天气预测、动作识别、障碍物识别、目标检测等</li><li>无监督学习： 只有特征，没有标签，即给定数据，寻找隐藏的结构和信息，进行分类，例如：用户归类、在多组图片中判断哪些照片是小狗、社交网络分析、客户分类、性别分类、主成分分析等</li><li>强化学习： 包括智能体、环境状态、行动和回报函数四个概念，本质上是智能体作出一系列行动，并得到环境的及时反馈，智能体不断调整行动实现最优的决策。换句话说就是不需要给计算机指示，只需要编写一个算法，让计算机通过<code>自己的学习</code>和<code>经验</code>去获取<code>最大收益值</code>从而自行完成某些任务。例如：扫地机器人、无人驾驶、机器翻译、机器人送快递、机器人送外卖、游戏 AI、路径规划、阿法狗下围棋、语音识别等</li></ul><h2 id="2-第-2-题"><a class="markdownIt-Anchor" href="#2-第-2-题"></a> ② 第 2 题</h2><p>【题目】说一下非显著式编程的优势</p><p>【解答】</p><p>非显著式编程是让计算机自己总结规律的编程方法，让计算机通过数据、经验自动学习。我们规定了行为和收益函数后，计算机会自己去找最大化收益函数。这样可以省去了大量的人力。</p><h2 id="3-第-3-题"><a class="markdownIt-Anchor" href="#3-第-3-题"></a> ③ 第 3 题</h2><p>【题目】既然没有免费午餐定理成立，不管是机器，还是人，为什么都还要学习</p><p>【解答】</p><p>免费午餐的定理是在对未来发生的某些事情不加以一定的经验的加成，所有情况出现的概率都是一样的，所以，正确与否都是有可能的。机器学习的学习特别像人对于学习的一种追求。我们可能在很多时候会犯错误，我们可能对未知的事物判断错误。但是随着经验和知识储备的积累，对于未知事物的判断会愈加准确。就像永远趋向于某一值的函数一样，我们可能永远无法到达 100%，但是，只要我们持续的努力，我们会离 100% 愈来愈接近。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能/机器学习/Python3玩转机器学习/CH2-机器学习基础</title>
      <link href="/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Python3%E7%8E%A9%E8%BD%AC%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/CH2-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Python3%E7%8E%A9%E8%BD%AC%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/CH2-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="第-2-章-机器学习基础"><a class="markdownIt-Anchor" href="#第-2-章-机器学习基础"></a> 第 2 章 机器学习基础</h1><h2 id="21-机器学习的数据"><a class="markdownIt-Anchor" href="#21-机器学习的数据"></a> 2.1 机器学习的数据</h2><p>我们使用著名的鸢尾花数据：<a href="https://en.wikipedia.org/wiki/Iris_flower_data_set" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Iris_flower_data_set</a><br /><code>需要科学上网</code></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200723155844.png" alt="鸢尾花" /></p><p>数据：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200723160220.png" alt="鸢尾花数据" /></p><p>数据数字化：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200723160334.png" alt="数据数字化" /></p><ul><li><p>数据整体叫数据集（data set）</p></li><li><p>每一行数据称为一个样本（sample）</p></li><li><p>除了最后一列，每一列都表达了样本的一个特征（feature），用 <code>X</code> 表示</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200723173332.png" alt="feature" /></p></li><li><p>最后一列，称为标记（label），用小写的 <code>y</code> 表示，原因是它是一个向量，所以小写。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200723215748.png" alt="image-20200723215746970" /></p></li></ul><blockquote><p>📃 在通常的机器学习任务中，为啥特征用 X 表示呢？</p></blockquote><p>因为通常这部分是一个矩阵，这个矩阵有多少行，就说明我们有多少样本，有多少列，就说明我们有多少个特征，通常我们把第 i 个样本行写作 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>X</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">X^{(i)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span>，第 i 个样本第 j 个特征值写作 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>X</mi><mi>j</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msubsup></mrow><annotation encoding="application/x-tex">X_j^{(i)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4577719999999998em;vertical-align:-0.4129719999999999em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4231360000000004em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4129719999999999em;"><span></span></span></span></span></span></span></span></span></span></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200723220211.png" alt="image-20200723220209925" /></p><p>为了可视化特征方便，我们只抽取出特征中的前两个特征，其中萼片的长度作为横轴，萼片的宽度作为纵轴。</p><p>绘制下图：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200723220732.png" alt="image-20200723220730711" /></p><p>对于每一个样本来说，都会在坐标系中表示一个点，假设我们有三个特征，就可以在三维空间中表示它，同理如果有 1000 种特征，就可以在 1000 维空间中表示它，而这个绘制样本的空间我们称它为<strong>特征空间（feature space）</strong>。</p><p>通过可视化绘制样本点后，我们可以比较轻易的绘制出一根直线，红色样本在直线的一边而蓝色样本在直线的另一边。</p><p><strong>分类任务本质就是在特征空间切分，在高维空间同理。</strong></p><p>而鸢尾花拥有 4 个特征，应该是在 4 维特征空间中分析。</p><p><strong>特征可以很抽象</strong></p><ul><li>图像，每一个像素点都是特征</li><li>28 * 28 的图像有 28 * 28 = 784 个特征</li><li>这是灰色图像，如果是彩色图像特征更多</li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200723221414.png" alt="image-20200723221413074" /></p><h2 id="22-机器学习的基本任务"><a class="markdownIt-Anchor" href="#22-机器学习的基本任务"></a> 2.2 机器学习的基本任务</h2><p>机器学习关注的基本任务主要有两类：</p><ul><li>（1）分类任务</li><li>（2）回归任务</li></ul><h3 id="221-分类任务"><a class="markdownIt-Anchor" href="#221-分类任务"></a> 2.2.1 分类任务</h3><p>分类任务举例，比如区分<code>猫和狗</code>，比如上一章所说的<code>手写输入数字识别</code>等等。</p><p>对于分类任务而言，进一步细分，可以分成这几类任务：</p><h4 id="1-二分类任务"><a class="markdownIt-Anchor" href="#1-二分类任务"></a> ① 二分类任务</h4><p>二分类（二选一的任务）</p><ul><li><p>举例：</p></li><li><p>（1）区分猫和狗</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200723222702.png" alt="image-20200723222700610" /></p></li><li><p>（2）判断邮件是垃圾邮件；不是垃圾邮件</p></li><li><p>（3）判断发放给客户信用卡有风险；没有风险</p></li><li><p>（4）判断病患良性肿瘤；恶性肿瘤</p></li><li><p>（5）判断某支股票涨；跌</p></li></ul><h4 id="2-多分类任务"><a class="markdownIt-Anchor" href="#2-多分类任务"></a> ② 多分类任务</h4><p>多分类（结果锁定在多个中的一个）</p><ul><li><p>举例：</p></li><li><p>（1）数字识别</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200723223947.png" alt="image-20200723223945179" /></p></li><li><p>（2）图像识别</p></li><li><p>（3）判断发放给客户信用卡的风险评级</p></li><li><p>（4）很多复杂的问题，也可以转换成多分类问题</p></li></ul><p><strong>有很多看似不是分类的任务可以转换为分类任务</strong>，例如，利用机器学习玩 2048 游戏，将玩游戏转换为在当前状态下是进行上移、下移、左移还是右移。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200723224445.png" alt="image-20200723224444202" /></p><p>又比如利用机器学习玩围棋，自动驾驶等等童谣可以转换成分类任务来。</p><p>!&gt; 注意点：</p><ul><li>一些算法只支持完成二分类的任务</li><li>但是多分类的任务可以转换为二分类的任务</li><li>而有一些算法天然可以完成多分类任务</li></ul><p>分类任务除了可以进行二分类任务和多分类任务之外，还可以进行<code>多标签分类任务</code>：</p><h4 id="3-多标签分类任务"><a class="markdownIt-Anchor" href="#3-多标签分类任务"></a> ③ 多标签分类任务</h4><p>多标签分类任务，可以识别同一个画面中的多个物体。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200723225231.png" alt="image-20200723225230105" /></p><h3 id="222-回归任务"><a class="markdownIt-Anchor" href="#222-回归任务"></a> 2.2.2 回归任务</h3><p>回归任务的特点：结果是一个连续数字的值，而非一个类别</p><p>举例：</p><ul><li><p>房屋价格：预测房价</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200723225934.png" alt="image-20200723225933099" /></p></li><li><p>市场分析</p></li><li><p>学生成绩</p></li><li><p>股票价格</p></li></ul><blockquote><p>对于回归任务来说：</p></blockquote><ul><li>有些算法只能够解决回归问题；</li><li>有一些算法只能够解决分类问题；</li><li>有一些算法的思路既能够解决回归问题，又能解决分类问题。</li></ul><p>!&gt; 一些情况下，回归任务可以简化成分类任务。比如，预测学生成绩，我们可能并不需要预测学生的具体成绩而只需要预测学生分数的评级是 A、B、C 还是 D 就足够了，那么此时就是一个分类任务。</p><blockquote><p>总结：</p></blockquote><p>机器学习，就是将大量的学习资料喂给机器学习算法后机器学习算法将训练出一个模型，将输入样例输入到模型中得到输出结果，如果模型是输出一个具体的类别，那么我们解决的就是一个分类问题，如果模型输出的是一个具体的数值，那么我们解决的就是一个回归问题。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200723230857.png" alt="image-20200723230855749" /></p><h2 id="23-机器学习算法的分类"><a class="markdownIt-Anchor" href="#23-机器学习算法的分类"></a> 2.3 机器学习算法的分类</h2><p>机器学习算法可以分为：</p><ul><li>监督学习</li><li>非监督学习</li><li>半监督学习</li><li>增强学习</li></ul><h3 id="231-监督学习"><a class="markdownIt-Anchor" href="#231-监督学习"></a> 2.3.1 监督学习</h3><p>监督学习：给机器的训练数据拥有“标记”或者“答案”。例如：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200724104411.png" alt="image-20200724104401180" /></p><p>我们需要告诉机器左边的画面是一只狗，而右边的照片是一只猫。同理对于 MNIST 数据集，给机器图像信息后还应该附上<code>标记信息</code>，如图所示：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200724105630.png" alt="image-20200724105628360" /></p><p>运用监督学习的场景举例：</p><ul><li>图像已经拥有了标定信息</li><li>银行已经积累了一定的客户信息和他们信用卡的信用信息</li><li>医院已经积累了一定的病人信息和他们最终确诊是否患病的情况</li><li>市场积累了房屋的基本信息和最终成交的金额</li><li>…</li></ul><p>监督学习一般处理两大任务：分类和回归。</p><blockquote><p>此课程中学习的大部分算法，属于监督学习算法：</p></blockquote><ul><li>K 近邻</li><li>线性回归和多项式回归</li><li>逻辑回归</li><li>SVM</li><li>决策树和随机森林</li></ul><p>!&gt; 注意：很多非监督学习的核心就是辅助监督学习的。</p><h3 id="232-非监督学习"><a class="markdownIt-Anchor" href="#232-非监督学习"></a> 2.3.2 非监督学习</h3><p>非监督学习：给机器训练数据没有任何“标记”或者“答案”。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200724111353.png" alt="image-20200724111352052" /></p><h4 id="1-聚类分析"><a class="markdownIt-Anchor" href="#1-聚类分析"></a> ① 聚类分析</h4><p><strong>聚类分析</strong>：对没有“标记”的数据进行分类</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200724111823.png" alt="image-20200724111821149" /></p><h4 id="2-降维处理"><a class="markdownIt-Anchor" href="#2-降维处理"></a> ② 降维处理</h4><p>非监督学习一个非常重要的作用就是对数据进行降维处理。</p><ul><li>特征提取：信用卡的信用评级和人的胖瘦无关？无关的特征丢掉（根据经验或者分析）</li><li>特征压缩：PCA</li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200724112309.png" alt="image-20200724112308056" /></p><p>降维处理的意义：<strong>方便可视化</strong></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200724112548.png" alt="image-20200724112546860" /></p><h4 id="3-异常检测"><a class="markdownIt-Anchor" href="#3-异常检测"></a> ③ 异常检测</h4><p>非监督学习除了可以进行降维处理，还可以进行异常检测。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200724112755.png" alt="image-20200724112754489" /></p><p>如图所示：图中两个红点明显与其他点脱离，如果它们同属于一种数据，我们可以将这两个点归类为<code>异常</code>，将其去除。当然图中为二维点，在高维中我们会使用相应的算法剔除异常数据。</p><h3 id="233-半监督学习"><a class="markdownIt-Anchor" href="#233-半监督学习"></a> 2.3.3 半监督学习</h3><p>半监督学习：一部分数据有“标记”或者“答案”，另一部分没有</p><p>相对于监督学习，更常见的是各种原因产生的标记缺失的半监督学习。</p><p>通常都先使用无监督学习手段对数据做处理，之后使用监督学习手段作模型的训练和预测。</p><h3 id="234-增强学习"><a class="markdownIt-Anchor" href="#234-增强学习"></a> 2.3.4 增强学习</h3><p><strong>增强学习</strong>：根据周围环境的情况，采取行动，根据采取行动的结果，学习行动方式。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200724171950.png" alt="image-20200724171949064" /></p><p><strong>增强学习</strong>非常适合无人驾驶、机器人任务，阿尔法狗就是增强学习的一个典型应用。</p><p>!&gt; 如果想做增强学习方面的任务，监督学习和半监督学习是基础。</p><h2 id="24-机器学习的其他分类"><a class="markdownIt-Anchor" href="#24-机器学习的其他分类"></a> 2.4 机器学习的其他分类</h2><h3 id="241-在线学习和批量学习离线学习"><a class="markdownIt-Anchor" href="#241-在线学习和批量学习离线学习"></a> 2.4.1 在线学习和批量学习（离线学习）</h3><ul><li>批量学习（Batch Learning）</li><li>在线学习（Online Learning）</li></ul><h4 id="1-批量学习"><a class="markdownIt-Anchor" href="#1-批量学习"></a> ① 批量学习</h4><p>批量学习，也叫做“离线学习”。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200724174235.png" alt="image-20200724174233718" /></p><ul><li><strong>优点</strong>：简单</li><li><strong>问题</strong>：如何适应环境变化？</li><li>解决方案：定时重新批量学习</li><li>缺点：<ul><li>（1）每次重新批量学习，运算量巨大；</li><li>（2）在某些环境变化非常快的情况下，甚至不可能的。</li></ul></li></ul><h4 id="2-在线学习"><a class="markdownIt-Anchor" href="#2-在线学习"></a> ② 在线学习</h4><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200724174313.png" alt="image-20200724174312526" /></p><ul><li>优点：及时反映新的环境变化</li><li>问题：新的数据带来不好的变化？</li><li>解决方案：需要加强对数据进行监控</li><li>其他：也适用于数据量巨大，完全无法批量学习的环境。</li></ul><h3 id="242-参数学习和非参数学习"><a class="markdownIt-Anchor" href="#242-参数学习和非参数学习"></a> 2.4.2 参数学习和非参数学习</h3><h4 id="1-参数学习"><a class="markdownIt-Anchor" href="#1-参数学习"></a> ① 参数学习</h4><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200724175138.png" alt="image-20200724175137611" /></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>a</mi><mo>∗</mo><mi>x</mi><mo>+</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">f(x) = a * x + b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span> 这里，a 和 b 就是参数。</p><p>参数学习的特点：一旦学到了参数，就不再需要原有的数据集。</p><h4 id="2-非参数学习"><a class="markdownIt-Anchor" href="#2-非参数学习"></a> ② 非参数学习</h4><p>非参数学习：不对模型进行过多的统计假设</p><p>注意：非参数学习并不等于没有参数！</p><h2 id="25-哲学思考"><a class="markdownIt-Anchor" href="#25-哲学思考"></a> 2.5 “哲学”思考</h2><p>2001 年，微软的论文中有个图，好好理解一下：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200724180217.png" alt="image-20200724180215974" /></p><blockquote><p>🎨 提问：数据即算法？</p></blockquote><ul><li>数据确实非常重要</li><li>数据驱动，高度依赖数据本身的质量</li></ul><p>所以要进行：</p><ul><li>收集更多的数据</li><li>提高数据质量</li><li>提高数据的代表性</li><li>研究更重要的特征，即特征工程</li></ul><blockquote><p>提问：算法为王？</p></blockquote><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200725094250.png" alt="image-20200725094249508" /></p><p>当没有数据的时候，算法也可以为我们生成数据。</p><blockquote><p>提问：如何选择机器学习算法？</p></blockquote><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200725101612.png" alt="image-20200725101611832" /></p><p>选择机器学习算法，根据<strong>奥卡姆的剃刀</strong>原则：简单的就是好的！</p><p>但是在机器学习领域，到底什么叫“简单”？机器学习处理的是不确定的世界中的真实的问题，对于很多问题来说并没有标准答案。</p><p><strong>没有免费的午餐定理</strong></p><ul><li>可以严格地数学推导出：任意两个算法，他们的期望性能是相同的！</li><li>具体到某个特定问题，有些算法可能更好。</li><li>但没有一种算法是绝对比另一种算法好的。</li><li>告诉我们：<ul><li>（1）脱离具体问题，谈哪个算法好，是没有意义的。</li><li>（2）在面对一个具体问题的时候，尝试使用多种算法进行对比试验，是必要的。</li></ul></li></ul><h2 id="26-课程环境搭建"><a class="markdownIt-Anchor" href="#26-课程环境搭建"></a> 2.6 课程环境搭建</h2><p>使用集成工具 Anaconda：<a href="Python/Anaconda/Anaconda%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97">Anaconda 安装指南</a></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200727142147.png" alt="image-20200727142145422" /></p><p>主要用到里面集成的 Jupyter Notebook！</p><ul><li>矩阵的处理使用包：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy</span><br></pre></td></tr></table></figure><ul><li>可视化包：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib</span><br></pre></td></tr></table></figure><ul><li>机器学习具体函数包：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sklearn</span><br></pre></td></tr></table></figure><ul><li>提供更高级的数据表格管理包：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas</span><br></pre></td></tr></table></figure><ul><li>综合一下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="keyword">import</span> sklearn</span><br><span class="line"><span class="keyword">import</span> pandas</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Hello, Machine Learning"</span>)</span><br></pre></td></tr></table></figure><p>下一章进行实战，走起 ~~</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能/机器学习/机器学习课程-胡浩基/CH0-参考资料</title>
      <link href="/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B-%E8%83%A1%E6%B5%A9%E5%9F%BA/CH0-%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/"/>
      <url>/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B-%E8%83%A1%E6%B5%A9%E5%9F%BA/CH0-%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/</url>
      
        <content type="html"><![CDATA[<h1 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h1><ul><li><a href="https://www.icourse163.org/u/mooc37925478665678513" target="_blank" rel="noopener">第一遍：跟着胡浩基老师学机器学习</a> &gt;&gt; 2020 年 6 月 21 日 -</li><li><a href="https://www.bilibili.com/video/BV1dJ411B7gh" target="_blank" rel="noopener">第二遍：跟着胡浩基老师学机器学习</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能/机器学习/Python3玩转机器学习/CH3-Jupyter-Notebook和数据处理包的简单使用</title>
      <link href="/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Python3%E7%8E%A9%E8%BD%AC%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/CH3-Jupyter-Notebook%E5%92%8C%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%8C%85%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Python3%E7%8E%A9%E8%BD%AC%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/CH3-Jupyter-Notebook%E5%92%8C%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%8C%85%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="第-3-章-jupyter-notebook-和数据处理包的简单使用"><a class="markdownIt-Anchor" href="#第-3-章-jupyter-notebook-和数据处理包的简单使用"></a> 第 3 章 Jupyter Notebook 和数据处理包的简单使用</h1><h2 id="31-jupyter-notebook-的使用"><a class="markdownIt-Anchor" href="#31-jupyter-notebook-的使用"></a> 3.1 Jupyter Notebook 的使用</h2><h3 id="311-基础"><a class="markdownIt-Anchor" href="#311-基础"></a> 3.1.1 基础</h3><blockquote><p>使用指南：<a href="Python/Jupyter-notebook%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97">Jupyter Notebook 使用指南</a></p></blockquote><p>下面写点指南里木有的，或者说还挺重要的对于机器学习而言：</p><h3 id="312-高级之魔法命令"><a class="markdownIt-Anchor" href="#312-高级之魔法命令"></a> 3.1.2 高级之魔法命令</h3><p>查看所有魔法命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%lsmagic</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200727232659.png" alt="image-20200727232658738" /></p><p>看魔法命令文档方式如下：<code>%命令？</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%run?</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200727232841.png" alt="image-20200727232840768" /></p><h4 id="1-run-加载单一脚本"><a class="markdownIt-Anchor" href="#1-run-加载单一脚本"></a> ① %run 加载单一脚本</h4><p>将下面代码写入 py 文件 <a href="http://hello.py" target="_blank" rel="noopener">hello.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">"Hello"</span>, name, <span class="string">"!"</span>)</span><br><span class="line"></span><br><span class="line">hello(<span class="string">"Machine Learning"</span>)</span><br></pre></td></tr></table></figure><p>然后使用相对地址调用它，便很容易得到结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%run ./hello.py</span><br></pre></td></tr></table></figure><p>!&gt; 当然，直接将代码运行也可以，下面给出两种运行方式的调试结果：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200727224808.png" alt="image-20200727224806939" /></p><blockquote><p>注意：后续学习的过程中肯定会有很多机器学习的算法，我们有可能会将这些算法打成一个包，做成一个模块，如何加载进一个模块呢？</p></blockquote><h4 id="2-加载模块"><a class="markdownIt-Anchor" href="#2-加载模块"></a> ② 加载模块</h4><ul><li><p>在文件夹下，生成 <code>__init__.py</code> 空文件，这是最快将文件夹变成模块的方式</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200727225651.png" alt="image-20200727225650445" /></p></li></ul><blockquote><p>如何调用呢？</p></blockquote><ul><li>方式一：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mymodule.hello</span><br><span class="line"></span><br><span class="line">mymodule.hello.hello(<span class="string">"wugenqiang"</span>)</span><br></pre></td></tr></table></figure><p>调试结果：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200727225950.png" alt="image-20200727225949608" /></p><ul><li>方式二：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mymodule <span class="keyword">import</span> hello</span><br><span class="line"></span><br><span class="line">hello.hello(<span class="string">"wugenqiang"</span>)</span><br></pre></td></tr></table></figure><p>调试结果：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200727230406.png" alt="image-20200727230404801" /></p><h4 id="3-timeit"><a class="markdownIt-Anchor" href="#3-timeit"></a> ③ %timeit</h4><blockquote><p>这是用来帮助我们测试代码的性能的</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%timeit L = [i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>)]</span><br></pre></td></tr></table></figure><p>调试结果：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200727230926.png" alt="image-20200727230924998" /></p><p>如果测试一段程序的运行效率，使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%%timeit</span><br><span class="line">L = []</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    L.append(n ** <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>%% 称为区域命令符</p><p>调试结果：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200727231423.png" alt="image-20200727231421891" /></p><h4 id="4-time"><a class="markdownIt-Anchor" href="#4-time"></a> ④ %time</h4><p>当我们不希望系统自动帮我们执行多次，只想执行一次，这个时候使用 <code>%time</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%time L = [i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>)]</span><br></pre></td></tr></table></figure><p>调试结果：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200727231856.png" alt="image-20200727231855202" /></p><h2 id="32-numpy-的使用"><a class="markdownIt-Anchor" href="#32-numpy-的使用"></a> 3.2 Numpy 的使用</h2><ul><li><p>（1）加载 numpy</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy</span><br></pre></td></tr></table></figure></li><li><p>（2）查看 numpy 版本号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.__version__</span><br></pre></td></tr></table></figure></li><li><p>（3）给 numpy 起别名，比如 np，接下来就可以使用 np 代替 numpy 进行使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200729110856.png" alt="image-20200729110855394" /></p></li></ul><h3 id="321-创建-numpy-数组和矩阵的方法"><a class="markdownIt-Anchor" href="#321-创建-numpy-数组和矩阵的方法"></a> 3.2.1 创建 numpy 数组和矩阵的方法</h3><blockquote><p>回顾一下 list 的使用：</p></blockquote><p>举例：</p><ul><li><p>（1）使用生成表达式创建一个 0 - 9 的列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">L = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">L</span><br></pre></td></tr></table></figure></li><li><p>（2）访问其中某一个元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L[<span class="number">5</span>]</span><br></pre></td></tr></table></figure></li><li><p>（3）给其中某一个元素赋值，list 对元素类型没有限制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">L[<span class="number">5</span>] = <span class="number">100</span></span><br><span class="line">L</span><br></pre></td></tr></table></figure><p>也可以赋值这样的字符串类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">L[<span class="number">5</span>] = <span class="string">"Machine Learning"</span></span><br><span class="line">L</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200729112329.png" alt="image-20200729112328248" /></p></li></ul><blockquote><p>那如果限定，只能存储一种数据类型呢，咋办呢？使用 array 数组！</p></blockquote><ul><li><p>（1）加载 array 模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> array</span><br></pre></td></tr></table></figure></li><li><p>（2）创建 arr 变量，进行初始化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr = array.array(<span class="string">'i'</span>, [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)])</span><br><span class="line">arr</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200729112735.png" alt="image-20200729112733995" /></p><p>说明：array.array(数据类型, 数据)</p></li><li><p>（3）获取元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr[<span class="number">5</span>]</span><br></pre></td></tr></table></figure></li><li><p>(4）赋值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr[<span class="number">5</span>] = <span class="number">100</span></span><br><span class="line">arr</span><br></pre></td></tr></table></figure><p>此时，就不能再赋其他类型的值了：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200731080053.png" alt="image-20200731080052641" /></p></li></ul><h4 id="1-array"><a class="markdownIt-Anchor" href="#1-array"></a> ① array</h4><blockquote><p>进入到 numpy.array</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">nparr = np.array([i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)])</span><br><span class="line">nparr</span><br></pre></td></tr></table></figure><p>查看元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nparr[<span class="number">5</span>]</span><br></pre></td></tr></table></figure><p>赋值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nparr[<span class="number">5</span>] = <span class="number">100</span></span><br><span class="line">nparr</span><br></pre></td></tr></table></figure><p>赋值的如果是浮点型，自动进行隐形转换，截位，留下整数类型</p><blockquote><p>特有功能</p></blockquote><ul><li><p>查看数据类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nparr.dtype</span><br></pre></td></tr></table></figure></li><li><p>创建浮点型数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nparr2 = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3.0</span>])</span><br><span class="line">nparr2.dtype</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200731094922.png" alt="image-20200731094921365" /></p></li></ul><h4 id="2-zeros"><a class="markdownIt-Anchor" href="#2-zeros"></a> ② zeros</h4><ul><li><p>创建 0 数组或者 0 矩阵：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.zeros(<span class="number">10</span>) <span class="comment"># array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])</span></span><br></pre></td></tr></table></figure></li><li><p>数组类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.zeros(<span class="number">10</span>).dtype <span class="comment"># dtype('float64')</span></span><br></pre></td></tr></table></figure></li><li><p>创建 10 个整数 0：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.zeros(<span class="number">10</span>, dtype = int) <span class="comment"># array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])</span></span><br></pre></td></tr></table></figure></li><li><p>传入二维元组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.zeros((<span class="number">3</span>, <span class="number">5</span>))</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200731110044.png" alt="image-20200731110040719" /></p></li><li><p>传入二维元组（定义数据类型 int）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.zeros(shape = (<span class="number">3</span>, <span class="number">5</span>), dtype = int)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200731110220.png" alt="image-20200731110219401" /></p></li></ul><h4 id="3-ones"><a class="markdownIt-Anchor" href="#3-ones"></a> ③ ones</h4><ul><li><p>获得全 1 的向量或者矩阵：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.ones(<span class="number">10</span>) <span class="comment"># array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])</span></span><br></pre></td></tr></table></figure></li><li><p>传入全 1 元组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.ones((<span class="number">3</span>, <span class="number">5</span>))</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200731110535.png" alt="image-20200731110533661" /></p></li></ul><h4 id="4-full"><a class="markdownIt-Anchor" href="#4-full"></a> ④ full</h4><ul><li><p>传入指定值的矩阵：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.full((<span class="number">3</span>, <span class="number">5</span>), <span class="number">666</span>)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200731111406.png" alt="image-20200731111405991" /></p><p>加上参数名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.full(shape = (<span class="number">3</span>, <span class="number">5</span>), fill_value = <span class="number">666</span>)</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.full(fill_value = <span class="number">666</span>, shape = (<span class="number">3</span>, <span class="number">5</span>))</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-arange"><a class="markdownIt-Anchor" href="#5-arange"></a> ⑤ arange</h4><ul><li><p>生成 0 - 19 步长为 2 的数组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">20</span>, <span class="number">2</span>)] <span class="comment"># [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]</span></span><br></pre></td></tr></table></figure></li><li><p>使用 arange</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.arange(<span class="number">0</span>, <span class="number">20</span>, <span class="number">2</span>) <span class="comment"># array([ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18])</span></span><br></pre></td></tr></table></figure></li></ul><p>!&gt; 注意：range 不可以传入浮点数，但是 arange 可以：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.arange(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0.2</span>)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200801083547.png" alt="image-20200801083538958" /></p><ul><li><p>不填写步长的时候，默认值为 1。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.arange(<span class="number">0</span>, <span class="number">10</span>) <span class="comment"># array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</span></span><br></pre></td></tr></table></figure></li><li><p>省略起始点：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.arange(<span class="number">10</span>) <span class="comment"># array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="6-linspace"><a class="markdownIt-Anchor" href="#6-linspace"></a> ⑥ linspace</h4><ul><li><p>在 0 - 20 （包括 0 和 20）之间均匀截出 10 个点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.linspace(<span class="number">0</span>, <span class="number">20</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200801100139.png" alt="image-20200801100135286" /></p></li><li><p>0 - 20 以 2 为步长：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.linspace(<span class="number">0</span>, <span class="number">20</span>, <span class="number">11</span>) <span class="comment"># array([ 0.,  2.,  4.,  6.,  8., 10., 12., 14., 16., 18., 20.])</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="7-random"><a class="markdownIt-Anchor" href="#7-random"></a> ⑦ random</h4><p>随机数</p><ul><li><p>生成 0 - 10 之间的随机数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.randint(<span class="number">0</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure></li><li><p>生成 10 个 0 - 10 之间的随机数，取不到 10</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.randint(<span class="number">0</span>, <span class="number">10</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>使用的时候最好标识名称：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.randint(<span class="number">4</span>, <span class="number">8</span>, size = <span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>size 可以取值元组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.randint(<span class="number">4</span>, <span class="number">8</span>, size = (<span class="number">3</span>, <span class="number">5</span>))</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200801115313.png" alt="image-20200801115312089" /></p></li><li><p>使用随机种子保存随机数，使得其可复制，可重复：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.seed(<span class="number">666</span>)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200801115945.png" alt="image-20200801115944772" /></p></li><li><p>生成随机的浮点数，默认生成的是 0 - 1 之间的随机数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.random()</span><br></pre></td></tr></table></figure></li><li><p>生成 10 个随机浮点数，只需加参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.random(<span class="number">10</span>)</span><br></pre></td></tr></table></figure></li><li><p>生成 3 行 5 列的随机浮点数矩阵：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.random((<span class="number">3</span>, <span class="number">5</span>))</span><br></pre></td></tr></table></figure></li><li><p>希望生成符合正态分布的浮点数，均值为 0，方差为 1 的随机浮点数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.normal()</span><br></pre></td></tr></table></figure><p>传入参数，指定均值 10，方差 100：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.normal(<span class="number">10</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure></li><li><p>生成符合正态分布的浮点数，均值为 0，方差为 1 的随机浮点数，3 行 5 列：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.normal(<span class="number">0</span>, <span class="number">1</span>, (<span class="number">3</span>, <span class="number">5</span>))</span><br></pre></td></tr></table></figure></li></ul><h3 id="322-numpy-文档查询方法"><a class="markdownIt-Anchor" href="#322-numpy-文档查询方法"></a> 3.2.2 numpy 文档查询方法</h3><p>举例：</p><ul><li><p>查 random.normal 具体函数</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.normal?</span><br></pre></td></tr></table></figure></li><li><p>查 random 具体模块</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random?</span><br></pre></td></tr></table></figure></li><li><p>或者使用 help 进行查看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">help(np.random)</span><br></pre></td></tr></table></figure></li></ul><p>通过学习文档的方式，了解函数是如何使用的！🎫</p><h3 id="323-numpyarray-的基本操作"><a class="markdownIt-Anchor" href="#323-numpyarray-的基本操作"></a> 3.2.3 Numpy.array 的基本操作</h3><ul><li><p>引入 numpy</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure></li><li><p>首先创建一维数组，0 - 9 步长为 1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">10</span>)</span><br><span class="line">x</span><br></pre></td></tr></table></figure></li><li><p>生成二维数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X = np.arange(<span class="number">15</span>).reshape(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">X</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200801134609.png" alt="image-20200801134608467" /></p></li></ul><h4 id="1-基本属性"><a class="markdownIt-Anchor" href="#1-基本属性"></a> ① 基本属性</h4><ul><li><p>查看数组是几维数组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x.ndim <span class="comment"># 1 </span></span><br><span class="line">X.ndim <span class="comment"># 2</span></span><br></pre></td></tr></table></figure></li><li><p>返回元组使用 shape：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x.shape <span class="comment"># (10,)</span></span><br><span class="line">X.shape <span class="comment"># (3, 5)</span></span><br></pre></td></tr></table></figure></li><li><p>size： 表示元素个数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.size <span class="comment"># 10</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="2-数据访问"><a class="markdownIt-Anchor" href="#2-数据访问"></a> ② 数据访问</h4><ul><li><p>查看元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x <span class="comment"># array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</span></span><br></pre></td></tr></table></figure></li><li><p>访问某个元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x[<span class="number">0</span>] <span class="comment"># 0</span></span><br><span class="line">x[<span class="number">-1</span>] <span class="comment"># 9</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>查看二维以上矩阵中元素：（访问多维数组元素）</p></blockquote><ul><li><p>访问具体元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X[(<span class="number">0</span>, <span class="number">0</span>)] <span class="comment"># 0</span></span><br></pre></td></tr></table></figure><p>简化成这样来写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X[<span class="number">0</span>, <span class="number">0</span>] <span class="comment"># 0</span></span><br></pre></td></tr></table></figure></li></ul><p>下面继续来进行数据访问操作：</p><ul><li><p>访问 0 - 4 元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x[<span class="number">0</span>:<span class="number">5</span>] <span class="comment"># array([0, 1, 2, 3, 4])</span></span><br></pre></td></tr></table></figure></li><li><p>从头访问至第 5 个元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x[:<span class="number">5</span>] <span class="comment"># array([0, 1, 2, 3, 4])</span></span><br></pre></td></tr></table></figure></li><li><p>从第 6 个元素开始到最后：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x[<span class="number">5</span>:] <span class="comment"># array([5, 6, 7, 8, 9])</span></span><br></pre></td></tr></table></figure></li><li><p>从头访问到尾，步长为 2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x[::<span class="number">2</span>] <span class="comment"># array([0, 2, 4, 6, 8])</span></span><br></pre></td></tr></table></figure></li><li><p>前两行，前三列：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X[:<span class="number">2</span>, :<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200802134449.png" alt="image-20200802134448581" /></p></li><li><p>取前两行，列步长为 2 取值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X[:<span class="number">2</span>, ::<span class="number">2</span>]</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200802135644.png" alt="image-20200802135643584" /></p></li><li><p>矩阵反转：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X[::<span class="number">-1</span>, ::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200802141523.png" alt="image-20200802141522171" /></p></li><li><p>取某一行</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200802142047.png" alt="image-20200802142045784" /></p></li><li><p>取某一列：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X[:, <span class="number">0</span>]</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200802142817.png" alt="image-20200802142816004" /></p></li></ul><p>👒 注意：修改子矩阵中的元素，会影响原矩阵的值。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200802144038.png" alt="image-20200802144037921" /></p><p>那么就想问一句，修改子矩阵中的元素，不影响原矩阵的值，怎么办呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">subX = X[:<span class="number">2</span>, :<span class="number">3</span>].copy()</span><br><span class="line">subX</span><br></pre></td></tr></table></figure><p>就可以了。</p><blockquote><p>Reshape</p></blockquote><p>改变矩阵的维度</p><ul><li><p>返回元组使用 shape：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.shape <span class="comment"># (10, )</span></span><br></pre></td></tr></table></figure></li><li><p>查看维度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.ndim <span class="comment"># 1</span></span><br></pre></td></tr></table></figure></li><li><p>变成 2 × 5 的矩阵：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.reshape(<span class="number">2</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200802150248.png" alt="image-20200802150247287" /></p></li><li><p>存储这种改变，需要赋值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A = x.reshape(<span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line">A</span><br></pre></td></tr></table></figure></li><li><p>一维向量可以通过 1 × 10 的方式，修改成二维矩阵</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200802151253.png" alt="image-20200802151250438" /></p></li><li><p>得到 10 行矩阵</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.reshape(<span class="number">10</span>, <span class="number">-1</span>)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200802152220.png" alt="image-20200802152219672" /></p></li><li><p>得到 10 列矩阵</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.reshape(<span class="number">-1</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200802171550.png" alt="image-20200802171549862" /></p></li></ul><h3 id="324-合并和分割"><a class="markdownIt-Anchor" href="#324-合并和分割"></a> 3.2.4 合并和分割</h3><h4 id="1-合并"><a class="markdownIt-Anchor" href="#1-合并"></a> ① 合并</h4><p>已知图中：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200802173611.png" alt="image-20200802173609006" /></p><p>将 x, y 合并，获得 1 × 6 的向量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.concatenate([x, y]) <span class="comment"># array([1, 2, 3, 3, 2, 1])</span></span><br></pre></td></tr></table></figure><p>当然也可以 3 个向量拼接：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200802173935.png" alt="image-20200802173933635" /></p><p>尝试一下基于 2 维矩阵的拼接：（axis 默认值为 0，沿着第一维度的方向进行拼接）</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200802174224.png" alt="image-20200802174222857" /></p><p>沿着列的方向进行拼接：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.concatenate([A, A], axis = <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200802174642.png" alt="image-20200802174640705" /></p><p>axis 为轴， 0 为 x 轴，1 为 y 轴。</p><p>注意：concatenate 只能处理维度一样的矩阵</p><p>除非 reshape(1, -1) 将一维向量变成二维矩阵</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200802175157.png" alt="image-20200802175156153" /></p><p>使用 vstack 替换 concatenate，自动判断维数并进行容错处理：（在列的方向进行拼接堆叠）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.vstack([A, z])</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images/01/20200814090112.png" alt="image-20200814090111612" /></p><p>创建一个 2 × 2 的矩阵，全赋值为 100</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">B = np.full((<span class="number">2</span>, <span class="number">2</span>), <span class="number">100</span>)</span><br><span class="line">B</span><br></pre></td></tr></table></figure><p>将 A 和 B 在水平方向堆叠在一起</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.hstack([A, B])</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images/01/20200814090658.png" alt="image-20200814090657883" /></p><h4 id="2-分割"><a class="markdownIt-Anchor" href="#2-分割"></a> ② 分割</h4><ul><li><p>创建一维数组 10 个元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">10</span>)</span><br><span class="line">x <span class="comment"># array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</span></span><br></pre></td></tr></table></figure></li><li><p>对 x 分割，指定两个分割点 3 和 7，分割三处</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x1, x2, x3 = np.split(x, [<span class="number">3</span>, <span class="number">7</span>])</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images/01/20200814091148.png" alt="image-20200814091147578" /></p></li><li><p>对整个数据切割成 2 段，比如说 5 作为分割点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x1, x2 = np.split(x, [<span class="number">5</span>])</span><br></pre></td></tr></table></figure></li><li><p>创建一个 4 × 4 的矩阵</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A = np.arange(<span class="number">16</span>).reshape((<span class="number">4</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure></li><li><p>将 A 分割成 2 部分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A1, A2 = np.split(A, [<span class="number">2</span>])</span><br></pre></td></tr></table></figure></li><li><p>矩阵在列上分割：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A1, A2 = np.split(A, [<span class="number">2</span>], axis = <span class="number">1</span>)</span><br></pre></td></tr></table></figure></li><li><p>垂直方向进行分割成 2 部分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upper, lower = np.vsplit(A, [<span class="number">2</span>])</span><br></pre></td></tr></table></figure></li><li><p>水平方向进行分割成 2 部分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">left, right = np.hsplit(A, [<span class="number">2</span>])</span><br></pre></td></tr></table></figure></li></ul><p>🎨🎉 机器学习中使用数据分割：特征和标签</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X, y = np.hsplit(data, [<span class="number">-1</span>])</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images/01/20200814095941.png" alt="image-20200814095940125" /></p><p>我们希望 y 是向量，采用下面方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y[:, <span class="number">0</span>] <span class="comment"># array([ 3,  7, 11, 15])</span></span><br></pre></td></tr></table></figure><h3 id="325-numpyarray-中的运算"><a class="markdownIt-Anchor" href="#325-numpyarray-中的运算"></a> 3.2.5 numpy.array 中的运算</h3><p>给定一个向量，让向量中每一个数乘以 2，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = (<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">a * <span class="number">2</span> = (<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>运算如下：</p><ul><li><p>（1）获取数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">10</span></span><br><span class="line">L = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">L <span class="comment"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure></li><li><p>（2）数据处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A = []</span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> L:</span><br><span class="line">    A.append(<span class="number">2</span>*e)</span><br><span class="line">A <span class="comment"># [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]</span></span><br></pre></td></tr></table></figure><p>测试效率使用 <code>%%time</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line">A = []</span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> L:</span><br><span class="line">    A.append(<span class="number">2</span>*e)</span><br><span class="line">A <span class="comment"># [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]</span></span><br></pre></td></tr></table></figure><p>如果数据量偏大，比如 n 取 1000000，将会提示：Wall time: 374 ms</p><p>使用<strong>生成表达式</strong>看看：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line">A = [<span class="number">2</span> * e <span class="keyword">for</span> e <span class="keyword">in</span> L]</span><br></pre></td></tr></table></figure><p>在 n 取 1000000 的情况下，Wall time: 201 ms，显然效率比 for 表达式高。</p></li></ul><p>🎎 使用 numpy.array</p><ul><li><p>使用 arange 生成数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">L = np.arange(n)</span><br></pre></td></tr></table></figure></li><li><p>使用 array 处理数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A = np.array(<span class="number">2</span> * e <span class="keyword">for</span> e <span class="keyword">in</span> L)</span><br></pre></td></tr></table></figure><p>使用 numpy 会大大提升处理数据的效率。</p><p>同时 numpy 支持这样写实现 2 倍，效率比生成表达式还要快。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A = <span class="number">2</span> * L</span><br></pre></td></tr></table></figure></li></ul><p>!&gt; 在 numpy 中将数组看成向量或者矩阵进行运算叫做 “Universal Functions”，近乎支持所有的运算符相应的运算。</p><ul><li><p>（1）支持加法、减法、乘法、除法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X = np.arange(<span class="number">1</span>, <span class="number">16</span>).reshape((<span class="number">3</span>, <span class="number">5</span>))</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images/01/20200814172625.png" alt="运算" /></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能/机器学习/Python3玩转机器学习/CH1-欢迎来到Python3玩转机器学习</title>
      <link href="/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Python3%E7%8E%A9%E8%BD%AC%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/CH1-%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0Python3%E7%8E%A9%E8%BD%AC%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Python3%E7%8E%A9%E8%BD%AC%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/CH1-%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0Python3%E7%8E%A9%E8%BD%AC%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="第-1-章-欢迎来到-python3-玩转机器学习"><a class="markdownIt-Anchor" href="#第-1-章-欢迎来到-python3-玩转机器学习"></a> 第 1 章 欢迎来到 Python3 玩转机器学习</h1><h2 id="11-什么是机器学习"><a class="markdownIt-Anchor" href="#11-什么是机器学习"></a> 1.1 什么是机器学习</h2><p>通俗来说，机器学习就是让机器去学习，设计一个算法，让机器去执行。</p><p>最早的机器学习应用：<strong>垃圾邮件分辨</strong></p><blockquote><p>传统的计算机解决问题思路：</p></blockquote><ul><li><p>编写规则，定义“垃圾邮件”，让计算机执行。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200723093237.png" alt="流程图" /></p></li><li><p>对于很多问题，规则很难定义。</p></li><li><p>规则在不断变化。</p></li></ul><blockquote><p>图像识别</p></blockquote><p>如何来确认左边是狗，右边是猫呢？如何来定义什么是猫，什么是狗呢？</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200723095642.png" alt="image-20200723095640421" /></p><p>无法定义规则，所以在图像识别领域，会引入机器学习来区分他们。</p><blockquote><p>人脸识别</p></blockquote><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200723100018.png" alt="image-20200723100016908" /></p><p>使用机器学习算法来完成人脸识别的效果特别好！</p><blockquote><p>数字识别</p></blockquote><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200723100156.png" alt="image-20200723100155029" /></p><blockquote><p>人类如何学习呢？</p></blockquote><p>人类的学习过程是一种经验学习过程。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200723100714.png" alt="image-20200723100712957" /></p><blockquote><p>引入机器学习：</p></blockquote><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200723100923.png" alt="image-20200723100921699" /></p><p>将大量的学习资料喂给机器学习算法后机器学习算法将训练出一个模型，将输入样例输入到模型中得到输出结果。</p><blockquote><p>在生活中已经大量的运用了机器学习，举例：</p></blockquote><ul><li>（1）判断信用卡发放是否有风险？</li><li>（2）在使用 Google 搜索时根据你输入的部分关键字，判断你真正想搜索的内容</li><li>（3）浏览商品时，你最有可能购买的商品？</li><li>（4）你最可能喜欢的音乐，图书，文章？</li><li>（5）语音识别</li><li>（6）人脸识别</li><li>（7）金融预测</li><li>（8）医疗诊断</li><li>（9）市场分析</li></ul><p><strong>可以预见：未来将有更多领域需要运用机器学习</strong></p><ul><li>（10）无人驾驶</li><li>（11）安全领域</li><li>（12）医疗领域：辅助病情判断、抓药</li><li>（13）金融领域</li><li>（14）市场领域</li><li>（15）自然语言处理：智能翻译</li><li>（16）各种专有领域：矿产勘查，宇宙探索，药物研发，…</li></ul><h2 id="12-课程内容介绍"><a class="markdownIt-Anchor" href="#12-课程内容介绍"></a> 1.2 课程内容介绍</h2><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200723102652.png" alt="image-20200723102651545" /></p><ul><li>深入理解算法基本原理</li><li>实际使用算法解决真实场景的问题</li><li>对不同算法进行对比试验</li><li>对同一算法的不同参数进行对比试验</li><li>对部分算法进行底层编写</li></ul><p><strong>同时会介绍如何使用算法：</strong></p><ul><li>如何评价算法的好坏</li><li>如何解决过拟合和欠拟合</li><li>如何调节算法的参数</li><li>如何验证算法的正确性</li></ul><p><strong>不仅仅是调库：</strong></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200723103343.png" alt="image-20200723103341849" /></p><blockquote><p>这门课程会教会我：</p></blockquote><ul><li>（1）算法原理的学习</li><li>（2）部分算法底层的编写</li><li>（3）scikit-learn 机器学习库的使用</li></ul><h2 id="13-技术栈的使用"><a class="markdownIt-Anchor" href="#13-技术栈的使用"></a> 1.3 技术栈的使用</h2><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200723145602.png" alt="image-20200723145601550" /></p><ul><li>语言：Python 3</li><li>机器学习框架：Scikit-learn</li><li>辅助这个框架使用：numpy（处理矩阵），matplotlib（进行绘图），…</li><li>编程环境 IDE：Jupyter Notebook</li></ul><p>对于以上的技术栈，其实仅仅需要安装一个集成工具即可：<code>Anaconda</code>（已经包含上面所有），来完成系统环境的配置。（<a href="Python/Anaconda/Anaconda%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97">Anaconda 安装指南</a>）</p><blockquote><p>注：当对算法进行底层实现的时候，推荐使用 Pycharm IDE</p></blockquote><h2 id="14-课程学习的基础"><a class="markdownIt-Anchor" href="#14-课程学习的基础"></a> 1.4 课程学习的基础</h2><ul><li>语言：Python 3 基础语法</li><li>数学：（1）基本高中数学水平；（2）本科高等数学，线性代数，概率论<strong>及格水平</strong></li></ul><h2 id="15-课程所使用的数据集"><a class="markdownIt-Anchor" href="#15-课程所使用的数据集"></a> 1.5 课程所使用的数据集</h2><ul><li><p>框架：Scikit-learn</p></li><li><p>使用的数据集：内置数据集或通过 scikit-learn 可以直接下载的数据集，让算法在数据中寻找规律，执行某些智能任务。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200723152929.png" alt="image-20200723152927907" /></p></li><li><p>也会使用到 MNIST 数据集</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200723153120.png" alt="image-20200723153118826" /></p></li></ul><h2 id="16-这门课不涵盖的内容"><a class="markdownIt-Anchor" href="#16-这门课不涵盖的内容"></a> 1.6 这门课不涵盖的内容</h2><p>这门课程更专注于机器学习的算法学习，但根据使用场景的不同，机器学习从数据准备到实际应用是一个庞大繁琐的过程。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200723153520.png" alt="image-20200723153519414" /></p><ul><li>同时也不包括对真实世界的数据进行预处理的过程。</li><li>不涵盖神经网络和深度学习。</li><li>只包含经典基础的机器学习算法，不涵盖所有机器学习算法，关注于监督学习。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能/机器学习/机器学习的分类与一般思路</title>
      <link href="/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%88%86%E7%B1%BB%E4%B8%8E%E4%B8%80%E8%88%AC%E6%80%9D%E8%B7%AF/"/>
      <url>/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%88%86%E7%B1%BB%E4%B8%8E%E4%B8%80%E8%88%AC%E6%80%9D%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="机器学习的分类与一般思路"><a class="markdownIt-Anchor" href="#机器学习的分类与一般思路"></a> 机器学习的分类与一般思路</h1><h2 id="机器学习的涉及领域"><a class="markdownIt-Anchor" href="#机器学习的涉及领域"></a> 机器学习的涉及领域</h2><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200608211325.png" alt="image-20200608211324489" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200608212401.png" alt="image-20200608212400007" /></p><h2 id="机器学习的分类"><a class="markdownIt-Anchor" href="#机器学习的分类"></a> 机器学习的分类</h2><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200608212855.png" alt="image-20200608212854112" /></p><h3 id="1-监督学习"><a class="markdownIt-Anchor" href="#1-监督学习"></a> ① 监督学习</h3><p>举例：用户点击 / 购买预测、房价预测</p><ul><li>监督学习算法用途一：训练 / 学习</li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200608213531.png" alt="image-20200608213529797" /></p><ul><li>监督学习算法用途二：预测</li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200608213728.png" alt="image-20200608213726864" /></p><h3 id="2-无监督学习"><a class="markdownIt-Anchor" href="#2-无监督学习"></a> ② 无监督学习</h3><p>举例：邮件 / 新闻自动聚类</p><ul><li>无监督学习算法用途一：训练 / 学习</li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200608214141.png" alt="image-20200608214140421" /></p><ul><li>无监督学习算法用途二：预测</li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200608214313.png" alt="image-20200608214312064" /></p><h3 id="3-强化学习"><a class="markdownIt-Anchor" href="#3-强化学习"></a> ③ 强化学习</h3><p>举例：动态系统以及机器人控制</p><blockquote><p>比较监督学习算法、无监督学习算法和半监督学习算法</p></blockquote><ul><li>监督学习算法</li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200608214725.png" alt="image-20200608214724562" /></p><ul><li>无监督学习算法</li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200608214847.png" alt="image-20200608214846462" /></p><ul><li>半监督学习算法</li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200608215114.png" alt="image-20200608215113277" /></p><h2 id="机器学习的一般思路"><a class="markdownIt-Anchor" href="#机器学习的一般思路"></a> 机器学习的一般思路</h2><h3 id="得分函数"><a class="markdownIt-Anchor" href="#得分函数"></a> 得分函数</h3><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200608215845.png" alt="image-20200608215843731" /></p><h3 id="损失函数的最优化问题"><a class="markdownIt-Anchor" href="#损失函数的最优化问题"></a> 损失函数的最优化问题</h3><p>损失函数：得分函数的函数</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200608220131.png" alt="image-20200608220130392" /></p><h2 id="机器学习的算法"><a class="markdownIt-Anchor" href="#机器学习的算法"></a> 机器学习的算法</h2><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200608220524.png" alt="image-20200608220522685" /></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能/数学基础/高等数学-CH6-积分</title>
      <link href="/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6-CH6-%E7%A7%AF%E5%88%86/"/>
      <url>/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6-CH6-%E7%A7%AF%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h1 id="第-6-讲-积分"><a class="markdownIt-Anchor" href="#第-6-讲-积分"></a> 第 6 讲 积分</h1><h2 id="61-黎曼积分"><a class="markdownIt-Anchor" href="#61-黎曼积分"></a> 6.1 黎曼积分</h2><p>微元法：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200617100205.png" alt="image-20200617100204277" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200617101106.png" alt="image-20200617101105751" /></p><h2 id="62-微积分基本定理"><a class="markdownIt-Anchor" href="#62-微积分基本定理"></a> 6.2 微积分基本定理</h2><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200617101510.png" alt="image-20200617101509023" /></p><h2 id="63-分部积分"><a class="markdownIt-Anchor" href="#63-分部积分"></a> 6.3 分部积分</h2><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619102546.png" alt="image-20200619102536377" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619102603.png" alt="image-20200619102602746" /></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能/机器学习/如何入门机器学习</title>
      <link href="/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%A6%82%E4%BD%95%E5%85%A5%E9%97%A8%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%A6%82%E4%BD%95%E5%85%A5%E9%97%A8%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="如何入门机器学习"><a class="markdownIt-Anchor" href="#如何入门机器学习"></a> 如何入门机器学习</h1><p>这篇文章是本人入门机器学习而写，同时方便下面成员观看：</p><ul><li>在读的学生朋友</li><li>非计算机行业的读者</li><li>已经工作但想将机器学习/数据分析和自己的本职工作相结合的朋友</li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200607103038.jpg" alt="" /></p><p>对于已经身处机器学习领域的同仁帮助不大，建议有选择性的去学习对自己更有帮助的课程！</p><h2 id="1-自学机器学习的误区和陷阱"><a class="markdownIt-Anchor" href="#1-自学机器学习的误区和陷阱"></a> 1 自学机器学习的误区和陷阱</h2><h3 id="11-不要试图掌握所有的相关数学知识再开始学习"><a class="markdownIt-Anchor" href="#11-不要试图掌握所有的相关数学知识再开始学习"></a> 1.1 不要试图掌握所有的相关数学知识再开始学习</h3><p>一般来说，大部分机器学习课程/书籍都要求：</p><ul><li>线性代数：矩阵/张量乘法、求逆，奇异值分解/特征值分解，行列式，范数等</li><li>统计与概率：概率分布，独立性与贝叶斯，最大似然(MLE)和最大后验估计(MAP)等</li><li>优化：线性优化，非线性优化(凸优化/非凸优化)以及其衍生的求解方法如梯度下降、牛顿法、基因算法和模拟退火等</li><li>微积分：偏微分，链式法则，矩阵求导等</li><li>信息论、数值理论等</li></ul><p>一般人如果想要把这些知识都补全再开始机器学习往往需要很长时间，容易半途而废。而且这些知识是工具不是目的，我们的目标又不是成为运筹学大师。<strong>建议在机器学习的过程中哪里不会补哪里，这样更有目的性且耗时更低。</strong></p><h3 id="12-不要把深度学习作为入门的第一门课"><a class="markdownIt-Anchor" href="#12-不要把深度学习作为入门的第一门课"></a> 1.2 不要把深度学习作为入门的第一门课</h3><p>虽然很多人都是冲着深度学习来的，但把深度学习作为机器学习第一课不是个好主意。原因如下：</p><ul><li>深度学习的黑箱性更加明显，很容易学得囫囵吞枣</li><li>深度学习的理论/模型架构/技巧还在一直变化当中，并未尘埃落定</li><li>深度学习实验对硬件要求高，不太适合自学或者使用个人电脑进行学习</li></ul><h3 id="13-不要收集过多的资料-分辨资料的时效性"><a class="markdownIt-Anchor" href="#13-不要收集过多的资料-分辨资料的时效性"></a> 1.3 不要收集过多的资料 &amp; 分辨资料的时效性</h3><p>机器学习的发展和变化速度很快。在入门期间，<strong>建议“小而精”的选择资料，选择近期出版的且口碑良好的书籍</strong>。</p><h2 id="2-机器学习的一些前期准备"><a class="markdownIt-Anchor" href="#2-机器学习的一些前期准备"></a> 2 机器学习的一些前期准备</h2><h3 id="21-硬件选择"><a class="markdownIt-Anchor" href="#21-硬件选择"></a> 2.1 硬件选择</h3><p>可以用自己的笔记本电脑进行机器学习，大部分市面上的数据集都可以放到你的内存中运行。在入门阶段，我们很少会用到非常大的数据集，一般最大也就是MNIST，完全可以使用个人笔记本电脑进行运行。</p><h3 id="22-软件选择"><a class="markdownIt-Anchor" href="#22-软件选择"></a> 2.2 软件选择</h3><p>如果要做深度学习，Linux还是首选，因为其对很多学习模型支持比较好（主要是深度学习的Library）。但即使你使用的是Windows系统，也可以用虚拟机装Ubuntu或者Centos来进行学习。小型的深度学习模型足够了，大型的深度学习我们很少在本地/个人计算机上运行。</p><p>至于编程语言，首推Python，因为其良好的拓展支持性，主流的工具包都有Python版本。在特定情况下，选择R作为编程语言也是可以的。其他可能的语言还包括C++、Java和Matlab，但我个人不大推荐。</p><h3 id="23-语言能力"><a class="markdownIt-Anchor" href="#23-语言能力"></a> 2.3 语言能力</h3><p>学好英语，至少打下阅读和听力的基础。**虽然人工智能领域中国现在已经做得很不错，**但主流的书籍、期刊和会议，资料都是英文的。我们可以接受翻译版，但最好的方法还是自己有能力直接阅读。即使你将来不做机器学习，英文阅读能力还是会有很大的帮助。</p><h2 id="3-机器学习课程表"><a class="markdownIt-Anchor" href="#3-机器学习课程表"></a> 3 机器学习课程表</h2><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200607103341.jpg" alt="" /></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能/数学基础/高等数学-CH4-泰勒展开</title>
      <link href="/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6-CH4-%E6%B3%B0%E5%8B%92%E5%B1%95%E5%BC%80/"/>
      <url>/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6-CH4-%E6%B3%B0%E5%8B%92%E5%B1%95%E5%BC%80/</url>
      
        <content type="html"><![CDATA[<h1 id="第-4-讲-泰勒展开"><a class="markdownIt-Anchor" href="#第-4-讲-泰勒展开"></a> 第 4 讲 泰勒展开</h1><h2 id="41-泰勒展开"><a class="markdownIt-Anchor" href="#41-泰勒展开"></a> 4.1 泰勒展开</h2><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614150125.png" alt="image-20200614150124233" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200615103229.png" alt="image-20200615103157519" /></p><p>【例题】<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>e</mi><mi>x</mi></msup></mrow><annotation encoding="application/x-tex">e^x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span></span></span></span> 的展开</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200615103356.png" alt="image-20200615103355687" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200615103437.png" alt="image-20200615103436213" /></p><p>举例：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200615114231.png" alt="image-20200615114229959" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200615114604.png" alt="image-20200615114603653" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200615114914.png" alt="image-20200615114912744" /></p><h2 id="42-展开半径"><a class="markdownIt-Anchor" href="#42-展开半径"></a> 4.2 展开半径</h2><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200615113600.png" alt="image-20200615113559362" /></p><h2 id="43-欧拉公式"><a class="markdownIt-Anchor" href="#43-欧拉公式"></a> 4.3 欧拉公式</h2><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200615114353.png" alt="image-20200615114352855" /></p><h2 id="44-泰勒展开求极限"><a class="markdownIt-Anchor" href="#44-泰勒展开求极限"></a> 4.4 泰勒展开求极限</h2><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200615120611.png" alt="image-20200615120610573" /></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能/数学基础/高等数学-CH5-偏导数</title>
      <link href="/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6-CH5-%E5%81%8F%E5%AF%BC%E6%95%B0/"/>
      <url>/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6-CH5-%E5%81%8F%E5%AF%BC%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="第-5-讲-偏导数"><a class="markdownIt-Anchor" href="#第-5-讲-偏导数"></a> 第 5 讲 偏导数</h1><h2 id="51-偏导数的对称性"><a class="markdownIt-Anchor" href="#51-偏导数的对称性"></a> 5.1 偏导数的对称性</h2><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200616172009.png" alt="image-20200616172007778" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200616172034.png" alt="image-20200616172033588" /></p><p>【例题】</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200616172136.png" alt="image-20200616172135085" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200616172551.png" alt="image-20200616172550200" /></p><h2 id="52-链式法则"><a class="markdownIt-Anchor" href="#52-链式法则"></a> 5.2 链式法则</h2><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200616172811.png" alt="image-20200616172810107" /></p><h2 id="53-梯度算符"><a class="markdownIt-Anchor" href="#53-梯度算符"></a> 5.3 梯度算符</h2><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200616173015.png" alt="image-20200616173014393" /></p><h2 id="54-拉氏算符"><a class="markdownIt-Anchor" href="#54-拉氏算符"></a> 5.4 拉氏算符</h2><blockquote><p>拉普拉斯算符</p></blockquote><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200616173053.png" alt="image-20200616173052404" /></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能/数学基础/高等数学-CH3-导数</title>
      <link href="/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6-CH3-%E5%AF%BC%E6%95%B0/"/>
      <url>/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6-CH3-%E5%AF%BC%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="第-3-讲-导数"><a class="markdownIt-Anchor" href="#第-3-讲-导数"></a> 第 3 讲 导数</h1><h2 id="31-导数的定义"><a class="markdownIt-Anchor" href="#31-导数的定义"></a> 3.1 导数的定义</h2><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614135712.png" alt="image-20200614135711696" /></p><ul><li>【特殊情况说明】处处连续但是不可导</li></ul><p><strong>外尔斯特拉斯函数</strong></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614140308.png" alt="image-20200614140307186" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614140400.png" alt="image-20200614140358846" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614140425.png" alt="image-20200614140424135" /></p><p>图像如下：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614140550.png" alt="image-20200614140549074" /></p><h2 id="32-初等函数的导数"><a class="markdownIt-Anchor" href="#32-初等函数的导数"></a> 3.2 初等函数的导数</h2><p>【证明】<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>i</mi><msup><mi>n</mi><mo mathvariant="normal">′</mo></msup><mi>x</mi><mo>=</mo><mi>c</mi><mi>o</mi><mi>s</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">sin&#x27;x=cosx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">x</span></span></span></span></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614141121.png" alt="image-20200614141119879" /></p><p>【证明】<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mo stretchy="false">(</mo><msup><mi>x</mi><mi>n</mi></msup><msup><mo stretchy="false">)</mo><mo mathvariant="normal">′</mo></msup><mo>=</mo><mi>n</mi><msup><mi>x</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><mspace width="1em"/><mo stretchy="false">(</mo><mi>n</mi><mi mathvariant="normal">≠</mi><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{(x^n)&#x27;=nx^{n-1}}\quad(n\neq0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614141550.png" alt="image-20200614141548346" /></p><p>【证明】<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msup><mi>e</mi><mi>x</mi></msup><msup><mo stretchy="false">)</mo><mo mathvariant="normal">′</mo></msup><mo>=</mo><msup><mi>e</mi><mi>x</mi></msup></mrow><annotation encoding="application/x-tex">(e^x)&#x27;=e^x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span></span></span></span></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614142616.png" alt="image-20200614142615256" /></p><h2 id="33-反函数的导数"><a class="markdownIt-Anchor" href="#33-反函数的导数"></a> 3.3 反函数的导数</h2><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614142942.png" alt="image-20200614142940908" /></p><p>【例题】求 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>r</mi><mi>c</mi><mi>s</mi><mi>i</mi><msup><mi>n</mi><mo mathvariant="normal">′</mo></msup><mi>x</mi></mrow><annotation encoding="application/x-tex">arcsin&#x27;x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">c</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord mathdefault">x</span></span></span></span></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614143328.png" alt="image-20200614143327282" /></p><p>推出：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614143353.png" alt="image-20200614143351710" /></p><p>【例题】求 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>r</mi><mi>c</mi><mi>t</mi><mi>a</mi><msup><mi>n</mi><mo mathvariant="normal">′</mo></msup><mi>x</mi></mrow><annotation encoding="application/x-tex">arctan&#x27;x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord mathdefault">x</span></span></span></span></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614144009.png" alt="image-20200614144007922" /></p><p>【证明】<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><msup><mi>n</mi><mo mathvariant="normal">′</mo></msup><mi>x</mi><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mi>x</mi></mfrac></mstyle></mrow><annotation encoding="application/x-tex">ln&#x27;x=\dfrac{1}{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614144517.png" alt="image-20200614144515956" /></p><p>!&gt; 所有初等函数</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614144937.png" alt="image-20200614144936164" /></p><h2 id="34-复合函数的导数"><a class="markdownIt-Anchor" href="#34-复合函数的导数"></a> 3.4 复合函数的导数</h2><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614145206.png" alt="image-20200614145205219" /></p><p>证明：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614145356.png" alt="image-20200614145355276" /></p><p>【例题】</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614145615.png" alt="image-20200614145614388" /></p><p>【例题】</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614145753.png" alt="image-20200614145752128" /></p><h2 id="35-泰勒展开"><a class="markdownIt-Anchor" href="#35-泰勒展开"></a> 3.5 泰勒展开</h2><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614150125.png" alt="image-20200614150124233" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614150143.png" alt="image-20200614150141977" /></p><h2 id="36-罗尔定理"><a class="markdownIt-Anchor" href="#36-罗尔定理"></a> 3.6 罗尔定理</h2><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614150944.png" alt="image-20200614150943766" /></p><h2 id="37-微分中值定理"><a class="markdownIt-Anchor" href="#37-微分中值定理"></a> 3.7 微分中值定理</h2><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614151948.png" alt="image-20200614151946909" /></p><p>证明：（线性修正）</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614152148.png" alt="image-20200614152147364" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614152245.png" alt="image-20200614152244659" /></p><h2 id="38-柯西中值定理"><a class="markdownIt-Anchor" href="#38-柯西中值定理"></a> 3.8 柯西中值定理</h2><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614152926.png" alt="image-20200614152925374" /></p><p>【证明】</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614152743.png" alt="image-20200614152741866" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614152829.png" alt="image-20200614152827990" /></p><h2 id="39-洛必达法则"><a class="markdownIt-Anchor" href="#39-洛必达法则"></a> 3.9 洛必达法则</h2><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>0</mn><mn>0</mn></mfrac><mspace width="2em"/><mfrac><mi mathvariant="normal">∞</mi><mi mathvariant="normal">∞</mi></mfrac></mrow><annotation encoding="application/x-tex">\dfrac{0}{0}\qquad\dfrac{\infty}{\infty}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:2em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∞</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614153855.png" alt="image-20200614153854274" /></p><h2 id="310-泰勒展开的证明"><a class="markdownIt-Anchor" href="#310-泰勒展开的证明"></a> 3.10 泰勒展开的证明</h2><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614154329.png" alt="image-20200614154328312" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614154756.png" alt="image-20200614154755347" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614154906.png" alt="image-20200614154905899" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614155100.png" alt="image-20200614155059502" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614155212.png" alt="image-20200614155211525" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614155313.png" alt="image-20200614155312391" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614155339.png" alt="image-20200614155338321" /></p><p><strong>数学归纳法</strong></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614155503.png" alt="image-20200614155502810" /></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能/数学基础/高等数学-CH1-元素和极限</title>
      <link href="/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6-CH1-%E5%85%83%E7%B4%A0%E5%92%8C%E6%9E%81%E9%99%90/"/>
      <url>/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6-CH1-%E5%85%83%E7%B4%A0%E5%92%8C%E6%9E%81%E9%99%90/</url>
      
        <content type="html"><![CDATA[<h1 id="第-1-讲-元素和极限"><a class="markdownIt-Anchor" href="#第-1-讲-元素和极限"></a> 第 1 讲 元素和极限</h1><h2 id="11-实数的定义"><a class="markdownIt-Anchor" href="#11-实数的定义"></a> 1.1 实数的定义</h2><p>如何进行实数定义，要引入一个概念：<code>戴德金分划</code></p><p>首先，什么是分划呢？</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200612221749.png" alt="image-20200612221729457" /></p><p>戴德金分划：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200612222236.png" alt="image-20200612222235258" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200612225045.png" alt="image-20200612225044963" /></p><p>实数的定义：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200612224707.png" alt="image-20200612224704994" /></p><p>①② 为有理分划，③ 为无理分划</p><p>我们希望实数具有的性质是：</p><ul><li>（1）稠密性（不可有其他分法）</li><li>（2）有序性（可以比大小）</li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200612225720.png" alt="image-20200612225718814" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200612225816.png" alt="image-20200612225814914" /></p><p>引理一：<strong>单调有界序列存在极限</strong></p><h2 id="12-实数的元素个数"><a class="markdownIt-Anchor" href="#12-实数的元素个数"></a> 1.2 实数的元素个数</h2><p>势：集合元素的个数</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200612230630.png" alt="image-20200612230628942" /></p><blockquote><p>自然数个数和整数个数<code>等势</code></p></blockquote><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200612231026.png" alt="image-20200612231025368" /></p><blockquote><p>不能通过包含关系来判断是否等势</p></blockquote><p><strong>希尔伯特旅馆</strong></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200613084001.png" alt="image-20200613084000036" /></p><p>【证明】整数个数与有理数个数相同</p><p>寻找一一对应的关系：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>q</mi><mi>p</mi></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\dfrac{q}{p}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.988em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1075599999999999em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">p</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200613084958.png" alt="image-20200613084956933" /></p><p>使用到公式：|p| + |q| = k，k = 1，2，3，4…</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200613085206.png" alt="image-20200613085205666" /></p><blockquote><p><strong>可列 / 可数</strong></p></blockquote><h2 id="13-自然数个数少于实数个数"><a class="markdownIt-Anchor" href="#13-自然数个数少于实数个数"></a> 1.3 自然数个数少于实数个数</h2><p>【证明】自然数个数少于实数个数</p><p>反证法：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200613090335.png" alt="image-20200613090334237" /></p><p>（1）先将 R 与 （0, 1）实数对应</p><p>第一种对应关系方案：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200613090142.png" alt="image-20200613090140061" /></p><p>第二种对应关系方案：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200613090311.png" alt="image-20200613090309774" /></p><p>（2）再将 N 与 （0, 1）实数对应</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200613091721.png" alt="image-20200613091720585" /></p><p>!&gt; 存在逻辑错误，找出即说明反命题错误</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200613091147.png" alt="image-20200613091146559" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200613091449.png" alt="image-20200613091448640" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200613091834.png" alt="image-20200613091833692" /></p><blockquote><p>可数与不可数</p></blockquote><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200613091938.png" alt="image-20200613091936235" />当然也存在下面情况，或者更多：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200613092105.png" alt="image-20200613092104359" /></p><p>举例：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200613092121.png" alt="image-20200613092120417" /></p><h2 id="14-无穷小的比较"><a class="markdownIt-Anchor" href="#14-无穷小的比较"></a> 1.4 无穷小的比较</h2><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200613092826.png" alt="image-20200613092825080" /></p><p>【证明】求证：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>n</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><mstyle displaystyle="true" scriptlevel="0"><mfrac><msup><mi>n</mi><msub><mi>a</mi><mn>2</mn></msub></msup><msubsup><mi>a</mi><mn>3</mn><mi>n</mi></msubsup></mfrac></mstyle><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">{\lim \limits_{n \to \infty} \dfrac{n^{a_2}}{a^n_3} = 0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.2937em;vertical-align:-0.9523079999999999em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.1em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.341392em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6461920000000001em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span><span style="top:-3.0448000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26630799999999993em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9523079999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span></span></span></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200613093914.png" alt="image-20200613093913221" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200613094132.png" alt="image-20200613094131284" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200613094412.png" alt="image-20200613094411618" /></p><p>所以：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>n</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><mstyle displaystyle="true" scriptlevel="0"><mfrac><msup><mi>n</mi><msub><mi>a</mi><mn>2</mn></msub></msup><msubsup><mi>a</mi><mn>3</mn><mi>n</mi></msubsup></mfrac></mstyle><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">{\lim \limits_{n \to \infty} \dfrac{n^{a_2}}{a^n_3} = 0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.2937em;vertical-align:-0.9523079999999999em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.1em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.341392em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6461920000000001em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span><span style="top:-3.0448000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26630799999999993em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9523079999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span></span></span> 得证。</p><p>【证明】求证：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>a</mi><mn>3</mn><mi>n</mi></msubsup><mo>&lt;</mo><mi>n</mi><mo stretchy="false">!</mo><mspace width="1em"/><mo stretchy="false">(</mo><msub><mi>a</mi><mn>3</mn></msub><mo>&gt;</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{a^n_3}&lt;n!\quad(a_3&gt;1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9125em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mclose">!</span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200613095545.png" alt="image-20200613095543898" /></p><blockquote><p>引入概念：Stirling 近似</p></blockquote><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo stretchy="false">!</mo><mo>≈</mo><msqrt><mrow><mn>2</mn><mi>π</mi><mi>n</mi></mrow></msqrt><mo stretchy="false">(</mo><mfrac><mi>n</mi><mi>e</mi></mfrac><msup><mo stretchy="false">)</mo><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">n!\approx\sqrt{2{\pi}n}(\dfrac{n}{e})^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-0.686em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.956095em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">2</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">π</span></span><span class="mord mathdefault">n</span></span></span><span style="top:-2.916095em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.08390500000000001em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">e</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></span></p><p>!&gt; 注：当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>≈</mo><mn>10</mn></mrow><annotation encoding="application/x-tex">n\approx10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.48312em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span></span></span></span> 时，误差小于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mrow><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\dfrac{1}{10^6}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200613201146.png" alt="image-20200613201145696" /></p><h2 id="15-级数的收敛"><a class="markdownIt-Anchor" href="#15-级数的收敛"></a> 1.5 级数的收敛</h2><p>复习级数的收敛：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200613200059.png" alt="image-20200613200058290" /></p><p>【证明】当 a &gt; 1 时，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><msup><mi>n</mi><mi>a</mi></msup></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\dfrac{1}{n^a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.590392em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 收敛。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200613200925.png" alt="image-20200613200924478" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200613201104.png" alt="image-20200613201103844" /></p><blockquote><p>级数收敛的分界线</p></blockquote><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200613201452.png" alt="image-20200613201450947" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200613201525.png" alt="image-20200613201524778" /></p><h2 id="16-极限的定义"><a class="markdownIt-Anchor" href="#16-极限的定义"></a> 1.6 极限的定义</h2><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200613201839.png" alt="image-20200613201838443" /></p><p>序列极限 / 函数极限</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200613201956.png" alt="image-20200613201955520" /></p><p><strong>想要任意近，只要足够近！</strong></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200613202613.png" alt="image-20200613202611829" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200613202728.png" alt="image-20200613202727551" /></p><h2 id="17-极限的四则运算"><a class="markdownIt-Anchor" href="#17-极限的四则运算"></a> 1.7 极限的四则运算</h2><p>【证明】<span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><mn>3</mn></mrow></munder><msup><mi>x</mi><mn>2</mn></msup><mo>=</mo><mn>9</mn></mrow><annotation encoding="application/x-tex">{\lim \limits_{x \to 3} x^2 = 9}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.531216em;vertical-align:-0.717108em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.082892em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight">3</span></span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.717108em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">9</span></span></span></span></span></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200613203816.png" alt="image-20200613203815380" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200613204134.png" alt="image-20200613204133180" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200613204237.png" alt="image-20200613204236217" /></p><h2 id="18-极限的复合"><a class="markdownIt-Anchor" href="#18-极限的复合"></a> 1.8 极限的复合</h2><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200613204627.png" alt="image-20200613204626100" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200613204907.png" alt="image-20200613204905956" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200613204955.png" alt="image-20200613204953725" /></p><h2 id="19-连续性"><a class="markdownIt-Anchor" href="#19-连续性"></a> 1.9 连续性</h2><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200613205251.png" alt="image-20200613205250591" /></p><p>【证明】</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200613205528.png" alt="image-20200613205527263" /></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能/数学基础/高等数学-CH2-两个重要的极限定理</title>
      <link href="/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6-CH2-%E4%B8%A4%E4%B8%AA%E9%87%8D%E8%A6%81%E7%9A%84%E6%9E%81%E9%99%90%E5%AE%9A%E7%90%86/"/>
      <url>/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6-CH2-%E4%B8%A4%E4%B8%AA%E9%87%8D%E8%A6%81%E7%9A%84%E6%9E%81%E9%99%90%E5%AE%9A%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="第-2-讲-两个重要的极限定理"><a class="markdownIt-Anchor" href="#第-2-讲-两个重要的极限定理"></a> 第 2 讲 两个重要的极限定理</h1><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614130831.png" alt="image-20200614130823115" /></p><blockquote><p>两个重要极限：</p></blockquote><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>n</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mi>n</mi></mfrac></mstyle><msup><mo stretchy="false">)</mo><mi>n</mi></msup><mo>=</mo><mi>e</mi></mrow><annotation encoding="application/x-tex">{\lim \limits_{n \to \infty} (1+\dfrac{1}{n})^n = e}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.02144em;vertical-align:-0.7em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.1em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">e</span></span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><mn>0</mn></mrow></munder><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mi>x</mi></mrow><mi>x</mi></mfrac></mstyle><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">{\lim \limits_{x \to 0} \dfrac{sinx}{x}=1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.0536280000000002em;vertical-align:-0.717108em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.082892em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight">0</span></span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.717108em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3365200000000002em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span></span></span></span></span></li></ul><h2 id="21-第一个重要极限定理的证明"><a class="markdownIt-Anchor" href="#21-第一个重要极限定理的证明"></a> 2.1 第一个重要极限定理的证明</h2><ul><li>【证明】<span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>n</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mi>n</mi></mfrac></mstyle><msup><mo stretchy="false">)</mo><mi>n</mi></msup><mo>=</mo><mi>e</mi></mrow><annotation encoding="application/x-tex">{\lim \limits_{n \to \infty} (1+\dfrac{1}{n})^n = e}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.02144em;vertical-align:-0.7em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.1em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">e</span></span></span></span></span></li></ul><p>先证明极限存在：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614132059.png" alt="image-20200614132058057" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614132326.png" alt="image-20200614132325769" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614132410.png" alt="image-20200614132409019" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614132713.png" alt="image-20200614132712283" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614132733.png" alt="image-20200614132732927" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614132845.png" alt="image-20200614132844460" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614132955.png" alt="image-20200614132953969" /></p><ul><li>计算机表示：</li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614133102.png" alt="image-20200614133100927" /></p><h2 id="22-夹逼定理"><a class="markdownIt-Anchor" href="#22-夹逼定理"></a> 2.2 夹逼定理</h2><ul><li>引理：夹逼定理</li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614133338.png" alt="image-20200614133337354" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614133614.png" alt="image-20200614133612961" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614133646.png" alt="image-20200614133644986" /></p><h2 id="23-第二个重要极限定理的证明"><a class="markdownIt-Anchor" href="#23-第二个重要极限定理的证明"></a> 2.3 第二个重要极限定理的证明</h2><ul><li>【证明】<span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><mn>0</mn></mrow></munder><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mi>x</mi></mrow><mi>x</mi></mfrac></mstyle><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">{\lim \limits_{x \to 0} \dfrac{sinx}{x}=1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.0536280000000002em;vertical-align:-0.717108em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.082892em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight">0</span></span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.717108em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3365200000000002em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span></span></span></span></span></li></ul><blockquote><p>使用夹逼定理来证明</p></blockquote><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614134219.png" alt="image-20200614134217975" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614134248.png" alt="image-20200614134247375" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200614134311.png" alt="image-20200614134309921" /></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能/数学基础/蒙特卡洛方法与MCMC采样-CH2-马尔可夫链</title>
      <link href="/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%96%B9%E6%B3%95%E4%B8%8EMCMC%E9%87%87%E6%A0%B7-CH2-%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E9%93%BE/"/>
      <url>/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%96%B9%E6%B3%95%E4%B8%8EMCMC%E9%87%87%E6%A0%B7-CH2-%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="第-2-章-马尔可夫链"><a class="markdownIt-Anchor" href="#第-2-章-马尔可夫链"></a> 第 2 章 马尔可夫链</h1><ol><li><p>马尔可夫链是满足马尔可夫性质的随机过程。</p><p>马尔可夫链 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/638e2aaa145916d7398e2ba684a40799.svg" alt="二、马尔可夫链 - 图1" /> 描述了一个状态序列，其中每个状态值取决于前一个状态。<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/f110f5291a9677fd08f71950297dc55a.svg" alt="二、马尔可夫链 - 图2" /> 为随机变量，称为时刻 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/2735987dd443c370c5ff55050d09be7c.svg" alt="二、马尔可夫链 - 图3" /> 的状态，其取值范围称作状态空间。</p><p>马尔可夫链的数学定义为： <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/f397f40fd1b5518af0f78c08d47bc4ea.svg" alt="二、马尔可夫链 - 图4" /> 。</p></li></ol><h2 id="21-马尔可夫链示例"><a class="markdownIt-Anchor" href="#21-马尔可夫链示例"></a> 2.1 马尔可夫链示例</h2><ol><li><p>社会学家把人按照经济状况分成三类：下层、中层、上层。用状态 <code>1,2,3</code> 代表着三个阶层。社会学家发现：决定一个人的收入阶层的最重要因素就是其父母的收入阶层。</p><ul><li>如果一个人的收入属于下层，则他的孩子属于下层的概率是 0.65，属于中层的概率是 0.28，属于上层的概率是 0.07 。</li><li>如果一个人的收入属于中层，则他的孩子属于下层的概率是 0.15，属于中层的概率是 0.67，属于上层的概率是 0.18 。</li><li>如果一个人的收入属于上层，则他的孩子属于下层的概率是 0.12，属于中层的概率是 0.36，属于上层的概率是 0.52 。</li></ul><p>从父代到子代，收入阶层的变化的转移概率如下：</p><table><thead><tr><th style="text-align:left"></th><th style="text-align:left">子代阶层1</th><th style="text-align:left">子代阶层2</th><th style="text-align:left">子代阶层3</th></tr></thead><tbody><tr><td style="text-align:left">父代阶层1</td><td style="text-align:left">0.65</td><td style="text-align:left">0.28</td><td style="text-align:left">0.07</td></tr><tr><td style="text-align:left">父代阶层2</td><td style="text-align:left">0.15</td><td style="text-align:left">0.67</td><td style="text-align:left">0.18</td></tr><tr><td style="text-align:left">父代阶层3</td><td style="text-align:left">0.12</td><td style="text-align:left">0.36</td><td style="text-align:left">0.52</td></tr></tbody></table></li><li><p>使用矩阵的表示方式，转移概率矩阵记作：</p><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/14801d065b833fd99b3242d499369f54.svg" alt="二、马尔可夫链 - 图5" /></p><p>假设当前这一代人在下层、中层、上层的人的比例是概率分布 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/a6b78c43b042e93c63cbe7d981fd70f4.svg" alt="二、马尔可夫链 - 图6" /> ，则：</p><ul><li>他们的子女在下层、中层、上层的人的概率分布是 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/0bcdc3d418fb9c16ed61f429e6caa021.svg" alt="二、马尔可夫链 - 图7" /></li><li>他们的孙子代的分布比例将是 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/a8fe77e7f80717579d64430589df630b.svg" alt="二、马尔可夫链 - 图8" /></li><li>….</li><li>第 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/5a2e98373b3730e19f9172f7df390432.svg" alt="二、马尔可夫链 - 图9" /> 代子孙在下层、中层、上层的人的比例是 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/8a5e6a435dcae01fe3511772f77a22a0.svg" alt="二、马尔可夫链 - 图10" /></li></ul></li><li><p>假设初始概率分布为 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/8c71dc6394284c750e447420efd3c741.svg" alt="二、马尔可夫链 - 图11" /> ，给出前 14 代人的分布状况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 0.72 0.19 0.09  1 0.5073 0.3613 0.1314  2 0.399708 0.431419 0.168873  3 0.34478781 0.46176325 0.19344894  4 0.3165904368 0.4755635827 0.2078459805  5 0.302059838985 0.482097475693 0.215842685322  6 0.294554638933 0.485285430346 0.220159930721  7 0.290672521545 0.486874112293 0.222453366163  8 0.288662659788 0.487677173087 0.223660167125  9 0.28762152488 0.488086910874 0.224291564246  10 0.287082015513 0.488297220381 0.224620764107  11 0.286802384833 0.488405577077 0.22479203809  12 0.286657431274 0.488461538107 0.224881030619  13 0.286582284718 0.488490482311 0.22492723297  14 0.28654332537 0.488505466739 0.224951207891</span><br></pre></td></tr></table></figure><p>可以看到从第 9 代开始，阶层分布就趋向于稳定不变。</p></li><li><p>如果换一个初始概率分布为 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/a9487868724484deb8eef1903965dd49.svg" alt="二、马尔可夫链 - 图12" /> ，给出前 14 代人的分布状况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 0.51 0.34 0.15  1 0.4005 0.4246 0.1749  2 0.345003 0.459586 0.195411  3 0.31663917 0.47487142 0.20848941  4 0.3020649027 0.4818790066 0.2160560907  5 0.294550768629 0.48521729983 0.220231931541  6 0.290668426368 0.486853301457 0.222478272175  7 0.288659865019 0.487671049342 0.223669085639  8 0.28761985994 0.488085236095 0.224294903965  9 0.287081082851 0.488296834394 0.224622082755  10 0.286801878943 0.488405532034 0.224792589023  11 0.286657161801 0.488461564615 0.224881273584  12 0.286582142693 0.488490512087 0.224927345221  13 0.28654325099 0.488505487331 0.224951261679  14 0.286523087645 0.488513240994 0.224963671362</span><br></pre></td></tr></table></figure><p>可以发现到第 8 代又收敛了。</p></li><li><p>两次不同的初始概率分布，最终都收敛到概率分布 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/ba46b0b494d9d3b2f4954d8051db0fdb.svg" alt="二、马尔可夫链 - 图13" /> 。 这说明收敛的行为和初始概率分布 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/d4bc14c9fa2c5516bbccd2c6f09474b6.svg" alt="二、马尔可夫链 - 图14" /> 无关，而是由概率转移矩阵 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/7898ba6178e6a0c4a55151b3015356ef.svg" alt="二、马尔可夫链 - 图15" /> 决定的。</p><p>计算 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/770e80bb7dd1dc420ca5f100458b968c.svg" alt="二、马尔可夫链 - 图16" />：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 [[ 0.65  0.28  0.07]     [ 0.15  0.67  0.18]     [ 0.12  0.36  0.52]]  1 [ [ 0.4729  0.3948  0.1323]      [ 0.2196  0.5557  0.2247]      [ 0.1944  0.462   0.3436]]  ...  18 [[ 0.28650397  0.48852059  0.22497545]      [ 0.28650052  0.48852191  0.22497757]      [ 0.28649994  0.48852213  0.22497793]]  19 [[ 0.28650272  0.48852106  0.22497622]      [ 0.28650093  0.48852175  0.22497732]      [ 0.28650063  0.48852187  0.2249775 ]]  20 [[ 0.28650207  0.48852131  0.22497661]      [ 0.28650115  0.48852167  0.22497719]      [ 0.28650099  0.48852173  0.22497728]]  21 [[ 0.28650174  0.48852144  0.22497682]      [ 0.28650126  0.48852163  0.22497712]      [ 0.28650118  0.48852166  0.22497717]]  ...</span><br></pre></td></tr></table></figure><p>可以看到 ：</p><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/84db750fb23b3c2f91746b95a730c1a4.svg" alt="二、马尔可夫链 - 图17" /></p><p>发现当 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/5a2e98373b3730e19f9172f7df390432.svg" alt="二、马尔可夫链 - 图18" /> 足够大的时候， 矩阵 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/770e80bb7dd1dc420ca5f100458b968c.svg" alt="二、马尔可夫链 - 图19" /> 收敛且每一行都稳定收敛到 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/ba46b0b494d9d3b2f4954d8051db0fdb.svg" alt="二、马尔可夫链 - 图20" /> 。</p></li></ol><h2 id="22-平稳分布"><a class="markdownIt-Anchor" href="#22-平稳分布"></a> 2.2 平稳分布</h2><ol><li><p>马尔可夫链定理：如果一个非周期马尔可夫链具有转移概率矩阵 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/7898ba6178e6a0c4a55151b3015356ef.svg" alt="二、马尔可夫链 - 图21" />，且它的任何两个状态是联通的，则有：</p><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/2173422a1294291441e169e292566d55.svg" alt="二、马尔可夫链 - 图22" /></p><p>其中：</p><ul><li><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/881517711cd5194b69e9b054baa4ed79.svg" alt="二、马尔可夫链 - 图23" /> 为所有可能的状态。</p></li><li><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/f7c61ba6d79aa675c0df711c7bff8838.svg" alt="二、马尔可夫链 - 图24" /> 是转移概率矩阵 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/7898ba6178e6a0c4a55151b3015356ef.svg" alt="二、马尔可夫链 - 图25" /> 的第 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/fd3c8130f3e375a09930923dd0cc2860.svg" alt="二、马尔可夫链 - 图26" /> 行第 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/5c38684bb6cad4ba739a4bae3ca0619f.svg" alt="二、马尔可夫链 - 图27" /> 列的元素，表示状态 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/fd3c8130f3e375a09930923dd0cc2860.svg" alt="二、马尔可夫链 - 图28" /> 转移到状态 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/5c38684bb6cad4ba739a4bae3ca0619f.svg" alt="二、马尔可夫链 - 图29" /> 的概率。</p></li><li><p>概率分布 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/bfd436dd20f31109cfc948dc55d2b3ee.svg" alt="二、马尔可夫链 - 图30" /> 是方程 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/2088f08b87f3bbdcc5e3a63b2ce39fac.svg" alt="二、马尔可夫链 - 图31" /> 的唯一解，其中 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/0eb669ecc713c1ecfdf3e9b521e84853.svg" alt="二、马尔可夫链 - 图32" /> 。</p><p>称概率分布 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/832cc66802c19ea74d61725905fc5e13.svg" alt="二、马尔可夫链 - 图33" /> 为马尔可夫链的平稳分布。</p></li></ul></li><li><p>注意，在马尔可夫链定理中：</p><ul><li><p>马尔可夫链的状态不要求有限，可以是无穷多个。</p></li><li><p>非周期性在实际任务中都是满足的。</p></li><li><p>两个状态的连通指的是：状态 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/fd3c8130f3e375a09930923dd0cc2860.svg" alt="二、马尔可夫链 - 图34" /> 可以通过有限的 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/5a2e98373b3730e19f9172f7df390432.svg" alt="二、马尔可夫链 - 图35" /> 步转移到达 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/5c38684bb6cad4ba739a4bae3ca0619f.svg" alt="二、马尔可夫链 - 图36" /> (并不要求从状态 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/fd3c8130f3e375a09930923dd0cc2860.svg" alt="二、马尔可夫链 - 图37" /> 可以直接一步转移到状态 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/5c38684bb6cad4ba739a4bae3ca0619f.svg" alt="二、马尔可夫链 - 图38" /> ）。</p><p>马尔可夫链的任何两个状态是联通的含义是：存在一个 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/5a2e98373b3730e19f9172f7df390432.svg" alt="二、马尔可夫链 - 图39" /> ，使得矩阵 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/770e80bb7dd1dc420ca5f100458b968c.svg" alt="二、马尔可夫链 - 图40" /> 中的任何一个元素的数值都大于零。</p></li></ul></li><li><p>从初始概率分布 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/d4bc14c9fa2c5516bbccd2c6f09474b6.svg" alt="二、马尔可夫链 - 图41" /> 出发，在马尔可夫链上做状态转移，记时刻 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/fd3c8130f3e375a09930923dd0cc2860.svg" alt="二、马尔可夫链 - 图42" /> 的状态 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/a43edba156cf9cf373bdaccd8c4a65b5.svg" alt="二、马尔可夫链 - 图43" /> 服从的概率分布为 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/802af6e6d4846baf31b1d034c0ffa5bb.svg" alt="二、马尔可夫链 - 图44" />， 记作 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/5654ee0e31202b2419f94848371f8553.svg" alt="二、马尔可夫链 - 图45" /> ，则有：</p><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/0fc99f55224579868aa08cd3cd18ef8a.svg" alt="二、马尔可夫链 - 图46" /></p><p>假设到达第 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/5a2e98373b3730e19f9172f7df390432.svg" alt="二、马尔可夫链 - 图47" /> 步时，马尔可夫链收敛，则有：</p><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/8e3b519d2b35cd9a954d3898c86afb8d.svg" alt="二、马尔可夫链 - 图48" /></p><p>所以 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/2bb5e1ac9d618b8ff6c3f080b5b671b9.svg" alt="二、马尔可夫链 - 图49" /> 都是同分布的随机变量（当然它们并不独立）。</p><p>如果从一个具体的初始状态 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/772667393aa88b9a70e943ca5bb3bb0b.svg" alt="二、马尔可夫链 - 图50" /> 开始，然后沿着马尔可夫链按照概率转移矩阵做调整，则得到一个转移序列 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/042ceb6236970bcc133ae4fc0e794495.svg" alt="二、马尔可夫链 - 图51" /> 。</p><p>根据马尔可夫链的收敛行为，当 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/5a2e98373b3730e19f9172f7df390432.svg" alt="二、马尔可夫链 - 图52" /> 较大时， <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/23766fb0343f5d94d0bb616e13859531.svg" alt="二、马尔可夫链 - 图53" /> 将是平稳分布 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/832cc66802c19ea74d61725905fc5e13.svg" alt="二、马尔可夫链 - 图54" /> 的样本。</p></li><li><p>定理：如果非周期马尔可夫链的转移矩阵 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/7898ba6178e6a0c4a55151b3015356ef.svg" alt="二、马尔可夫链 - 图55" /> 和某个分布 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/62c57c1be232fe19f5690064dba0236d.svg" alt="二、马尔可夫链 - 图56" /> 满足：<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/90d10440a4d12a247da52becb88f20e9.svg" alt="二、马尔可夫链 - 图57" /> ，则 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/62c57c1be232fe19f5690064dba0236d.svg" alt="二、马尔可夫链 - 图58" /> 是马尔可夫链的平稳分布。</p><p>这被称作马尔可夫链的细致平稳条件<code>detailed balance condition</code> ，其证明如下：</p><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/e8c1499e486f9b1a8cbe50ca569fb725.svg" alt="二、马尔可夫链 - 图59" /></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能/数学基础/蒙特卡洛方法与MCMC采样-CH1-蒙特卡洛方法</title>
      <link href="/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%96%B9%E6%B3%95%E4%B8%8EMCMC%E9%87%87%E6%A0%B7-CH1-%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%96%B9%E6%B3%95/"/>
      <url>/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%96%B9%E6%B3%95%E4%B8%8EMCMC%E9%87%87%E6%A0%B7-CH1-%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="第-1-章-蒙特卡洛方法"><a class="markdownIt-Anchor" href="#第-1-章-蒙特卡洛方法"></a> 第 1 章 蒙特卡洛方法</h1><ol><li><p>蒙特卡洛方法<code>Monte Carlo</code> 可以通过采用随机投点法来求解不规则图形的面积。</p><p>求解结果并不是一个精确值，而是一个近似值。当投点的数量越来越大时，该近似值也越接近真实值。</p></li><li><p>蒙特卡洛方法也可以用于根据概率分布来随机采样的任务。</p></li></ol><h2 id="11-布丰投针问题"><a class="markdownIt-Anchor" href="#11-布丰投针问题"></a> 1.1 布丰投针问题</h2><ol><li><p>布丰投针问题是1777年法国科学家布丰提出的一种计算圆周率的方法：随机投针法。其步骤为：</p><ul><li><p>首先取一张白纸，在上面绘制许多条间距为 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/96b9b6b97bba67dd7d77373351fbccc6.svg" alt="一、蒙特卡洛方法 - 图1" /> 的平行线。</p></li><li><p>取一根长度为 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/18a085454e4e76d678c5d0e646aaefed.svg" alt="一、蒙特卡洛方法 - 图2" /> 的针，随机地向纸上投掷 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/5a2e98373b3730e19f9172f7df390432.svg" alt="一、蒙特卡洛方法 - 图3" /> 次，观测针与直线相交的次数，记做 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/a5641e35a69f1b4bdce5839a03637f11.svg" alt="一、蒙特卡洛方法 - 图4" /> 。</p></li><li><p>计算针与直线相交的概率 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/5ad3dfb4f1622b7f7628e5542fa8b6ba.svg" alt="一、蒙特卡洛方法 - 图5" /> 。可以证明这个概率 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/bb519b6b8e8eae1a37adc6e902fdc240.svg" alt="一、蒙特卡洛方法 - 图6" /> 。因此有：</p><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/fbbf35a0368ca1e99f07973c9368cfbf.svg" alt="一、蒙特卡洛方法 - 图7" /></p></li></ul></li><li><p>由于向纸上投针是完全随机的，因此用二维随机变量 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/d501efae07c9b05a3595044741b93d00.svg" alt="一、蒙特卡洛方法 - 图8" /> 来确定针在纸上的具体位置。其中：</p><ul><li><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/64869188e3bcd72f23d4e019e2e95779.svg" alt="一、蒙特卡洛方法 - 图9" /> 表示针的中点到平行线的距离，它是 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/a641abbb4fad23b86f5b24fb7eb60214.svg" alt="一、蒙特卡洛方法 - 图10" /> 之间的均匀分布。</li><li><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/f9a58d23ffae63244f8d54c83a581cd4.svg" alt="一、蒙特卡洛方法 - 图11" /> 表示针与平行线的夹角，它是 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/1a0fd42eb0bf5ab970399586737c2e7e.svg" alt="一、蒙特卡洛方法 - 图12" /> 之间的均匀分布。</li></ul><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/c3594fe5dae9498ea48ebb2e2758666f.png" alt="一、蒙特卡洛方法 - 图13" /></p><p>当 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/1e8433c11bd809bd1e4117d72bdf6901.svg" alt="一、蒙特卡洛方法 - 图14" /> 时，针与直线相交。</p><p>由于 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/0c2080241d455a53c3ac458f4dba1216.svg" alt="一、蒙特卡洛方法 - 图15" /> 相互独立，因此有概率密度函数：</p><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/21e77660c660ae2d8a3fcd06b2961f38.svg" alt="一、蒙特卡洛方法 - 图16" /></p><p>因此，针与直线相交的概率为：</p><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/319f1c060ee95d6bd08d164ffcca1ab1.svg" alt="一、蒙特卡洛方法 - 图17" /></p><p>根据 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/71c3c9444753dda03f897766366bdc32.svg" alt="一、蒙特卡洛方法 - 图18" /> 即可得证。</p></li><li><p>布丰投针问题中，蒙特卡洛方法是利用随机投点法来求解面积 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/9d63750e0343fe0c424f51afd7503e6f.svg" alt="一、蒙特卡洛方法 - 图19" /> 。因为曲线的积分就是面积，这里的曲线就是概率密度函数 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/bf066c4d1e38b7d74f07a35eece7f2b8.svg" alt="一、蒙特卡洛方法 - 图20" /> 。</p></li></ol><h2 id="12-蒙特卡洛积分"><a class="markdownIt-Anchor" href="#12-蒙特卡洛积分"></a> 1.2 蒙特卡洛积分</h2><ol><li><p>对于函数 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/be30066d0162870219288eea29199d85.svg" alt="一、蒙特卡洛方法 - 图21" />，其在区间 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/307de0b6552a633e6df095d20f1dd275.svg" alt="一、蒙特卡洛方法 - 图22" /> 上的积分 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/81b440234586170c77d3b21122fa290f.svg" alt="一、蒙特卡洛方法 - 图23" /> 可以采用两种方法来求解：投点法、期望法。</p></li><li><p>投点法求积分：对函数 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/be30066d0162870219288eea29199d85.svg" alt="一、蒙特卡洛方法 - 图24" />，对其求积分等价于求它的曲线下方的面积。</p><p>此时定义一个常数 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/5e20f6cae723f651dc49a304bb164215.svg" alt="一、蒙特卡洛方法 - 图25" />，使得 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/e577f17ea81b02298f7a432893ea1b1c.svg" alt="一、蒙特卡洛方法 - 图26" /> ，该常数在区间 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/307de0b6552a633e6df095d20f1dd275.svg" alt="一、蒙特卡洛方法 - 图27" /> 上的面积就是矩形面积 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/5d3df359f6589e4065ce3c0413590ba8.svg" alt="一、蒙特卡洛方法 - 图28" /> 。</p><p>随机向矩形框中随机的、均匀的投点，设落在函数 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/be30066d0162870219288eea29199d85.svg" alt="一、蒙特卡洛方法 - 图29" /> 下方的点为绿色，落在 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/be30066d0162870219288eea29199d85.svg" alt="一、蒙特卡洛方法 - 图30" /> 和 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/5e20f6cae723f651dc49a304bb164215.svg" alt="一、蒙特卡洛方法 - 图31" /> 之间的点为红色。则有：<strong>落在 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/be30066d0162870219288eea29199d85.svg" alt="一、蒙特卡洛方法 - 图32" /> 下方的点的概率等于 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/be30066d0162870219288eea29199d85.svg" alt="一、蒙特卡洛方法 - 图33" /> 的面积比上矩形框的面积</strong> 。</p><p>具体做法是：从 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/307de0b6552a633e6df095d20f1dd275.svg" alt="一、蒙特卡洛方法 - 图34" /> 之间的均匀分布中采样 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/772667393aa88b9a70e943ca5bb3bb0b.svg" alt="一、蒙特卡洛方法 - 图35" /> ，从 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/092c822354efe28e6ec0240bb2032668.svg" alt="一、蒙特卡洛方法 - 图36" /> 之见的均匀分布中采样 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/2c971b996e1addd871a969001e2e2e55.svg" alt="一、蒙特卡洛方法 - 图37" /> ， <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/66ac93f5be40bb1dab848a7c510ecdda.svg" alt="一、蒙特卡洛方法 - 图38" /> 构成一个随机点。</p><ul><li>若 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/300b14f4855be2aa86248c2c2b4af446.svg" alt="一、蒙特卡洛方法 - 图39" />，则说明该随机点在函数 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/be30066d0162870219288eea29199d85.svg" alt="一、蒙特卡洛方法 - 图40" /> 下方，染成绿色。</li><li>若 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/4a10580de8940d8c806f9bb17623d50a.svg" alt="一、蒙特卡洛方法 - 图41" />，则说明该随机点在函数 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/be30066d0162870219288eea29199d85.svg" alt="一、蒙特卡洛方法 - 图42" /> 上方，染成红色。</li></ul><p>假设绿色点有 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/474c414f221f0ee6755b26aca9c2e0f1.svg" alt="一、蒙特卡洛方法 - 图43" /> 个，红色点有 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/609c9ee7f9bd791084e1dd41f3b374e4.svg" alt="一、蒙特卡洛方法 - 图44" /> 个，总的点数为 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/7491883a971f3d69103cedf403c413aa.svg" alt="一、蒙特卡洛方法 - 图45" /> ，因此有：<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/1c0a98d43b0494bbf403504c8f54d016.svg" alt="一、蒙特卡洛方法 - 图46" /> 。</p><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/c52e7a656b62f6f328dbd2d9d686f243.png" alt="一、蒙特卡洛方法 - 图47" /></p></li><li><p>期望法求积分：假设需要求解积分 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/b333f5f7ef61a3aa3ad0605eb45c4739.svg" alt="一、蒙特卡洛方法 - 图48" /> ，则任意选择一个概率密度函数 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/60f872d1abdb9a2eb5916cb492bc3dfe.svg" alt="一、蒙特卡洛方法 - 图49" />，其中 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/60f872d1abdb9a2eb5916cb492bc3dfe.svg" alt="一、蒙特卡洛方法 - 图50" /> 满足条件：</p><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/a3d2711efaf1fb75969415350504fb39.svg" alt="一、蒙特卡洛方法 - 图51" /></p><p>令：</p><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/e4da08fade1d789a3a6fda577f72f0fd.svg" alt="一、蒙特卡洛方法 - 图52" /></p><p>则有：<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/406b64055f058e07c81d8dc71ee22233.svg" alt="一、蒙特卡洛方法 - 图53" /> ，它刚好是一个期望：设随机变量 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/64869188e3bcd72f23d4e019e2e95779.svg" alt="一、蒙特卡洛方法 - 图54" /> 服从分布 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/58006f5bf9c5f5325e21e90e32b6dbb9.svg" alt="一、蒙特卡洛方法 - 图55" />，则 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/c9a8d343050d966c08b5114f4b4d5bcd.svg" alt="一、蒙特卡洛方法 - 图56" /> 。</p><p>则期望法求积分的步骤是：</p><ul><li>任选一个满足条件的概率分布 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/60f872d1abdb9a2eb5916cb492bc3dfe.svg" alt="一、蒙特卡洛方法 - 图57" /> 。</li><li>根据 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/60f872d1abdb9a2eb5916cb492bc3dfe.svg" alt="一、蒙特卡洛方法 - 图58" />，生成一组服从分布 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/60f872d1abdb9a2eb5916cb492bc3dfe.svg" alt="一、蒙特卡洛方法 - 图59" /> 的随机数 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/fba38d047bfa22e22a03ba6f002c9d02.svg" alt="一、蒙特卡洛方法 - 图60" /> 。</li><li>计算均值 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/5122e4ca1cb67a752838dee6b08dc36b.svg" alt="一、蒙特卡洛方法 - 图61" /> ，并将 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/a3aec73f182da3e7c8fdd31c0d3760fa.svg" alt="一、蒙特卡洛方法 - 图62" /> 作为 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/0fb46ea61803d64a9f4484ee7aeb4de0.svg" alt="一、蒙特卡洛方法 - 图63" /> 的近似。</li></ul></li><li><p>在期望法求积分中，如果 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/a3e382236e8fd5b21feaeb9465988cea.svg" alt="一、蒙特卡洛方法 - 图64" /> 均为有限值，则 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/60f872d1abdb9a2eb5916cb492bc3dfe.svg" alt="一、蒙特卡洛方法 - 图65" /> 可以取均匀分布的概率密度函数：</p><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/43ead1be336b4207d58ab546f7eb9cd6.svg" alt="一、蒙特卡洛方法 - 图66" /></p><p>此时 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/38deaae4d5777bce7e0c39245e0f7da8.svg" alt="一、蒙特卡洛方法 - 图67" />， <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/f9e2f0b40311e9769faa46d50a6f4102.svg" alt="一、蒙特卡洛方法 - 图68" /> 。</p><p>其物理意义为：<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/626b48d9874d48c0f02529abb5c8f614.svg" alt="一、蒙特卡洛方法 - 图69" /> 为在区间 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/307de0b6552a633e6df095d20f1dd275.svg" alt="一、蒙特卡洛方法 - 图70" /> 上函数的平均高度，乘以区间宽度 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/e4319dbb5153ceb641910dcb22ad49b7.svg" alt="一、蒙特卡洛方法 - 图71" /> 就是平均面积。</p><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/1e390c5422b6582cccba430c353adc6f.png" alt="一、蒙特卡洛方法 - 图72" /></p></li><li><p>对于期望 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/f5c153c4dbfc27a74adb08bb261df709.svg" alt="一、蒙特卡洛方法 - 图73" />，如果 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/60f872d1abdb9a2eb5916cb492bc3dfe.svg" alt="一、蒙特卡洛方法 - 图74" /> 或者 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/be30066d0162870219288eea29199d85.svg" alt="一、蒙特卡洛方法 - 图75" /> 的表达式比较复杂，则也可以转化为另一个期望的计算。</p><p>选择一个比较简单的概率密度函数 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/7bc4e5f344bb58eddf46088a242fc295.svg" alt="一、蒙特卡洛方法 - 图76" />，根据：</p><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/e75d3c36d5bbd843b0710bb106521b0d.svg" alt="一、蒙特卡洛方法 - 图77" /></p><p>令 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/5b03179ea064c895960bda65cbe09e50.svg" alt="一、蒙特卡洛方法 - 图78" />，则原始期望转换为求另一个期望 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/3c2d152508214078b72009ccb032995e.svg" alt="一、蒙特卡洛方法 - 图79" /> 。此时可以使用期望法求积分的策略计算。</p></li></ol><h2 id="13-蒙特卡洛采样"><a class="markdownIt-Anchor" href="#13-蒙特卡洛采样"></a> 1.3 蒙特卡洛采样</h2><ol><li><p>采样问题的主要任务是：根据概率分布 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/60f872d1abdb9a2eb5916cb492bc3dfe.svg" alt="一、蒙特卡洛方法 - 图80" /> ，生成一组服从分布 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/60f872d1abdb9a2eb5916cb492bc3dfe.svg" alt="一、蒙特卡洛方法 - 图81" /> 的随机数 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/a6da30200c3c97061e301fecdd7136f2.svg" alt="一、蒙特卡洛方法 - 图82" /> 。</p><ul><li><p>如果 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/60f872d1abdb9a2eb5916cb492bc3dfe.svg" alt="一、蒙特卡洛方法 - 图83" /> 就是均匀分布，则均匀分布的采样非常简单。</p></li><li><p>如果 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/60f872d1abdb9a2eb5916cb492bc3dfe.svg" alt="一、蒙特卡洛方法 - 图84" /> 是非均匀分布，则可以通过均匀分布的采样来实现。其步骤是：</p><ul><li><p>首先根据均匀分布 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/c19ed7bc9e86b6d27dce2fa2f7f5aff1.svg" alt="一、蒙特卡洛方法 - 图85" /> 随机生成一个样本 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/05b91326dcce4ef7ae1dbe8ffa95ded5.svg" alt="一、蒙特卡洛方法 - 图86" /> 。</p></li><li><p>设 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/225516caf64716ee5d5c0787a05645a6.svg" alt="一、蒙特卡洛方法 - 图87" /> 为概率分布 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/60f872d1abdb9a2eb5916cb492bc3dfe.svg" alt="一、蒙特卡洛方法 - 图88" /> 的累计分布函数：<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/693921a6361c06fb064f8a2c5b257053.svg" alt="一、蒙特卡洛方法 - 图89" /> 。</p><p>令 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/cdd16a5b9721b933901b7acd40f586cf.svg" alt="一、蒙特卡洛方法 - 图90" /> ，计算得到 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/e2157b83826cf33bded67049cf14905c.svg" alt="一、蒙特卡洛方法 - 图91" /> ，其中 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/4d76f69e1379ecdf0c7289634f661729.svg" alt="一、蒙特卡洛方法 - 图92" /> 为反函数，则 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/bc13fa362c1eda7638706326290a374f.svg" alt="一、蒙特卡洛方法 - 图93" /> 为对 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/60f872d1abdb9a2eb5916cb492bc3dfe.svg" alt="一、蒙特卡洛方法 - 图94" /> 的采样。</p></li></ul><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/6b08f6d59fbb51bb6e3d7567c25453c3.png" alt="一、蒙特卡洛方法 - 图95" /></p></li></ul></li><li><p>通过均匀分布的采样的原理：假设随机变量 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/34743308047ddce1ac264fa6d2942904.svg" alt="一、蒙特卡洛方法 - 图96" /> 满足 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/48c559fc5f44eec19a2f3911a01f8d0f.svg" alt="一、蒙特卡洛方法 - 图97" />，则 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/64869188e3bcd72f23d4e019e2e95779.svg" alt="一、蒙特卡洛方法 - 图98" /> 的概率分布为：</p><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/666740323d6dd2592207fc99170dd1f6.svg" alt="一、蒙特卡洛方法 - 图99" /></p><p>因为 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/8f1785c273ae3e5b7b582461a0667267.svg" alt="一、蒙特卡洛方法 - 图100" /> 是 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/fc250158f540123e3cc0f408393cbfd7.svg" alt="一、蒙特卡洛方法 - 图101" /> 上面的均匀分布，因此 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/14d57535dd86126f2881b80bb7a838c2.svg" alt="一、蒙特卡洛方法 - 图102" /> ； <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/225516caf64716ee5d5c0787a05645a6.svg" alt="一、蒙特卡洛方法 - 图103" /> 为概率分布 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/60f872d1abdb9a2eb5916cb492bc3dfe.svg" alt="一、蒙特卡洛方法 - 图104" /> 的累计分布函数，因此 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/9dadc50c00eaf20cf394ea42a9d075b8.svg" alt="一、蒙特卡洛方法 - 图105" /> 。因此上式刚好等于 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/60f872d1abdb9a2eb5916cb492bc3dfe.svg" alt="一、蒙特卡洛方法 - 图106" /> ，即：<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/bc13fa362c1eda7638706326290a374f.svg" alt="一、蒙特卡洛方法 - 图107" /> 服从概率分布 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/60f872d1abdb9a2eb5916cb492bc3dfe.svg" alt="一、蒙特卡洛方法 - 图108" /> 。</p><p>这其中有两个关键计算：</p><ul><li>根据 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/60f872d1abdb9a2eb5916cb492bc3dfe.svg" alt="一、蒙特卡洛方法 - 图109" />，计算累计分布函数 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/693921a6361c06fb064f8a2c5b257053.svg" alt="一、蒙特卡洛方法 - 图110" /> 。</li><li>根据 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/eda3542eca5ea23bd3d275fe4f492f09.svg" alt="一、蒙特卡洛方法 - 图111" /> 计算反函数 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/9635726643d55ec766475654f84be5ee.svg" alt="一、蒙特卡洛方法 - 图112" /> 。</li></ul><p>如果累计分布函数无法计算，或者反函数难以求解，则该方法无法进行。</p></li><li><p>对于复杂的概率分布 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/60f872d1abdb9a2eb5916cb492bc3dfe.svg" alt="一、蒙特卡洛方法 - 图113" /> ，难以通过均匀分布来实现采样。此时可以使用<code>接受-拒绝采样</code> 策略。</p><ul><li><p>首先选定一个容易采样的概率分布 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/7bc4e5f344bb58eddf46088a242fc295.svg" alt="一、蒙特卡洛方法 - 图114" /> ，选择一个常数 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/cf64c0c1f5987a82e92404e718d70cb8.svg" alt="一、蒙特卡洛方法 - 图115" /> ，使得在定义域的所有位置都满足 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/b1d49488cb8688ab6bb5f311c3c565ca.svg" alt="一、蒙特卡洛方法 - 图116" /> 。</p></li><li><p>然后根据概率分布 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/7bc4e5f344bb58eddf46088a242fc295.svg" alt="一、蒙特卡洛方法 - 图117" /> 随机生成一个样本 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/bc13fa362c1eda7638706326290a374f.svg" alt="一、蒙特卡洛方法 - 图118" /> 。</p></li><li><p>计算 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/8375346da2f182972016d5a5eb694173.svg" alt="一、蒙特卡洛方法 - 图119" /> ，以概率 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/ea3b0d2a7bdd8004ee27c67164fc9e63.svg" alt="一、蒙特卡洛方法 - 图120" /> 接受该样本。</p><p>具体做法是：根据均匀分布 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/c19ed7bc9e86b6d27dce2fa2f7f5aff1.svg" alt="一、蒙特卡洛方法 - 图121" /> 随机生成一个点 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/69564bff5547e52abdc46058d1cafbee.svg" alt="一、蒙特卡洛方法 - 图122" /> 。如果 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/212231785fb294dec777e4c13826859c.svg" alt="一、蒙特卡洛方法 - 图123" /> ，则接受该样本；否则拒绝该样本。</p><blockquote><p>或者换一个做法：根据均匀分布 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/09340880439be9c5c3d576f93eb06d23.svg" alt="一、蒙特卡洛方法 - 图124" /> 生成一个随机点，如果该点落在灰色区间（<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/0985a5c36e6ced3909f8efecf7ffa074.svg" alt="一、蒙特卡洛方法 - 图125" />）则拒绝该样本；如果该点落在白色区间（<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/fac0e27c7a2781978c9de5620216ff86.svg" alt="一、蒙特卡洛方法 - 图126" />）则接受该样本。</p></blockquote></li></ul><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/9bf90795efc813654702526d40586d9f.png" alt="一、蒙特卡洛方法 - 图127" /></p></li><li><p><code>接受-拒绝采样</code> 在高维的情况下会出现两个问题：</p><ul><li>合适的 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/de2db42772dfbc6984a70a62e45e1540.svg" alt="一、蒙特卡洛方法 - 图128" /> 分布比较难以找到。</li><li>难以确定一个合理的 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/cf64c0c1f5987a82e92404e718d70cb8.svg" alt="一、蒙特卡洛方法 - 图129" /> 值。</li></ul><p>这两个问题会导致拒绝率很高，无效计算太多。</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能/数学基础/蒙特卡洛方法与MCMC采样-CH3-MCMC采样</title>
      <link href="/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%96%B9%E6%B3%95%E4%B8%8EMCMC%E9%87%87%E6%A0%B7-CH3-MCMC%E9%87%87%E6%A0%B7/"/>
      <url>/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%96%B9%E6%B3%95%E4%B8%8EMCMC%E9%87%87%E6%A0%B7-CH3-MCMC%E9%87%87%E6%A0%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="第-3-章-mcmc-采样"><a class="markdownIt-Anchor" href="#第-3-章-mcmc-采样"></a> 第 3 章 MCMC 采样</h1><ol><li><p>概率图模型中最常用的采样技术是马尔可夫链蒙特卡罗方法<code>Markov Chain Monte Carlo:MCMC</code>。</p><p>给定连续随机变量 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/7b7e549236c5a93ad790c4035ca1ea0b.svg" alt="三、MCMC 采样 - 图1" /> 的概率密度函数 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/659983463fe5543eecdc2b2bfb36dd94.svg" alt="三、MCMC 采样 - 图2" /> ，则 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/64869188e3bcd72f23d4e019e2e95779.svg" alt="三、MCMC 采样 - 图3" /> 在区间 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/e5cb751244cda4053910bfba44a94f2e.svg" alt="三、MCMC 采样 - 图4" /> 中的概率可以计算为：</p><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/dde114182065de390266b0d0538d99df.svg" alt="三、MCMC 采样 - 图5" /></p><p>如果函数 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/817eb36e33889c45b16c6fa389d4971b.svg" alt="三、MCMC 采样 - 图6" />， 则可以计算 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/cf0564e1d1e786d1588e50379f21c915.svg" alt="三、MCMC 采样 - 图7" /> 的期望：<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/f76574ae45d61e1f071db56a79364ac4.svg" alt="三、MCMC 采样 - 图8" /> 。</p><ul><li><p>如果 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/64869188e3bcd72f23d4e019e2e95779.svg" alt="三、MCMC 采样 - 图9" /> 不是一个单变量，而是一个高维的多元变量 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/9bba327e22b00b0274ff66b08ebf7c7c.svg" alt="三、MCMC 采样 - 图10" /> ，且服从一个非常复杂的分布，则对于上式的求积分非常困难。为此，<code>MCMC</code>先构造出服从 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/fb982fc2f2284edfc1ef638836cc2a1f.svg" alt="三、MCMC 采样 - 图11" /> 分布的独立同分布随机变量 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/2228faa1cd03da0a5758fe98536450be.svg" alt="三、MCMC 采样 - 图12" /> ， 再得到 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/956ad1a6bdda8e3b64a9e5de603e2718.svg" alt="三、MCMC 采样 - 图13" /> 的无偏估计：</p><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/5bc81af682accfac79a15dffb059d179.svg" alt="三、MCMC 采样 - 图14" /></p></li><li><p>如果概率密度函数 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/a32482e301c82b573d21f0270d7cf9b1.svg" alt="三、MCMC 采样 - 图15" /> 也很复杂，则构造服从 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/fb982fc2f2284edfc1ef638836cc2a1f.svg" alt="三、MCMC 采样 - 图16" /> 分布的独立同分布随机变量也很困难。<code>MCMC</code> 方法就是通过构造平稳分布为 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/a32482e301c82b573d21f0270d7cf9b1.svg" alt="三、MCMC 采样 - 图17" /> 的马尔可夫链来产生样本。</p></li></ul></li></ol><h2 id="31-mcmc-算法"><a class="markdownIt-Anchor" href="#31-mcmc-算法"></a> 3.1 MCMC 算法</h2><ol><li><p><code>MCMC</code> 算法的基本思想是：先设法构造一条马尔可夫链，使其收敛到平稳分布恰好为 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/fb982fc2f2284edfc1ef638836cc2a1f.svg" alt="三、MCMC 采样 - 图18" /> 。然后通过这条马尔可夫链来产生符合 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/fb982fc2f2284edfc1ef638836cc2a1f.svg" alt="三、MCMC 采样 - 图19" /> 分布的样本。最后通过这些样本来进行估计。</p><p>这里马尔可夫链的构造至关重要，不同的构造方法将产生不同的<code>MCMC</code>算法。<code>Metropolis-Hastings:MH</code>算法是<code>MCMC</code>的重要代表。</p></li><li><p>假设已经提供了一条马尔可夫链，其转移矩阵为 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/be77f1a4cb3a358f5664b32a1c68f31b.svg" alt="三、MCMC 采样 - 图20" /> 。目标是另一个马尔科夫链，使转移矩阵为 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/7898ba6178e6a0c4a55151b3015356ef.svg" alt="三、MCMC 采样 - 图21" /> 、平稳分布是 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/fb982fc2f2284edfc1ef638836cc2a1f.svg" alt="三、MCMC 采样 - 图22" /> 。</p><p>通常 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/bf13dd4d9bc6f23adb8a66bd395f6302.svg" alt="三、MCMC 采样 - 图23" /> ，即 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/fb982fc2f2284edfc1ef638836cc2a1f.svg" alt="三、MCMC 采样 - 图24" /> 并不满足细致平稳条件不成立。但是可以改造已有的马尔可夫链，使得细致平稳条件成立。</p><p>引入一个函数 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/78c2121d42c471fdd24619db737357fb.svg" alt="三、MCMC 采样 - 图25" /> ，使其满足：<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/f248770abfd3609f8d341ea056340011.svg" alt="三、MCMC 采样 - 图26" /> 。如：取 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/95f3edac10508c397e6c81729cf3191b.svg" alt="三、MCMC 采样 - 图27" /> ，则有：</p><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/e45c1f5b3eb0d276af3425ef00892ff0.svg" alt="三、MCMC 采样 - 图28" /></p><p>令： <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/61ebfb09d6b87326d39c09f01d386052.svg" alt="三、MCMC 采样 - 图29" /> ，则有 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/680b487fb4739210efa61c990640390b.svg" alt="三、MCMC 采样 - 图30" /> 。其中 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/8415b605ea4d7bfb28f1cd930fb9e237.svg" alt="三、MCMC 采样 - 图31" /> 构成了转移矩阵 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/cfd0ff025484f9c77a1cac054c0f9ce3.svg" alt="三、MCMC 采样 - 图32" /> 。而 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/cfd0ff025484f9c77a1cac054c0f9ce3.svg" alt="三、MCMC 采样 - 图33" /> 恰好满足细致平稳条件，因此它对应的马尔可夫链的平稳分布就是 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/fb982fc2f2284edfc1ef638836cc2a1f.svg" alt="三、MCMC 采样 - 图34" /> 。</p></li><li><p>在改造 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/be77f1a4cb3a358f5664b32a1c68f31b.svg" alt="三、MCMC 采样 - 图35" /> 的过程中引入的 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/78c2121d42c471fdd24619db737357fb.svg" alt="三、MCMC 采样 - 图36" /> 称作接受率。其物理意义为：在原来的马尔可夫链上，从状态 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/fd3c8130f3e375a09930923dd0cc2860.svg" alt="三、MCMC 采样 - 图37" /> 以 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/7bd06e55bffa32719bd389fd5cc29829.svg" alt="三、MCMC 采样 - 图38" /> 的概率跳转到状态 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/5c38684bb6cad4ba739a4bae3ca0619f.svg" alt="三、MCMC 采样 - 图39" /> 的时候，以 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/78c2121d42c471fdd24619db737357fb.svg" alt="三、MCMC 采样 - 图40" /> 的概率接受这个转移。</p><ul><li><p>如果接受率 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/78c2121d42c471fdd24619db737357fb.svg" alt="三、MCMC 采样 - 图41" /> 太小，则改造马尔可夫链过程中非常容易原地踏步，拒绝大量的跳转。这样使得马尔可夫链遍历所有的状态空间需要花费太长的时间，收敛到平稳分布 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/fb982fc2f2284edfc1ef638836cc2a1f.svg" alt="三、MCMC 采样 - 图42" /> 的速度太慢。</p></li><li><p>根据推导 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/95f3edac10508c397e6c81729cf3191b.svg" alt="三、MCMC 采样 - 图43" /> ，如果将系数从 1 提高到 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/292a3602265f7bf63c8f9b024d139a72.svg" alt="三、MCMC 采样 - 图44" /> ，则有：</p><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/b7d2ffbd06173524c7170f2349e2fbb6.svg" alt="三、MCMC 采样 - 图45" /></p><p>于是： <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/abac5c183b0c4fbc6b22bc51b90c2b02.svg" alt="三、MCMC 采样 - 图46" /> 。因此，即使提高了接受率，细致平稳条件仍然成立。</p></li></ul></li><li><p>将 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/1b86ca6775bb24b934031fea87fb07a8.svg" alt="三、MCMC 采样 - 图47" /> 同比例放大，取：<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/1882bef0e4c5ced6ac2c3451815a462f.svg" alt="三、MCMC 采样 - 图48" /> 。</p><ul><li>当 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/02fff0820403ad99cd3229ae08dd41f7.svg" alt="三、MCMC 采样 - 图49" /> 时： <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/d3302ca5ccdc6ce217e17be82285ae2c.svg" alt="三、MCMC 采样 - 图50" />，此时满足细致平稳条件。</li><li>当 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/1e2b4afdb8e2f666623942004dbca240.svg" alt="三、MCMC 采样 - 图51" /> 时： <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/355b62ad465a9938afff31187b431906.svg" alt="三、MCMC 采样 - 图52" />，此时满足细致平稳条件。</li><li>当 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/062cf679b18b8527e7d7a8b597820337.svg" alt="三、MCMC 采样 - 图53" /> 时： <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/9e6787751ce8f60f582e73bb61b9e28d.svg" alt="三、MCMC 采样 - 图54" />，此时满足细致平稳条件。</li></ul></li><li><p><code>MH</code> 算法：</p><ul><li><p>输入：</p><ul><li>先验转移概率矩阵 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/be77f1a4cb3a358f5664b32a1c68f31b.svg" alt="三、MCMC 采样 - 图55" /></li><li>目标分布 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/fb982fc2f2284edfc1ef638836cc2a1f.svg" alt="三、MCMC 采样 - 图56" /></li></ul></li><li><p>输出： 采样出的一个状态序列 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/521ad560949f9b5f23dff81521c7c7b2.svg" alt="三、MCMC 采样 - 图57" /></p></li><li><p>算法：</p><ul><li><p>初始化 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/772667393aa88b9a70e943ca5bb3bb0b.svg" alt="三、MCMC 采样 - 图58" /></p></li><li><p>对 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/7c30f13750139769dccf32d2232c75dd.svg" alt="三、MCMC 采样 - 图59" /> 执行迭代。迭代步骤如下：</p><ul><li><p>根据 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/16fbe96c7e35175dd1f15691e8001d8b.svg" alt="三、MCMC 采样 - 图60" /> 采样出候选样本 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/8a99537927ba4c4ab87cd9d3533f26f4.svg" alt="三、MCMC 采样 - 图61" /> ，其中 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/9290ce896c096a78d5ab48e02a8950cf.svg" alt="三、MCMC 采样 - 图62" /> 为转移概率函数。</p></li><li><p>计算 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/50f10a0ef56aa73824665983f4abab1f.svg" alt="三、MCMC 采样 - 图63" /> ：</p><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/4b91350503593897e585c53e6f23b011.svg" alt="三、MCMC 采样 - 图64" /></p></li><li><p>根据均匀分布从 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/f87cdbc9b9ace278d14378ea8988344c.svg" alt="三、MCMC 采样 - 图65" /> 内采样出阈值 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/b9b20c381a1979ee2518b054d25f8a2b.svg" alt="三、MCMC 采样 - 图66" />，如果 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/35f3889df3dfaca7e8cd539f06ce5e86.svg" alt="三、MCMC 采样 - 图67" /> ，则接受 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/87ca37f8923a11c1a15f9ffd409522d0.svg" alt="三、MCMC 采样 - 图68" />， 即 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/7efd7efec746504c7a3b0ddcf2ab17fd.svg" alt="三、MCMC 采样 - 图69" /> 。否则拒绝 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/87ca37f8923a11c1a15f9ffd409522d0.svg" alt="三、MCMC 采样 - 图70" /> ， 即 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/af516b3bd9118ab301f5db23ad31fc59.svg" alt="三、MCMC 采样 - 图71" /> 。</p></li></ul></li><li><p>返回采样得到的序列 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/521ad560949f9b5f23dff81521c7c7b2.svg" alt="三、MCMC 采样 - 图72" /></p></li></ul></li></ul><blockquote><p>注意：返回的序列中，只有充分大的 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/5a2e98373b3730e19f9172f7df390432.svg" alt="三、MCMC 采样 - 图73" /> 之后的序列 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/d693f1dcf7aa7c95a54df1e74e9ab486.svg" alt="三、MCMC 采样 - 图74" /> 才是服从 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/fb982fc2f2284edfc1ef638836cc2a1f.svg" alt="三、MCMC 采样 - 图75" /> 分布的采样序列。</p></blockquote></li></ol><h2 id="32-gibbs-算法"><a class="markdownIt-Anchor" href="#32-gibbs-算法"></a> 3.2 Gibbs 算法</h2><ol><li><p><code>MH</code>算法不仅可以应用于一维空间的采样，也适合高维空间的采样。</p><p>对于高维的情况，由于接受率 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/f97c78bc56af5fb148861bec6a1b78f9.svg" alt="三、MCMC 采样 - 图76" /> 的存在（通常 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/9b3bb562d12b0e2d1e2223359fdebbe6.svg" alt="三、MCMC 采样 - 图77" />），<code>MH</code>算法的效率通常不够高，此时一般使用 <code>Gibbs</code> 采样算法。</p></li><li><p>考虑二维的情形：假设有概率分布 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/68563ea9f46468b614a18e2f04205b2e.svg" alt="三、MCMC 采样 - 图78" /> ，考察状态空间上 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/4694daf03a4da5d21ae34d2b48f67d66.svg" alt="三、MCMC 采样 - 图79" /> 坐标相同的两个点 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/f1952662c50ff188db3de62ef0857fcd.svg" alt="三、MCMC 采样 - 图80" /> ，可以证明有：</p><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/533dfec6101bac76f7624dc5699ffaad.svg" alt="三、MCMC 采样 - 图81" /></p><p>于是 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/f0f51920ff4a431433685811eb14a635.svg" alt="三、MCMC 采样 - 图82" /> 。则在 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/6e2f90c65ed393899b13b0b4996d1f08.svg" alt="三、MCMC 采样 - 图83" /> 这条平行于 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/80f6114cfae9472d4a1bd5758aa0927b.svg" alt="三、MCMC 采样 - 图84" /> 轴的直线上，如果使用条件分布 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/b3515a4bb53d5931d5aeda237148b5a6.svg" alt="三、MCMC 采样 - 图85" /> 作为直线上任意两点之间的转移概率，则这两点之间的转移满足细致平稳条件。</p><p>同理：考察 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/80f6114cfae9472d4a1bd5758aa0927b.svg" alt="三、MCMC 采样 - 图86" /> 坐标相同的两个点 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/be0746db36714017a1acade5823f999c.svg" alt="三、MCMC 采样 - 图87" /> ， 有 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/c18fa937c627d73bb3488b4096292dc1.svg" alt="三、MCMC 采样 - 图88" /> 。在 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/9d4e93781913a13b324cf3499921f471.svg" alt="三、MCMC 采样 - 图89" /> 这条平行于 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/4694daf03a4da5d21ae34d2b48f67d66.svg" alt="三、MCMC 采样 - 图90" /> 轴的直线上，如果使用条件分布 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/24003691f64f4b18fa23dd9e5a7c2d87.svg" alt="三、MCMC 采样 - 图91" /> 作为直线上任意两点之间的转移概率，则这两点之间的转移满足细致平稳条件。</p><p>可以构造状态空间上任意两点之间的转移概率矩阵 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/be77f1a4cb3a358f5664b32a1c68f31b.svg" alt="三、MCMC 采样 - 图92" />： 对于任意两点 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/76412e18bad10591298b37ae55e626ff.svg" alt="三、MCMC 采样 - 图93" />， 令从 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/77f44fbef7a79938cd8aa705ef65a8b3.svg" alt="三、MCMC 采样 - 图94" /> 转移到 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/f6e4c28657a009a9df9ee2e0dbaf1610.svg" alt="三、MCMC 采样 - 图95" /> 的概率为 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/67a5590c499810886c6143fff337c22b.svg" alt="三、MCMC 采样 - 图96" />：</p><ul><li>如果 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/289ab08ea52ae9d0d9e3e7afac581aed.svg" alt="三、MCMC 采样 - 图97" /> ，则 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/b3b2a6436547bc5eeb6dec043200c08d.svg" alt="三、MCMC 采样 - 图98" /> 。</li><li>如果 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/44d269c23c02489c01ba9b35f53995d6.svg" alt="三、MCMC 采样 - 图99" /> ，则 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/71bef18b20d92d6286ddba1e4794a28a.svg" alt="三、MCMC 采样 - 图100" /> 。</li><li>否则 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/3b2c4595a9e2ea3b9c681733a6114e0c.svg" alt="三、MCMC 采样 - 图101" /> 。</li></ul><p>采用该转移矩阵 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/be77f1a4cb3a358f5664b32a1c68f31b.svg" alt="三、MCMC 采样 - 图102" /> ，可以证明：对于状态空间中任意两点 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/bb9c4d11cac213397fd476f67e00c484.svg" alt="三、MCMC 采样 - 图103" />，都满足细致平稳条件：</p><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/1cfc5483468ba824ea88a52fda00ee74.svg" alt="三、MCMC 采样 - 图104" /></p><p>于是这个二维状态空间上的马尔可夫链将收敛到平稳分布 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/68563ea9f46468b614a18e2f04205b2e.svg" alt="三、MCMC 采样 - 图105" /> ，这就是吉布斯采样的原理。</p></li><li><p><code>Gibbs</code> 算法：</p><ul><li><p>输入：目标分布 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/1f2f975e206c51b6517be55e2a9b6870.svg" alt="三、MCMC 采样 - 图106" /> ，其中 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/dd855f92b018a1e6adec6b03c143a35f.svg" alt="三、MCMC 采样 - 图107" /></p></li><li><p>输出： 采样出的一个状态序列 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/f67ce75c727782cc6dd764ccf098fa0e.svg" alt="三、MCMC 采样 - 图108" /></p></li><li><p>算法步骤：</p><ul><li><p>初始化：随机初始化 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/7ba3713e9494ea3e5b2eede827597a2f.svg" alt="三、MCMC 采样 - 图109" /> 。</p></li><li><p>执行迭代，迭代步骤如下：</p><ul><li><p>随机或者以一定次序遍历索引 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/6d8eadcf447e3735ca7ab18bcebdebd5.svg" alt="三、MCMC 采样 - 图110" /> 。遍历过程为（设当前索引为 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/fd3c8130f3e375a09930923dd0cc2860.svg" alt="三、MCMC 采样 - 图111" /> ）：</p><ul><li><p>将 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/edf0833050dfc6c976a2bedeb2c332ef.svg" alt="三、MCMC 采样 - 图112" /> 保持不变，计算条件概率： <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/4a6840bbea9540dda0d1ad0132909f7f.svg" alt="三、MCMC 采样 - 图113" /> 。</p><blockquote><p>该条件概率就是状态转移概率 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/67a5590c499810886c6143fff337c22b.svg" alt="三、MCMC 采样 - 图114" /></p></blockquote></li><li><p>根据条件概率 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/4a6840bbea9540dda0d1ad0132909f7f.svg" alt="三、MCMC 采样 - 图115" /> 对分量 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/a1acf7c44680b51ed12b2169d6768e51.svg" alt="三、MCMC 采样 - 图116" /> 进行采样，假设采样结果为 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/cc5fcd549ed60029670c897bee154d39.svg" alt="三、MCMC 采样 - 图117" /> ，则获得新样本 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/54aecd29d54c5dcc2ccdd6efb1e63ada.svg" alt="三、MCMC 采样 - 图118" /> 。</p></li><li><p>令 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/4913ed05907f07aa2a3c621bd06e249e.svg" alt="三、MCMC 采样 - 图119" />，继续遍历。</p></li></ul></li></ul></li><li><p>最终返回一个状态序列 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/f67ce75c727782cc6dd764ccf098fa0e.svg" alt="三、MCMC 采样 - 图120" /> 。</p></li></ul></li></ul></li><li><p>吉布斯采样<code>Gibbs sampling</code> 有时被视作<code>MH</code>算法的特例，它也使用马尔可夫链获取样本。</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能/数学基础/线性代数-CH3-矩阵运算</title>
      <link href="/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-CH3-%E7%9F%A9%E9%98%B5%E8%BF%90%E7%AE%97/"/>
      <url>/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-CH3-%E7%9F%A9%E9%98%B5%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h1 id="第-3-章-矩阵运算"><a class="markdownIt-Anchor" href="#第-3-章-矩阵运算"></a> 第 3 章 矩阵运算</h1><ol><li><p>给定两个矩阵 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619113441.svg" alt="三、矩阵运算 - 图1" /> ，定义：</p><ul><li><p>阿达马积<code>Hadamard product</code>（又称作逐元素积）：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619115324.svg" alt="三、矩阵运算 - 图2" /></p></li><li><p>克罗内积<code>Kronnecker product</code>：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619115335.svg" alt="三、矩阵运算 - 图3" /></p></li></ul></li><li><p>设 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619115342.svg" alt="三、矩阵运算 - 图4" /> 为 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/4cecfcf39d53138c459300dff2fd50a3.svg" alt="三、矩阵运算 - 图5" /> 阶向量， <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619115345.svg" alt="三、矩阵运算 - 图6" /> 为 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/4cecfcf39d53138c459300dff2fd50a3.svg" alt="三、矩阵运算 - 图7" /> 阶方阵，则有：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619115349.svg" alt="三、矩阵运算 - 图8" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619115354.svg" alt="三、矩阵运算 - 图9" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619115357.svg" alt="三、矩阵运算 - 图10" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619115400.svg" alt="三、矩阵运算 - 图11" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619115403.svg" alt="三、矩阵运算 - 图12" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619115406.svg" alt="三、矩阵运算 - 图13" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619115409.svg" alt="三、矩阵运算 - 图14" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619115413.svg" alt="三、矩阵运算 - 图15" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619115417.svg" alt="三、矩阵运算 - 图16" /></p></li><li><p>如果 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619150104.svg" alt="三、矩阵运算 - 图17" /> 是一元函数，则：</p><ul><li><p>其逐元向量函数为：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619115421.svg" alt="三、矩阵运算 - 图18" /> 。</p></li><li><p>其逐矩阵函数为：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619115424.svg" alt="三、矩阵运算 - 图19" /></p></li><li><p>其逐元导数分别为：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619115427.svg" alt="三、矩阵运算 - 图20" /></p></li></ul></li><li><p>各种类型的偏导数：</p><ul><li><p>标量对标量的偏导数： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619115431.svg" alt="三、矩阵运算 - 图21" /> 。</p></li><li><p>标量对向量（<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619115447.svg" alt="三、矩阵运算 - 图22" /> 维向量）的偏导数 ：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619115434.svg" alt="三、矩阵运算 - 图23" /> 。</p></li><li><p>标量对矩阵(<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619115458.svg" alt="三、矩阵运算 - 图24" /> 阶矩阵)的偏导数：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619115454.svg" alt="三、矩阵运算 - 图25" /></p></li><li><p>向量（<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619115505.svg" alt="三、矩阵运算 - 图26" /> 维向量）对标量的偏导数： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619115508.svg" alt="三、矩阵运算 - 图27" /> 。</p></li><li><p>向量（<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619150129.svg" alt="三、矩阵运算 - 图28" /> 维向量）对向量 (<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619150134.svg" alt="三、矩阵运算 - 图29" /> 维向量) 的偏导数（雅可比矩阵，行优先）</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619115514.svg" alt="三、矩阵运算 - 图30" /></p><p>如果为列优先，则为上面矩阵的转置。</p></li><li><p>矩阵(<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619150142.svg" alt="三、矩阵运算 - 图31" /> 阶矩阵)对标量的偏导数</p></li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619115518.svg" alt="三、矩阵运算 - 图32" /></p></li><li><p>对于矩阵的迹，有下列偏导数成立：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619150152.svg" alt="三、矩阵运算 - 图33" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619150155.svg" alt="三、矩阵运算 - 图34" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619150159.svg" alt="三、矩阵运算 - 图35" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619150204.svg" alt="三、矩阵运算 - 图36" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619150207.svg" alt="三、矩阵运算 - 图37" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619150211.svg" alt="三、矩阵运算 - 图38" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619150213.svg" alt="三、矩阵运算 - 图39" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619150216.svg" alt="三、矩阵运算 - 图40" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619150219.svg" alt="三、矩阵运算 - 图41" /></p></li><li><p>假设 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619150223.svg" alt="三、矩阵运算 - 图42" /> 是关于 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619150226.svg" alt="三、矩阵运算 - 图43" /> 的矩阵值函数（<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619150229.svg" alt="三、矩阵运算 - 图44" />），且 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619150232.svg" alt="三、矩阵运算 - 图45" /> 是关于 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619150235.svg" alt="三、矩阵运算 - 图46" /> 的实值函数（<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619150238.svg" alt="三、矩阵运算 - 图47" />），则下面链式法则成立：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619150242.svg" alt="三、矩阵运算 - 图48" /></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能/数学基础/线性代数-CH2-向量操作</title>
      <link href="/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-CH2-%E5%90%91%E9%87%8F%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-CH2-%E5%90%91%E9%87%8F%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="第-2-章-向量操作"><a class="markdownIt-Anchor" href="#第-2-章-向量操作"></a> 第 2 章 向量操作</h1><h2 id="21-线性相关"><a class="markdownIt-Anchor" href="#21-线性相关"></a> 2.1 线性相关</h2><p>定义i：一组向量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619112248.svg" alt="二、向量操作 - 图1" /> 是线性相关的：指存在一组不全为零的实数 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619112258.svg" alt="二、向量操作 - 图2" />，使得： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619112304.svg" alt="二、向量操作 - 图3" /> 。</p><h2 id="22-线性无关"><a class="markdownIt-Anchor" href="#22-线性无关"></a> 2.2 线性无关</h2><p>定义：一组向量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619112331.svg" alt="二、向量操作 - 图4" /> 是线性无关的：当且仅当 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619112338.svg" alt="二、向量操作 - 图5" /> 时，才有：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619112347.svg" alt="二、向量操作 - 图6" /> 。</p><h2 id="23-维数"><a class="markdownIt-Anchor" href="#23-维数"></a> 2.3 维数</h2><p>一个向量空间所包含的最大线性无关向量的数目，称作该向量空间的维数。</p><h2 id="24-三维向量"><a class="markdownIt-Anchor" href="#24-三维向量"></a> 2.4 三维向量</h2><h3 id="1-点积"><a class="markdownIt-Anchor" href="#1-点积"></a> ① 点积</h3><p>三维向量的点积：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619112558.svg" alt="二、向量操作 - 图7" /> 。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619112604.png" alt="二、向量操作 - 图8" /></p><h3 id="2-叉积"><a class="markdownIt-Anchor" href="#2-叉积"></a> ② 叉积</h3><p>三维向量的叉积：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619112806.svg" alt="二、向量操作 - 图9" /></p><p>其中 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619112815.svg" alt="二、向量操作 - 图10" /> 分别为 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619112821.svg" alt="二、向量操作 - 图11" /> 轴的单位向量。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619112813.svg" alt="二、向量操作 - 图12" /></p><ul><li><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619112901.svg" alt="二、向量操作 - 图13" /> 和 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619112908.svg" alt="二、向量操作 - 图14" /> 的叉积垂直于 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619112911.svg" alt="二、向量操作 - 图15" /> 构成的平面，其方向符合右手规则。</li><li>叉积的模等于 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619112919.svg" alt="二、向量操作 - 图16" /> 构成的平行四边形的面积</li><li><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619112925.svg" alt="二、向量操作 - 图17" /></li><li><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619112943.svg" alt="二、向量操作 - 图18" /></li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619112947.png" alt="cross" /></p><h3 id="3-混合积"><a class="markdownIt-Anchor" href="#3-混合积"></a> ③ 混合积</h3><p>三维向量的混合积：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619113025.svg" alt="二、向量操作 - 图20" /></p><p>其物理意义为：以 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619113028.svg" alt="二、向量操作 - 图21" /> 为三个棱边所围成的平行六面体的体积。 当 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619113031.svg" alt="二、向量操作 - 图22" /> 构成右手系时，该平行六面体的体积为正号。</p><h2 id="25-并矢"><a class="markdownIt-Anchor" href="#25-并矢"></a> 2.5 并矢</h2><p>两个向量的并矢：给定两个向量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619113104.svg" alt="二、向量操作 - 图23" /> ，则向量的并矢记作：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619113118.svg" alt="二、向量操作 - 图24" /></p><p>也记作 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619113122.svg" alt="二、向量操作 - 图25" /> 或者 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619113126.svg" alt="二、向量操作 - 图26" />。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能/数学基础/线性代数-CH4-特殊函数</title>
      <link href="/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-CH4-%E7%89%B9%E6%AE%8A%E5%87%BD%E6%95%B0/"/>
      <url>/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-CH4-%E7%89%B9%E6%AE%8A%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="第-4-章-特殊函数"><a class="markdownIt-Anchor" href="#第-4-章-特殊函数"></a> 第 4 章 特殊函数</h1><ol><li>这里给出机器学习中用到的一些特殊函数。</li></ol><h2 id="41-sigmoid-函数"><a class="markdownIt-Anchor" href="#41-sigmoid-函数"></a> 4.1 sigmoid 函数</h2><ol><li><p><code>sigmoid</code>函数：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145648.svg" alt="四、特殊函数 - 图1" /></p><ul><li>该函数可以用于生成二项分布的 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145652.svg" alt="四、特殊函数 - 图2" /> 参数。</li><li>当 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145657.svg" alt="四、特殊函数 - 图3" /> 很大或者很小时，该函数处于饱和状态。此时函数的曲线非常平坦，并且自变量的一个较大的变化只能带来函数值的一个微小的变化，即：导数很小。</li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145706.png" alt="四、特殊函数 - 图4" /></p></li></ol><h2 id="42-softplus-函数"><a class="markdownIt-Anchor" href="#42-softplus-函数"></a> 4.2 softplus 函数</h2><ol><li><p><code>softplus</code>函数：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145719.svg" alt="四、特殊函数 - 图5" /> 。</p><ul><li>该函数可以生成正态分布的 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145724.svg" alt="四、特殊函数 - 图6" /> 参数。</li><li>它之所以称作<code>softplus</code>，因为它是下面函数的一个光滑逼近：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145728.svg" alt="四、特殊函数 - 图7" /> 。</li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145736.png" alt="四、特殊函数 - 图8" /></p></li><li><p>如果定义两个函数：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145746.svg" alt="四、特殊函数 - 图9" /></p><p>则它们分布获取了 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145749.svg" alt="四、特殊函数 - 图10" /> 的正部分和负部分。</p><p>根据定义有：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145753.svg" alt="四、特殊函数 - 图11" /> 。而 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145757.svg" alt="四、特殊函数 - 图12" /> 逼近的是 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145800.svg" alt="四、特殊函数 - 图13" />， <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145802.svg" alt="四、特殊函数 - 图14" /> 逼近的是 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145805.svg" alt="四、特殊函数 - 图15" />，于是有：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145809.svg" alt="四、特殊函数 - 图16" /></p></li><li><p><code>sigmoid</code>和<code>softplus</code>函数的性质：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145813.svg" alt="四、特殊函数 - 图17" /></p><p>其中 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145818.svg" alt="四、特殊函数 - 图18" /> 为反函数。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145821.svg" alt="四、特殊函数 - 图19" /> 也称作<code>logit</code>函数。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145828.png" alt="四、特殊函数 - 图20" /></p></li></ol><h2 id="43-伽马函数"><a class="markdownIt-Anchor" href="#43-伽马函数"></a> 4.3 伽马函数</h2><ol><li><p>伽马函数定义为：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145904.svg" alt="四、特殊函数 - 图21" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145907.jpeg" alt="四、特殊函数 - 图22" /></p><p>性质为：</p><ul><li><p>对于正整数 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145912.svg" alt="四、特殊函数 - 图23" /> 有： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145915.svg" alt="四、特殊函数 - 图24" /> 。</p></li><li><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145917.svg" alt="四、特殊函数 - 图25" /> ，因此伽马函数是阶乘在实数域上的扩展。</p></li><li><p>与贝塔函数的关系：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145922.svg" alt="四、特殊函数 - 图26" /></p></li><li><p>对于 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145925.svg" alt="四、特殊函数 - 图27" /> 有：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145928.svg" alt="四、特殊函数 - 图28" /></p><p>则可以推导出重要公式： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145931.svg" alt="四、特殊函数 - 图29" /> 。</p></li><li><p>对于 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145934.svg" alt="四、特殊函数 - 图30" />，伽马函数是严格凹函数。</p></li></ul></li><li><p>当 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145938.svg" alt="四、特殊函数 - 图31" /> 足够大时，可以用<code>Stirling</code> 公式来计算<code>Gamma</code>函数值：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145942.svg" alt="四、特殊函数 - 图32" /> 。</p></li></ol><h2 id="44-贝塔函数"><a class="markdownIt-Anchor" href="#44-贝塔函数"></a> 4.4 贝塔函数</h2><ol><li><p>对于任意实数 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145946.svg" alt="四、特殊函数 - 图33" /> ，定义贝塔函数：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145949.svg" alt="四、特殊函数 - 图34" /></p><p>其它形式的定义：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145953.svg" alt="四、特殊函数 - 图35" /></p></li><li><p>性质：</p><ul><li><p>连续性：贝塔函数在定义域 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145957.svg" alt="四、特殊函数 - 图36" /> 内连续。</p></li><li><p>对称性：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619150001.svg" alt="四、特殊函数 - 图37" /> 。</p></li><li><p>递个公式：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619150004.svg" alt="四、特殊函数 - 图38" /></p></li><li><p>当 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619150007.svg" alt="四、特殊函数 - 图39" /> 较大时，有近似公式：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619150011.svg" alt="四、特殊函数 - 图40" /></p></li><li><p>与伽马函数关系：</p><ul><li><p>对于任意正实数 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619150014.svg" alt="四、特殊函数 - 图41" /> ，有：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619150018.svg" alt="四、特殊函数 - 图42" /></p></li><li><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619150021.svg" alt="四、特殊函数 - 图43" /> 。</p></li></ul></li></ul></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能/数学基础/概率论-CH7-其他</title>
      <link href="/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%A6%82%E7%8E%87%E8%AE%BA-CH7-%E5%85%B6%E4%BB%96/"/>
      <url>/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%A6%82%E7%8E%87%E8%AE%BA-CH7-%E5%85%B6%E4%BB%96/</url>
      
        <content type="html"><![CDATA[<h1 id="第-7-章-其它"><a class="markdownIt-Anchor" href="#第-7-章-其它"></a> 第 7 章 其它</h1><h2 id="71-概率分布表示"><a class="markdownIt-Anchor" href="#71-概率分布表示"></a> 7.1 概率分布表示</h2><p>假设随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619124557.svg" alt="八、其它 - 图1" /> 满足 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619124601.svg" alt="八、其它 - 图2" />，且函数 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619124607.svg" alt="八、其它 - 图3" /> 满足：处处连续、可导、且存在反函数。 则有：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619124624.svg" alt="八、其它 - 图4" /></p><p>或者等价地（其中 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619124713.svg" alt="八、其它 - 图5" /> 为反函数）：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619124726.svg" alt="八、其它 - 图6" /></p><ul><li><p>如果扩展到高维空间，则有：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619124738.svg" alt="八、其它 - 图7" /></p></li><li><p>并不是 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619124749.svg" alt="八、其它 - 图8" />，这是因为 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619124752.svg" alt="八、其它 - 图9" /> 引起了空间扭曲，从而导致 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619124758.svg" alt="八、其它 - 图10" /> 。</p><p>根据 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619124807.svg" alt="八、其它 - 图11" /> ，求解该方程，即得到上述解。</p></li></ul><h2 id="72-机器学习中不确定性的来源"><a class="markdownIt-Anchor" href="#72-机器学习中不确定性的来源"></a> 7.2 机器学习中不确定性的来源</h2><p>机器学习中不确定性有三个来源：</p><ul><li><p>模型本身固有的随机性。如：量子力学中的粒子动力学方程。</p></li><li><p>不完全的观测。即使是确定性系统，当无法观测所有驱动变量时，结果也是随机的。</p></li><li><p>不完全建模。有时必须放弃一些观测信息。</p><p>如机器人建模中：虽然可以精确观察机器人周围每个对象的位置，但在预测这些对象将来的位置时，对空间进行了离散化。则位置预测将带有不确定性。</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能/数学基础/线性代数-CH1-基本知识</title>
      <link href="/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-CH1-%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/"/>
      <url>/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-CH1-%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="第-1-章-基本知识"><a class="markdownIt-Anchor" href="#第-1-章-基本知识"></a> 第 1 章 基本知识</h1><h2 id="11-向量形式"><a class="markdownIt-Anchor" href="#11-向量形式"></a> 1.1 向量形式</h2><blockquote><p>本人在实际使用时，所有的向量尽量使用列向量的形式，如下：</p></blockquote><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi mathvariant="bold">x</mi><mo>⃗</mo></mover><mo>=</mo><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>x</mi><mi>n</mi></msub><msup><mo stretchy="false">)</mo><mi>T</mi></msup><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mn>1</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mn>2</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mi>n</mi></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\vec{\mathbf{x}}=(x_1,x_2,\ldots,x_n)^T=\begin{bmatrix}x_1\\x_2\\\vdots\\x_n\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72744em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.72744em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathbf">x</span></span></span></span><span style="top:-3.01344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1413309999999999em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:5.459999999999999em;vertical-align:-2.4799999999999995em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.953005em;"><span style="top:-1.3499850000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.5049850000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.1059850000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.7069850000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.953005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4500349999999997em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9799999999999995em;"><span style="top:-5.8275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.6275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.7674999999999996em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-1.5675000000000006em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4799999999999995em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.953005em;"><span style="top:-1.3499850000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.5049850000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.1059850000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.7069850000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.953005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4500349999999997em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><h2 id="12-矩阵表示"><a class="markdownIt-Anchor" href="#12-矩阵表示"></a> 1.2 矩阵表示</h2><blockquote><p>所有的矩阵 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="bold">X</mi><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mi>m</mi><mo>×</mo><mi>n</mi></mrow></msup></mrow><annotation encoding="application/x-tex">\mathbf{X} \in \mathbb{R}^{m \times n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72521em;vertical-align:-0.0391em;"></span><span class="mord"><span class="mord mathbf">X</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></span> 都表示为：</p></blockquote><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="bold">X</mi><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mrow><mn>1</mn><mo separator="true">,</mo><mn>1</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mrow><mn>1</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>…</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mrow><mn>1</mn><mo separator="true">,</mo><mi>n</mi></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mrow><mn>2</mn><mo separator="true">,</mo><mn>1</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mrow><mn>2</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>…</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mrow><mn>2</mn><mo separator="true">,</mo><mi>n</mi></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋱</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mrow><mi>m</mi><mo separator="true">,</mo><mn>1</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mrow><mi>m</mi><mo separator="true">,</mo><mn>2</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>…</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mrow><mi>m</mi><mo separator="true">,</mo><mi>n</mi></mrow></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\mathbf{X}=\begin{bmatrix}x_{1,1} &amp; x_{1,2} &amp; \ldots &amp; x_{1,n}\\x_{2,1} &amp; x_{2,2} &amp; \ldots &amp; x_{2,n}\\\vdots &amp; \vdots &amp; \ddots &amp; \vdots\\x_{m,1} &amp; x_{m,2} &amp; \ldots &amp; x_{m,n}\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68611em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbf">X</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:5.459999999999999em;vertical-align:-2.4799999999999995em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.953005em;"><span style="top:-1.3499850000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.5049850000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.1059850000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.7069850000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.953005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4500349999999997em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9799999999999995em;"><span style="top:-5.8275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.6275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.7674999999999996em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-1.5675000000000006em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4799999999999995em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9799999999999995em;"><span style="top:-5.8275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.6275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.7674999999999996em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-1.5675000000000006em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4799999999999995em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9799999999999995em;"><span style="top:-5.64em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">…</span></span></span><span style="top:-4.44em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">…</span></span></span><span style="top:-2.5799999999999996em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋱</span></span></span><span style="top:-1.3800000000000006em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">…</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4799999999999995em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9799999999999995em;"><span style="top:-5.8275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.6275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.7674999999999996em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-1.5675000000000006em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4799999999999995em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.953005em;"><span style="top:-1.3499850000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.5049850000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.1059850000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.7069850000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.953005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4500349999999997em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>简写为：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><msub><mo stretchy="false">)</mo><mrow><mi>m</mi><mo>×</mo><mi>n</mi></mrow></msub></mrow><annotation encoding="application/x-tex">(x_{i,j})_{m \times n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.25833100000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span> 或者 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mi>m</mi><mo>×</mo><mi>n</mi></mrow></msub></mrow><annotation encoding="application/x-tex">{\begin{bmatrix}{x_{i,j}}\end{bmatrix}}_{m \times n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3080410000000002em;vertical-align:-0.45804100000000003em;"></span><span class="mord"><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">]</span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.00862099999999999em;"><span style="top:-2.30029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.45804100000000003em;"><span></span></span></span></span></span></span></span></span></span></p><h2 id="13-矩阵的-f-范式"><a class="markdownIt-Anchor" href="#13-矩阵的-f-范式"></a> 1.3 矩阵的 F 范式</h2><p>定义：设矩阵 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619111047.svg" alt="一、基本知识 - 图6" />，则其<code>F</code> 范数为：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619111053.svg" alt="一、基本知识 - 图7" /> 。</p><p>它是向量的 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619111058.svg" alt="一、基本知识 - 图8" /> 范数的推广。</p><h2 id="14-矩阵的迹"><a class="markdownIt-Anchor" href="#14-矩阵的迹"></a> 1.4 矩阵的迹</h2><p>定义：设矩阵 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619111357.svg" alt="一、基本知识 - 图9" />，则<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619111501.svg" alt="一、基本知识 - 图10" />的迹为： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619111458.svg" alt="一、基本知识 - 图11" />。</p><p>迹的性质有：</p><ul><li><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619111723.svg" alt="一、基本知识 - 图12" /> 的<code>F</code> 范数等于<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619111725.svg" alt="一、基本知识 - 图13" /> 的迹的平方根：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619111728.svg" alt="一、基本知识 - 图14" /> 。</li><li><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619111731.svg" alt="一、基本知识 - 图15" /> 的迹等于<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619111734.svg" alt="一、基本知识 - 图16" /> 的迹：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619111738.svg" alt="一、基本知识 - 图17" /> 。</li><li>交换律：假设 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619111742.svg" alt="一、基本知识 - 图18" />，则有：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619111746.svg" alt="一、基本知识 - 图19" /> 。</li><li>结合律：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619111804.svg" alt="一、基本知识 - 图20" /> 。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能/数学基础/概率论-CH6-信息论</title>
      <link href="/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%A6%82%E7%8E%87%E8%AE%BA-CH6-%E4%BF%A1%E6%81%AF%E8%AE%BA/"/>
      <url>/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%A6%82%E7%8E%87%E8%AE%BA-CH6-%E4%BF%A1%E6%81%AF%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="第-6-章-信息论"><a class="markdownIt-Anchor" href="#第-6-章-信息论"></a> 第 6 章 信息论</h2><ol><li><p>信息论背后的原理是：从不太可能发生的事件中能学到更多的有用信息。</p><ul><li>发生可能性较大的事件包含较少的信息。</li><li>发生可能性较小的事件包含较多的信息。</li><li>独立事件包含额外的信息 。</li></ul></li><li><p>对于事件 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619125726.svg" alt="七、信息论 - 图1" />，定义自信息<code>self-information</code>为：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144728.svg" alt="七、信息论 - 图2" /> 。</p><p>自信息仅仅处理单个输出，但是如果计算自信息的期望，它就是熵：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144731.svg" alt="七、信息论 - 图3" /></p><p>记作 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144734.svg" alt="七、信息论 - 图4" />。</p><ul><li><p>熵刻画了按照真实分布 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144737.svg" alt="七、信息论 - 图5" /> 来识别一个样本所需要的编码长度的期望（即平均编码长度）。</p><p>如：含有4个字母 <code>(A,B,C,D)</code> 的样本集中，真实分布 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144742.svg" alt="七、信息论 - 图6" />，则只需要1位编码即可识别样本。</p></li><li><p>对于离散型随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144746.svg" alt="七、信息论 - 图7" />，假设其取值集合大小为 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144750.svg" alt="七、信息论 - 图8" />，则可以证明： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144753.svg" alt="七、信息论 - 图9" /> 。</p></li></ul></li><li><p>对于随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144756.svg" alt="七、信息论 - 图10" /> 和 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144800.svg" alt="七、信息论 - 图11" />，条件熵 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144803.svg" alt="七、信息论 - 图12" /> 表示：已知随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144806.svg" alt="七、信息论 - 图13" /> 的条件下，随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144810.svg" alt="七、信息论 - 图14" /> 的不确定性。</p><p>它定义为：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144814.svg" alt="七、信息论 - 图15" /> 给定条件下 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144817.svg" alt="七、信息论 - 图16" /> 的条件概率分布的熵对 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144821.svg" alt="七、信息论 - 图17" /> 的期望：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144824.svg" alt="七、信息论 - 图18" /></p><ul><li><p>对于离散型随机变量，有：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144827.svg" alt="七、信息论 - 图19" /></p></li><li><p>对于连续型随机变量，有：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144830.svg" alt="七、信息论 - 图20" /></p></li></ul></li><li><p>根据定义可以证明：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144834.svg" alt="七、信息论 - 图21" /> 。</p><p>即：描述 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144838.svg" alt="七、信息论 - 图22" /> 和 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144841.svg" alt="七、信息论 - 图23" /> 所需要的信息是：描述 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144844.svg" alt="七、信息论 - 图24" /> 所需要的信息加上给定 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144847.svg" alt="七、信息论 - 图25" /> 条件下描述 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144851.svg" alt="七、信息论 - 图26" /> 所需的额外信息。</p></li><li><p><code>KL</code>散度（也称作相对熵）：对于给定的随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144854.svg" alt="七、信息论 - 图27" />，它的两个概率分布函数 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144858.svg" alt="七、信息论 - 图28" /> 和 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144901.svg" alt="七、信息论 - 图29" /> 的区别可以用 <code>KL</code>散度来度量：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144905.svg" alt="七、信息论 - 图30" /></p><ul><li><p><code>KL</code>散度非负：当它为 0 时，当且仅当 <code>P</code>和<code>Q</code>是同一个分布（对于离散型随机变量），或者两个分布几乎处处相等（对于连续型随机变量）。</p></li><li><p><code>KL</code>散度不对称：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144911.svg" alt="七、信息论 - 图31" /> 。</p><p>直观上看对于 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144914.svg" alt="七、信息论 - 图32" /> ，当 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144917.svg" alt="七、信息论 - 图33" /> 较大的地方， <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144921.svg" alt="七、信息论 - 图34" /> 也应该较大，这样才能使得 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144925.svg" alt="七、信息论 - 图35" /> 较小。</p><p>对于 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144928.svg" alt="七、信息论 - 图36" /> 较小的地方， <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144931.svg" alt="七、信息论 - 图37" /> 就没有什么限制就能够使得 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144934.svg" alt="七、信息论 - 图38" /> 较小。这就是<code>KL</code>散度不满足对称性的原因。</p></li></ul></li><li><p>交叉熵<code>cross-entropy</code>：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144939.svg" alt="七、信息论 - 图39" />。</p><ul><li>交叉熵刻画了使用错误分布<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144944.svg" alt="七、信息论 - 图40" /> 来表示真实分布 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144947.svg" alt="七、信息论 - 图41" /> 中的样本的平均编码长度。</li><li><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144950.svg" alt="七、信息论 - 图42" /> 刻画了错误分布<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144953.svg" alt="七、信息论 - 图43" /> 编码真实分布 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144956.svg" alt="七、信息论 - 图44" /> 带来的平均编码长度的增量。</li></ul></li><li><p>示例：假设真实分布 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145001.svg" alt="七、信息论 - 图45" /> 为混合高斯分布，它由两个高斯分布的分量组成。如果希望用普通的高斯分布 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145007.svg" alt="七、信息论 - 图46" /> 来近似 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145013.svg" alt="七、信息论 - 图47" /> ，则有两种方案：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145020.svg" alt="七、信息论 - 图48" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145024.jpeg" alt="七、信息论 - 图49" /></p><ul><li><p>如果选择 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145245.svg" alt="七、信息论 - 图50" />，则：</p><ul><li>当 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145249.svg" alt="七、信息论 - 图51" /> 较大的时候 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145251.svg" alt="七、信息论 - 图52" /> 也必须较大 。如果 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145254.svg" alt="七、信息论 - 图53" /> 较大时 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145256.svg" alt="七、信息论 - 图54" /> 较小，则 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145300.svg" alt="七、信息论 - 图55" /> 较大。</li><li>当 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145304.svg" alt="七、信息论 - 图56" /> 较小的时候 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145307.svg" alt="七、信息论 - 图57" /> 可以较大，也可以较小。</li></ul><p>因此 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145310.svg" alt="七、信息论 - 图58" /> 会贴近 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145314.svg" alt="七、信息论 - 图59" /> 的峰值。由于 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145317.svg" alt="七、信息论 - 图60" /> 的峰值有两个，因此 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145322.svg" alt="七、信息论 - 图61" /> 无法偏向任意一个峰值，最终结果就是 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145326.svg" alt="七、信息论 - 图62" /> 的峰值在 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145329.svg" alt="七、信息论 - 图63" /> 的两个峰值之间。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145333.png" alt="七、信息论 - 图64" /></p></li><li><p>如果选择 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145338.svg" alt="七、信息论 - 图65" /> ，则：</p><ul><li>当 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145341.svg" alt="七、信息论 - 图66" /> 较小的时候， <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145344.svg" alt="七、信息论 - 图67" /> 必须较小。如果<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145346.svg" alt="七、信息论 - 图68" /> 较小的时 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145348.svg" alt="七、信息论 - 图69" /> 较大，则 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145351.svg" alt="七、信息论 - 图70" /> 较大。</li><li>当 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145354.svg" alt="七、信息论 - 图71" /> 较大的时候，<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145357.svg" alt="七、信息论 - 图72" /> 可以较大，也可以较小。</li></ul><p>因此 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145400.svg" alt="七、信息论 - 图73" /> 会贴近 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145403.svg" alt="七、信息论 - 图74" /> 的谷值。最终结果就是 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145406.svg" alt="七、信息论 - 图75" /> 会贴合 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145409.svg" alt="七、信息论 - 图76" /> 峰值的任何一个。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145415.png" alt="七、信息论 - 图77" /></p></li><li><p>绝大多数场合使用 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145424.svg" alt="七、信息论 - 图78" /> ，原因是：当用分布 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145430.svg" alt="七、信息论 - 图79" /> 拟合 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619145433.svg" alt="七、信息论 - 图80" /> 时我们希望对于常见的事件，二者概率相差不大。</p></li></ul></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能/数学基础/概率论-CH5-先验分布与后验分布</title>
      <link href="/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%A6%82%E7%8E%87%E8%AE%BA-CH5-%E5%85%88%E9%AA%8C%E5%88%86%E5%B8%83%E4%B8%8E%E5%90%8E%E9%AA%8C%E5%88%86%E5%B8%83/"/>
      <url>/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%A6%82%E7%8E%87%E8%AE%BA-CH5-%E5%85%88%E9%AA%8C%E5%88%86%E5%B8%83%E4%B8%8E%E5%90%8E%E9%AA%8C%E5%88%86%E5%B8%83/</url>
      
        <content type="html"><![CDATA[<h2 id="第-5-章-先验分布与后验分布"><a class="markdownIt-Anchor" href="#第-5-章-先验分布与后验分布"></a> 第 5 章 先验分布与后验分布</h2><ol><li><p>在贝叶斯学派中，<code>先验分布+数据（似然）= 后验分布</code> 。</p></li><li><p>例如：假设需要识别一大箱苹果中的好苹果、坏苹果的概率。</p><ul><li><p>根据你对苹果好、坏的认知，给出先验分布为：50个好苹果和50个坏苹果。</p></li><li><p>现在你拿出10个苹果，发现有：8个好苹果，2个坏苹果。</p><p>根据数据，你得到后验分布为：58个好苹果，52个坏苹果</p></li><li><p>再拿出10个苹果，发现有：9个好苹果，1个坏苹果。</p><p>根据数据，你得到后验分布为：67个好苹果，53个坏苹果</p></li><li><p>这样不断重复下去，不断更新后验分布。当一箱苹果清点完毕，则得到了最终的后验分布。</p></li></ul><p>在这里：</p><ul><li>如果不使用先验分布，仅仅清点这箱苹果中的好坏，则得到的分布只能代表这一箱苹果。</li><li>采用了先验分布之后得到的分布，可以认为是所有箱子里的苹果的分布。</li><li>当采用先验分布时：给出的好、坏苹果的个数（也就是频数）越大，则先验分布越占主导地位。</li></ul></li><li><p>假设好苹果的概率为 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144446.svg" alt="六、先验分布与后验分布 - 图1" /> ，则抽取 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144449.svg" alt="六、先验分布与后验分布 - 图2" /> 个苹果中，好苹果个数为 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144452.svg" alt="六、先验分布与后验分布 - 图3" /> 个的概率为一个二项分布：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144456.svg" alt="六、先验分布与后验分布 - 图4" /></p><p>其中 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144459.svg" alt="六、先验分布与后验分布 - 图5" /> 为组合数。</p></li><li><p>现在的问题是：好苹果的概率 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144503.svg" alt="六、先验分布与后验分布 - 图6" /> 不再固定，而是服从一个分布。</p><p>假设好苹果的概率 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144507.svg" alt="六、先验分布与后验分布 - 图7" /> 的先验分布为贝塔分布：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144510.svg" alt="六、先验分布与后验分布 - 图8" /> 。</p><p>则后验概率为：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144514.svg" alt="六、先验分布与后验分布 - 图9" /></p><p>归一化之后，得到后验概率为：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144521.svg" alt="六、先验分布与后验分布 - 图10" /></p></li><li><p>好苹果概率 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144527.svg" alt="六、先验分布与后验分布 - 图11" /> 的先验分布的期望为：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144524.svg" alt="六、先验分布与后验分布 - 图12" /> 。好苹果概率 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144530.svg" alt="六、先验分布与后验分布 - 图13" /> 的后验分布的期望为：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144534.svg" alt="六、先验分布与后验分布 - 图14" /> 。</p><ul><li>根据上述例子所述：<ul><li>好苹果的先验概率的期望为 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144537.svg" alt="六、先验分布与后验分布 - 图15" /></li><li>进行第一轮数据校验之后，好苹果的后验概率的期望为 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144541.svg" alt="六、先验分布与后验分布 - 图16" /></li></ul></li><li>如果将 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144545.svg" alt="六、先验分布与后验分布 - 图17" /> 视为先验的好苹果数量， <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144548.svg" alt="六、先验分布与后验分布 - 图18" /> 视为先验的坏苹果数量， <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144551.svg" alt="六、先验分布与后验分布 - 图19" /> 表示箱子中苹果的数量， <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144555.svg" alt="六、先验分布与后验分布 - 图20" /> 表示箱子中的好苹果数量（相应的， <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144558.svg" alt="六、先验分布与后验分布 - 图21" /> 就是箱子中坏苹果的数量）。则：好苹果的先验概率分布的期望、后验概率分布的期望符合人们的生活经验。</li><li>这里使用先验分布和后验分布的期望，因为 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144607.svg" alt="六、先验分布与后验分布 - 图22" /> 是一个随机变量。若想通过一个数值来刻画好苹果的可能性，则用期望较好。</li></ul></li><li><p>更一般的，如果苹果不仅仅分为好、坏两种，而是分作<code>尺寸1、尺寸2、...尺寸K</code>等。则 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144613.svg" alt="六、先验分布与后验分布 - 图23" /> 个苹果中，有 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144618.svg" alt="六、先验分布与后验分布 - 图24" /> 个尺寸1的苹果、 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144625.svg" alt="六、先验分布与后验分布 - 图25" /> 个尺寸2的苹果….<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/534c29ab3c44fff321b09444753881a2.svg" alt="六、先验分布与后验分布 - 图26" /> 个尺寸 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144629.svg" alt="六、先验分布与后验分布 - 图27" /> 的苹果的概率服从多项式分布：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144633.svg" alt="六、先验分布与后验分布 - 图28" /></p><p>其中苹果为尺寸1的概率为 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144637.svg" alt="六、先验分布与后验分布 - 图29" />， 尺寸2的概率为 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144640.svg" alt="六、先验分布与后验分布 - 图30" /> ，… 尺寸 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144643.svg" alt="六、先验分布与后验分布 - 图31" /> 的概率为 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144647.svg" alt="六、先验分布与后验分布 - 图32" /> ， <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144651.svg" alt="六、先验分布与后验分布 - 图33" /></p><ul><li><p>假设苹果尺寸的先验概率分布为狄利克雷分布：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144655.svg" alt="六、先验分布与后验分布 - 图34" /> 。</p><p>苹果尺寸的先验概率分布的期望为：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144659.svg" alt="六、先验分布与后验分布 - 图35" /> 。</p></li><li><p>则苹果尺寸的后验概率分布也为狄里克雷分布：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144702.svg" alt="六、先验分布与后验分布 - 图36" /> 。</p><p>苹果尺寸的后验概率分布的期望为：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144706.svg" alt="六、先验分布与后验分布 - 图37" /> 。</p></li></ul></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能/数学基础/概率论-CH3-大数定律及中心极限定理</title>
      <link href="/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%A6%82%E7%8E%87%E8%AE%BA-CH3-%E5%A4%A7%E6%95%B0%E5%AE%9A%E5%BE%8B%E5%8F%8A%E4%B8%AD%E5%BF%83%E6%9E%81%E9%99%90%E5%AE%9A%E7%90%86/"/>
      <url>/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%A6%82%E7%8E%87%E8%AE%BA-CH3-%E5%A4%A7%E6%95%B0%E5%AE%9A%E5%BE%8B%E5%8F%8A%E4%B8%AD%E5%BF%83%E6%9E%81%E9%99%90%E5%AE%9A%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="第-3-章-大数定律及中心极限定理"><a class="markdownIt-Anchor" href="#第-3-章-大数定律及中心极限定理"></a> 第 3 章 大数定律及中心极限定理</h1><h2 id="31-切比雪夫不等式"><a class="markdownIt-Anchor" href="#31-切比雪夫不等式"></a> 3.1 切比雪夫不等式</h2><ol><li><p>切比雪夫不等式：假设随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619141851.svg" alt="三、大数定律及中心极限定理 - 图1" /> 具有期望 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619141900.svg" alt="三、大数定律及中心极限定理 - 图2" />， 方差 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619141903.svg" alt="三、大数定律及中心极限定理 - 图3" /> ，则对于任意正数 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619141912.svg" alt="三、大数定律及中心极限定理 - 图4" /> ，下面的不等式成立：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619141918.svg" alt="三、大数定律及中心极限定理 - 图5" /></p><ul><li><p>其意义是：对于距离 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619141945.svg" alt="三、大数定律及中心极限定理 - 图6" /> 足够远的地方 （距离大于等于 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619141950.svg" alt="三、大数定律及中心极限定理 - 图7" /> ），事件出现的概率是小于等于 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619141954.svg" alt="三、大数定律及中心极限定理 - 图8" />。即事件出现在区间 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619141958.svg" alt="三、大数定律及中心极限定理 - 图9" /> 的概率大于 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142003.svg" alt="三、大数定律及中心极限定理 - 图10" /> 。</p><p>该不等式给出了随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142008.svg" alt="三、大数定律及中心极限定理 - 图11" /> 在分布未知的情况下， 事件 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142013.svg" alt="三、大数定律及中心极限定理 - 图12" /> 的下限估计。如： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142017.svg" alt="三、大数定律及中心极限定理 - 图13" /> 。</p></li><li><p>证明：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142025.svg" alt="三、大数定律及中心极限定理 - 图14" /></p></li></ul></li><li><p>切比雪夫不等式的特殊情况：设随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142030.svg" alt="三、大数定律及中心极限定理 - 图15" /> 相互独立，且具有相同的数学期望和方差： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142034.svg" alt="三、大数定律及中心极限定理 - 图16" />。 作前 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142040.svg" alt="三、大数定律及中心极限定理 - 图17" /> 个随机变量的算术平均： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142045.svg" alt="三、大数定律及中心极限定理 - 图18" />， 则对于任意正数 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142049.svg" alt="三、大数定律及中心极限定理 - 图19" /> 有：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142055.svg" alt="三、大数定律及中心极限定理 - 图20" /></p><p>证明：根据期望和方差的性质有：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142059.svg" alt="三、大数定律及中心极限定理 - 图21" />， <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142106.svg" alt="三、大数定律及中心极限定理 - 图22" /> 。根据切比雪夫不等式有：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142109.svg" alt="三、大数定律及中心极限定理 - 图23" /></p><p>则有 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142114.svg" alt="三、大数定律及中心极限定理 - 图24" /> ，因此有：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142117.svg" alt="三、大数定律及中心极限定理 - 图25" /> 。</p></li></ol><h2 id="32-大数定理"><a class="markdownIt-Anchor" href="#32-大数定理"></a> 3.2 大数定理</h2><ol><li><p>依概率收敛：设 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142123.svg" alt="三、大数定律及中心极限定理 - 图26" /> 是一个随机变量序列， <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142127.svg" alt="三、大数定律及中心极限定理 - 图27" /> 是一个常数。</p><p>若对于任意正数 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142130.svg" alt="三、大数定律及中心极限定理 - 图28" /> 有 ： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142134.svg" alt="三、大数定律及中心极限定理 - 图29" /> ，则称序列 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142138.svg" alt="三、大数定律及中心极限定理 - 图30" /> 依概率收敛于 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142142.svg" alt="三、大数定律及中心极限定理 - 图31" /> 。记作： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142145.svg" alt="三、大数定律及中心极限定理 - 图32" /></p></li><li><p>依概率收敛的两个含义：</p><ul><li>收敛：表明这是一个随机变量序列，而不是某个随机变量；且序列是无限长，而不是有限长。</li><li>依概率：表明序列无穷远处的随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142154.svg" alt="三、大数定律及中心极限定理 - 图33" /> 的分布规律为：绝大部分分布于点 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142200.svg" alt="三、大数定律及中心极限定理 - 图34" /> ，极少数位于 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142204.svg" alt="三、大数定律及中心极限定理 - 图35" /> 之外。且分布于 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142208.svg" alt="三、大数定律及中心极限定理 - 图36" /> 之外的事件发生的概率之和为0。</li></ul></li><li><p>大数定理一： 设随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142213.svg" alt="三、大数定律及中心极限定理 - 图37" /> 相互独立，且具有相同的数学期望和方差： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142219.svg" alt="三、大数定律及中心极限定理 - 图38" />。 则序列： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142227.svg" alt="三、大数定律及中心极限定理 - 图39" /> 依概率收敛于 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142232.svg" alt="三、大数定律及中心极限定理 - 图40" /> ， 即 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142235.svg" alt="三、大数定律及中心极限定理 - 图41" /> 。</p><p>注意：这里并没有要求随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142240.svg" alt="三、大数定律及中心极限定理 - 图42" /> 同分布。</p></li><li><p>伯努利大数定理： 设 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142244.svg" alt="三、大数定律及中心极限定理 - 图43" /> 为 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142247.svg" alt="三、大数定律及中心极限定理 - 图44" /> 次独立重复实验中事件 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142251.svg" alt="三、大数定律及中心极限定理 - 图45" /> 发生的次数， <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142256.svg" alt="三、大数定律及中心极限定理 - 图46" /> 是事件 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142302.svg" alt="三、大数定律及中心极限定理 - 图47" /> 在每次试验中发生的概率。则对于任意正数 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142306.svg" alt="三、大数定律及中心极限定理 - 图48" /> 有：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142310.svg" alt="三、大数定律及中心极限定理 - 图49" /></p><p>即：当独立重复实验执行非常大的次数时，事件 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142316.svg" alt="三、大数定律及中心极限定理 - 图50" /> 发生的频率逼近于它的概率。</p></li><li><p>辛钦定理：设随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142319.svg" alt="三、大数定律及中心极限定理 - 图51" /> 相互独立，服从同一分布，且具有相同的数学期望： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142324.svg" alt="三、大数定律及中心极限定理 - 图52" />。 则对于任意正数 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142327.svg" alt="三、大数定律及中心极限定理 - 图53" /> 有：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142330.svg" alt="三、大数定律及中心极限定理 - 图54" /></p><ul><li>注意：这里并没有要求随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142335.svg" alt="三、大数定律及中心极限定理 - 图55" /> 的方差存在。</li><li>伯努利大数定理是亲钦定理的特殊情况。</li></ul></li></ol><h2 id="33-中心极限定理"><a class="markdownIt-Anchor" href="#33-中心极限定理"></a> 3.3 中心极限定理</h2><ol><li><p>独立同分布的中心极限定理：设随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142345.svg" alt="三、大数定律及中心极限定理 - 图56" /> 独立同分布，且具有数学期望和方差： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142403.svg" alt="三、大数定律及中心极限定理 - 图57" />， 则随机变量之和 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142411.svg" alt="三、大数定律及中心极限定理 - 图58" /> 的标准变化量：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142414.svg" alt="三、大数定律及中心极限定理 - 图59" /></p><p>的概率分布函数 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142419.svg" alt="三、大数定律及中心极限定理 - 图60" /> 对于任意 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142422.svg" alt="三、大数定律及中心极限定理 - 图61" /> 满足：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142425.svg" alt="三、大数定律及中心极限定理 - 图62" /></p><ul><li><p>其物理意义为：均值方差为 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142429.svg" alt="三、大数定律及中心极限定理 - 图63" /> 的独立同分布的随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142432.svg" alt="三、大数定律及中心极限定理 - 图64" /> 之和 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142435.svg" alt="三、大数定律及中心极限定理 - 图65" /> 的标准变化量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142439.svg" alt="三、大数定律及中心极限定理 - 图66" />，当 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142441.svg" alt="三、大数定律及中心极限定理 - 图67" /> 充分大时，其分布近似于标准正态分布。</p><p>即：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142445.svg" alt="三、大数定律及中心极限定理 - 图68" /> 在 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142448.svg" alt="三、大数定律及中心极限定理 - 图69" /> 充分大时，其分布近似于 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142452.svg" alt="三、大数定律及中心极限定理 - 图70" /> 。</p></li><li><p>一般情况下，很难求出 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142456.svg" alt="三、大数定律及中心极限定理 - 图71" /> 个随机变量之和的分布函数。因此当 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142500.svg" alt="三、大数定律及中心极限定理 - 图72" /> 充分大时，可以通过正态分布来做理论上的分析或者计算。</p></li></ul></li><li><p><code>Liapunov</code> 定理：设随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142504.svg" alt="三、大数定律及中心极限定理 - 图73" /> 相互独立，具有数学期望和方差：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142507.svg" alt="三、大数定律及中心极限定理 - 图74" /> 。记：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142511.svg" alt="三、大数定律及中心极限定理 - 图75" />。 若存在正数 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142516.svg" alt="三、大数定律及中心极限定理 - 图76" />，使得当 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142521.svg" alt="三、大数定律及中心极限定理 - 图77" /> 时，<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142529.svg" alt="三、大数定律及中心极限定理 - 图78" /> 。则随机变量之和 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142533.svg" alt="三、大数定律及中心极限定理 - 图79" /> 的标准变化量:</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142536.svg" alt="三、大数定律及中心极限定理 - 图80" /></p><p>的概率分布函数 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142542.svg" alt="三、大数定律及中心极限定理 - 图81" /> 对于任意 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142547.svg" alt="三、大数定律及中心极限定理 - 图82" /> 满足：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142550.svg" alt="三、大数定律及中心极限定理 - 图83" /></p><ul><li>其物理意义为：相互独立的随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142554.svg" alt="三、大数定律及中心极限定理 - 图84" /> 之和 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142559.svg" alt="三、大数定律及中心极限定理 - 图85" />的衍生随机变量序列<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142602.svg" alt="三、大数定律及中心极限定理 - 图86" />，当 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142605.svg" alt="三、大数定律及中心极限定理 - 图87" /> 充分大时，其分布近似与标准正态分布。</li><li>这里并不要求 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142609.svg" alt="三、大数定律及中心极限定理 - 图88" /> 同分布。</li></ul></li><li><p><code>Demoiver-Laplace</code>定理：设随机变量序列 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142613.svg" alt="三、大数定律及中心极限定理 - 图89" /> 服从参数为 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142616.svg" alt="三、大数定律及中心极限定理 - 图90" /> 的二项分布，其中 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142620.svg" alt="三、大数定律及中心极限定理 - 图91" /> 。则对于任意 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142624.svg" alt="三、大数定律及中心极限定理 - 图92" /> , 有：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142627.svg" alt="三、大数定律及中心极限定理 - 图93" /></p><p>该定理表明，正态分布是二项分布的极限分布。当 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142631.svg" alt="三、大数定律及中心极限定理 - 图94" /> 充分大时，可以利用正态分布来计算二项分布的概率。</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能/数学基础/概率论-CH4-常见概率分布</title>
      <link href="/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%A6%82%E7%8E%87%E8%AE%BA-CH4-%E5%B8%B8%E8%A7%81%E6%A6%82%E7%8E%87%E5%88%86%E5%B8%83/"/>
      <url>/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%A6%82%E7%8E%87%E8%AE%BA-CH4-%E5%B8%B8%E8%A7%81%E6%A6%82%E7%8E%87%E5%88%86%E5%B8%83/</url>
      
        <content type="html"><![CDATA[<h2 id="第-4-章-常见概率分布"><a class="markdownIt-Anchor" href="#第-4-章-常见概率分布"></a> 第 4 章 常见概率分布</h2><h3 id="41-均匀分布"><a class="markdownIt-Anchor" href="#41-均匀分布"></a> 4.1 均匀分布</h3><ol><li><p>离散随机变量的均匀分布：假设 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142740.svg" alt="五、常见概率分布 - 图1" /> 有 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142743.svg" alt="五、常见概率分布 - 图2" /> 个取值： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142748.svg" alt="五、常见概率分布 - 图3" />，则均匀分布的概率密度函数(<code>probability mass function:PMF</code>)为：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142755.svg" alt="五、常见概率分布 - 图4" /></p></li><li><p>连续随机变量的均匀分布： 假设 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142801.svg" alt="五、常见概率分布 - 图5" /> 在 <code>[a,b]</code>上均匀分布，则其概率密度函数(<code>probability density function：PDF</code>)为：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142807.svg" alt="五、常见概率分布 - 图6" /></p><p>.</p></li></ol><h3 id="42-伯努利分布"><a class="markdownIt-Anchor" href="#42-伯努利分布"></a> 4.2 伯努利分布</h3><ol><li><p>伯努利分布：参数为 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142812.svg" alt="五、常见概率分布 - 图7" />。随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142815.svg" alt="五、常见概率分布 - 图8" /> 。</p><ul><li>概率分布函数为：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142820.svg" alt="五、常见概率分布 - 图9" /> 。</li><li>期望： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142823.svg" alt="五、常见概率分布 - 图10" /> 。方差： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142826.svg" alt="五、常见概率分布 - 图11" /> 。</li></ul></li><li><p><code>categorical</code> 分布：它是二项分布的推广，也称作<code>multinoulli</code>分布。假设随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142831.svg" alt="五、常见概率分布 - 图12" />，其概率分布函数为：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142835.svg" alt="五、常见概率分布 - 图13" /></p><p>其中 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142852.svg" alt="五、常见概率分布 - 图14" /> 为参数，它满足 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142858.svg" alt="五、常见概率分布 - 图15" />，且 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142901.svg" alt="五、常见概率分布 - 图16" /> 。</p></li></ol><h3 id="43-二项分布"><a class="markdownIt-Anchor" href="#43-二项分布"></a> 4.3 二项分布</h3><ol><li><p>假设试验只有两种结果：成功的概率为 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142921.svg" alt="五、常见概率分布 - 图17" />，失败的概率为 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142926.svg" alt="五、常见概率分布 - 图18" />。 则二项分布描述了：独立重复地进行 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142930.svg" alt="五、常见概率分布 - 图19" /> 次试验中，成功 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142934.svg" alt="五、常见概率分布 - 图20" /> 次的概率。</p><ul><li><p>概率质量函数：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142942.svg" alt="五、常见概率分布 - 图21" /></p></li><li><p>期望： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142947.svg" alt="五、常见概率分布 - 图22" />。 方差： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619142950.svg" alt="五、常见概率分布 - 图23" /> 。</p></li></ul></li></ol><h3 id="44-高斯分布"><a class="markdownIt-Anchor" href="#44-高斯分布"></a> 4.4 高斯分布</h3><ol><li>正态分布是很多应用中的合理选择。如果某个随机变量取值范围是实数，且对它的概率分布一无所知，通常会假设它服从正态分布。有两个原因支持这一选择：<ul><li>建模的任务的真实分布通常都确实接近正态分布。中心极限定理表明，多个独立随机变量的和近似正态分布。</li><li>在具有相同方差的所有可能的概率分布中，正态分布的熵最大（即不确定性最大）。</li></ul></li></ol><h4 id="441-一维正态分布"><a class="markdownIt-Anchor" href="#441-一维正态分布"></a> 4.4.1 一维正态分布</h4><ol><li><p>正态分布的概率密度函数为 :</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143019.svg" alt="五、常见概率分布 - 图24" /></p><p>其中 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143022.svg" alt="五、常见概率分布 - 图25" /> 为常数。</p><ul><li>若随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143026.svg" alt="五、常见概率分布 - 图26" /> 的概率密度函数如上所述，则称 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143030.svg" alt="五、常见概率分布 - 图27" /> 服从参数为 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143034.svg" alt="五、常见概率分布 - 图28" /> 的正态分布或者高斯分布，记作 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143038.svg" alt="五、常见概率分布 - 图29" />。</li><li>特别的，当 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143042.svg" alt="五、常见概率分布 - 图30" /> 时，称为标准正态分布，其概率密度函数记作 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143046.svg" alt="五、常见概率分布 - 图31" />，分布函数记作 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143051.svg" alt="五、常见概率分布 - 图32" /> 。</li><li>为了计算方便，有时也记作：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143115.svg" alt="五、常见概率分布 - 图33" /> ，其中 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143119.svg" alt="五、常见概率分布 - 图34" /> 。</li></ul></li><li><p>正态分布的概率密度函数性质：</p><ul><li>曲线关于 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143127.svg" alt="五、常见概率分布 - 图35" /> 对称。</li><li>曲线在 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143130.svg" alt="五、常见概率分布 - 图36" /> 时取最大值。</li><li>曲线在 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143133.svg" alt="五、常见概率分布 - 图37" /> 处有拐点。</li><li>参数 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143136.svg" alt="五、常见概率分布 - 图38" /> 决定曲线的位置； <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143139.svg" alt="五、常见概率分布 - 图39" /> 决定图形的胖瘦。</li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143146.png" alt="五、常见概率分布 - 图40" /></p></li><li><p>若 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143154.svg" alt="五、常见概率分布 - 图41" /> 则：</p><ul><li><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143158.svg" alt="五、常见概率分布 - 图42" /></li><li>期望：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143203.svg" alt="五、常见概率分布 - 图43" /> 。方差：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143206.svg" alt="五、常见概率分布 - 图44" /> 。</li></ul></li><li><p>有限个相互独立的正态随机变量的线性组合仍然服从正态分布：若随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143210.svg" alt="五、常见概率分布 - 图45" /> 且它们相互独立，则它们的线性组合：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143222.svg" alt="五、常见概率分布 - 图46" /> 仍然服从正态分布（其中<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143226.svg" alt="五、常见概率分布 - 图47" /> 不全是为 0 的常数），且：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143231.svg" alt="五、常见概率分布 - 图48" /> 。</p></li></ol><h4 id="442-多维正态分布"><a class="markdownIt-Anchor" href="#442-多维正态分布"></a> 4.4.2 多维正态分布</h4><ol><li><p>二维正态随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143235.svg" alt="五、常见概率分布 - 图49" /> 的概率密度为：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143239.svg" alt="五、常见概率分布 - 图50" /></p><p>根据定义，可以计算出:</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143244.svg" alt="五、常见概率分布 - 图51" /></p></li><li><p>引入矩阵：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143253.svg" alt="五、常见概率分布 - 图52" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143257.svg" alt="五、常见概率分布 - 图53" /> 为 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143300.svg" alt="五、常见概率分布 - 图54" /> 的协方差矩阵。其行列式为 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143308.svg" alt="五、常见概率分布 - 图55" />，其逆矩阵为：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143312.svg" alt="五、常见概率分布 - 图56" /></p><p>于是 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143315.svg" alt="五、常见概率分布 - 图57" /> 的概率密度函数可以写作 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143319.svg" alt="五、常见概率分布 - 图58" /> 表示矩阵的转置：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143322.svg" alt="五、常见概率分布 - 图59" /></p><p>其中：</p><ul><li><p>均值 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143326.svg" alt="五、常见概率分布 - 图60" /> 决定了曲面的位置（本例中均值都为0）。</p></li><li><p>标准差 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143331.svg" alt="五、常见概率分布 - 图61" /> 决定了曲面的陡峭程度（本例中方差都为1）。</p></li><li><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143337.svg" alt="五、常见概率分布 - 图62" /> 决定了协方差矩阵的形状，从而决定了曲面的形状。</p><ul><li><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143341.svg" alt="五、常见概率分布 - 图63" /> 时，协方差矩阵对角线非零，其他位置均为零。此时表示随机变量之间不相关。</p><p>此时的联合分布概率函数形状如下图所示，曲面在 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143346.svg" alt="五、常见概率分布 - 图64" /> 平面的截面是个圆形：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143350.png" alt="五、常见概率分布 - 图65" /></p></li><li><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143356.svg" alt="五、常见概率分布 - 图66" /> 时，协方差矩阵对角线非零，其他位置非零。此时表示随机变量之间相关。</p><p>此时的联合分布概率函数形状如下图所示，曲面在 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143402.svg" alt="五、常见概率分布 - 图67" /> 平面的截面是个椭圆，相当于圆形沿着直线 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143405.svg" alt="五、常见概率分布 - 图68" /> 方向压缩 ：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143408.png" alt="五、常见概率分布 - 图69" /></p></li></ul></li><li><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143413.svg" alt="五、常见概率分布 - 图70" /> 时，协方差矩阵对角线非零，其他位置非零。</p><p>此时表示随机变量之间完全相关。此时的联合分布概率函数形状为：曲面在 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143418.svg" alt="五、常见概率分布 - 图71" /> 平面的截面是直线 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143422.svg" alt="五、常见概率分布 - 图72" /> ，相当于圆形沿着直线 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143425.svg" alt="五、常见概率分布 - 图73" /> 方向压缩成一条直线 。</p><p>由于 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143428.svg" alt="五、常见概率分布 - 图74" />会导致除数为 0，因此这里给出 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143432.svg" alt="五、常见概率分布 - 图75" />：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143436.png" alt="五、常见概率分布 - 图76" /></p></li></ul></li><li><p>多维正态随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143440.svg" alt="五、常见概率分布 - 图77" /> ，引入列矩阵：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143457.svg" alt="五、常见概率分布 - 图78" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143502.svg" alt="五、常见概率分布 - 图79" /> 为 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143506.svg" alt="五、常见概率分布 - 图80" /> 的协方差矩阵。则：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143510.svg" alt="五、常见概率分布 - 图81" /></p><p>记做 ：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143514.svg" alt="五、常见概率分布 - 图82" /> 。</p></li><li><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143518.svg" alt="五、常见概率分布 - 图83" /> 维正态变量具有下列四条性质：</p><ul><li><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143522.svg" alt="五、常见概率分布 - 图84" /> 维正态变量的每一个分量都是正态变量；反之，若 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143525.svg" alt="五、常见概率分布 - 图85" /> 都是正态变量，且相互独立，则 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143529.svg" alt="五、常见概率分布 - 图86" /> 是 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/bc301bfa9476044d8d8e001213e6df01.svg" alt="五、常见概率分布 - 图87" /> 维正态变量。</p></li><li><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143533.svg" alt="五、常见概率分布 - 图88" /> 维随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143536.svg" alt="五、常见概率分布 - 图89" /> 服从 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143539.svg" alt="五、常见概率分布 - 图90" /> 维正态分布的充要条件是： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143541.svg" alt="五、常见概率分布 - 图91" /> 的任意线性组合： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143548.svg" alt="五、常见概率分布 - 图92" /> 服从一维正态分布，其中 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143551.svg" alt="五、常见概率分布 - 图93" /> 不全为 0 。</p></li><li><p>若 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143555.svg" alt="五、常见概率分布 - 图94" /> 服从 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143559.svg" alt="五、常见概率分布 - 图95" /> 维正态分布，设 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143604.svg" alt="五、常见概率分布 - 图96" /> 是 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143607.svg" alt="五、常见概率分布 - 图97" /> 的线性函数，则 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143610.svg" alt="五、常见概率分布 - 图98" /> 也服从多维正态分布。</p><p>这一性质称为正态变量的线性变换不变性。</p></li><li><p>设 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143614.svg" alt="五、常见概率分布 - 图99" /> 服从 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143617.svg" alt="五、常见概率分布 - 图100" /> 维正态分布，则 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143622.svg" alt="五、常见概率分布 - 图101" /> 相互独立 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143626.svg" alt="五、常见概率分布 - 图102" /> <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143635.svg" alt="五、常见概率分布 - 图103" /> 两两不相关。</p></li></ul></li></ol><h3 id="45-拉普拉斯分布"><a class="markdownIt-Anchor" href="#45-拉普拉斯分布"></a> 4.5 拉普拉斯分布</h3><ol><li><p>拉普拉斯分布：</p><ul><li>概率密度函数：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143646.svg" alt="五、常见概率分布 - 图104" /> 。</li><li>期望： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143655.svg" alt="五、常见概率分布 - 图105" /> 。方差： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143658.svg" alt="五、常见概率分布 - 图106" /> 。</li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143701.png" alt="五、常见概率分布 - 图107" /></p></li></ol><h3 id="46-泊松分布"><a class="markdownIt-Anchor" href="#46-泊松分布"></a> 4.6 泊松分布</h3><ol><li><p>假设已知事件在单位时间（或者单位面积）内发生的<strong>平均</strong>次数为 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143707.svg" alt="五、常见概率分布 - 图108" /> ，则泊松分布描述了：事件在单位时间（或者单位面积）内发生的具体次数为 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143711.svg" alt="五、常见概率分布 - 图109" /> 的概率。</p><ul><li>概率质量函数：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143715.svg" alt="五、常见概率分布 - 图110" /> 。</li><li>期望： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143718.svg" alt="五、常见概率分布 - 图111" />。 方差： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143721.svg" alt="五、常见概率分布 - 图112" /> 。</li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143725.jpeg" alt="五、常见概率分布 - 图113" /></p></li><li><p>用均匀分布模拟泊松分布：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_poisson</span><span class="params">(lmd,tm)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string"> 用均匀分布模拟泊松分布。 lmd为 lambda 参数； tm 为时间</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"> t=np.random.uniform(<span class="number">0</span>,tm,size=lmd*tm) <span class="comment"># 获取 lmd*tm 个事件发生的时刻</span></span><br><span class="line">    count,tm_edges=np.histogram(t,bins=tm,range=(<span class="number">0</span>,tm))<span class="comment">#获取每个单位时间内，事件发生的次数</span></span><br><span class="line">    max_k= lmd *<span class="number">2</span> <span class="comment"># 要统计的最大次数</span></span><br><span class="line">    dist,count_edges=np.histogram(count,bins=max_k,range=(<span class="number">0</span>,max_k),density=<span class="literal">True</span>)</span><br><span class="line">    x=count_edges[:<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> x,dist,stats.poisson.pmf(x,lmd)</span><br></pre></td></tr></table></figure><p>该函数：</p><ul><li>首先随机性给出了 <code>lmd*tm</code>个事件发生的时间（时间位于区间<code>[0,tm]</code>）内。</li><li>然后统计每个单位时间区间内，事件发生的次数。</li><li>然后统计这些次数出现的频率。</li><li>最后将这个频率与理论上的泊松分布的概率质量函数比较。</li></ul></li></ol><h3 id="47-指数分布"><a class="markdownIt-Anchor" href="#47-指数分布"></a> 4.7 指数分布</h3><ol><li><p>若事件服从泊松分布，则该事件前后两次发生的时间间隔服从指数分布。由于时间间隔是个浮点数，因此指数分布是连续分布。</p><ul><li><p>概率密度函数：（ <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143852.svg" alt="五、常见概率分布 - 图114" /> 为时间间隔）</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143856.svg" alt="五、常见概率分布 - 图115" /></p></li><li><p>期望： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143900.svg" alt="五、常见概率分布 - 图116" />。方差：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143904.svg" alt="五、常见概率分布 - 图117" /> 。</p></li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143911.jpeg" alt="五、常见概率分布 - 图118" /></p></li><li><p>用均匀分布模拟指数分布：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_expon</span><span class="params">(lmd,tm)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    用均匀分布模拟指数分布。 lmd为 lambda 参数； tm 为时间 </span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    t=np.random.uniform(<span class="number">0</span>,tm,size=lmd*tm) <span class="comment"># 获取 lmd*tm 个事件发生的时刻</span></span><br><span class="line">    sorted_t=np.sort(t) <span class="comment">#时刻升序排列</span></span><br><span class="line">    delt_t=sorted_t[<span class="number">1</span>:]-sorted_t[:<span class="number">-1</span>] <span class="comment">#间隔序列</span></span><br><span class="line">    dist,edges=np.histogram(delt_t,bins=<span class="string">"auto"</span>,density=<span class="literal">True</span>)</span><br><span class="line">    x=edges[:<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> x,dist,stats.expon.pdf(x,loc=<span class="number">0</span>,scale=<span class="number">1</span>/lmd) <span class="comment">#scale 为 1/lambda</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="48-伽马分布"><a class="markdownIt-Anchor" href="#48-伽马分布"></a> 4.8 伽马分布</h3><ol><li><p>若事件服从泊松分布，则事件第 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143937.svg" alt="五、常见概率分布 - 图119" /> 次发生和第 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143940.svg" alt="五、常见概率分布 - 图120" /> 次发生的时间间隔为伽玛分布。由于时间间隔是个浮点数，因此指数分布是连续分布。</p><ul><li>概率密度函数：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143945.svg" alt="五、常见概率分布 - 图121" />， <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143949.svg" alt="五、常见概率分布 - 图122" /> 为时间间隔 。</li><li>期望： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143952.svg" alt="五、常见概率分布 - 图123" /> 。方差：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619143956.svg" alt="五、常见概率分布 - 图124" /> 。</li></ul></li><li><p>上面的定义中 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144000.svg" alt="五、常见概率分布 - 图125" /> 必须是整数。事实上，若随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144003.svg" alt="五、常见概率分布 - 图126" /> 服从伽马分布，则其概率密度函数为：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144008.svg" alt="五、常见概率分布 - 图127" /></p><p>记做 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144012.svg" alt="五、常见概率分布 - 图128" /> 。其中 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144015.svg" alt="五、常见概率分布 - 图129" /> 称作形状参数，<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144018.svg" alt="五、常见概率分布 - 图130" /> 称作尺度参数。</p><ul><li>期望 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144021.svg" alt="五、常见概率分布 - 图131" />，方差<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144024.svg" alt="五、常见概率分布 - 图132" /> 。</li><li>当 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144027.svg" alt="五、常见概率分布 - 图133" /> 时，<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144031.svg" alt="五、常见概率分布 - 图134" /> 为递减函数。</li><li>当 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144034.svg" alt="五、常见概率分布 - 图135" /> 时，<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144042.svg" alt="五、常见概率分布 - 图136" /> 为单峰函数。</li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144046.jpeg" alt="五、常见概率分布 - 图137" /></p></li><li><p>性质：</p><ul><li>当 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144053.svg" alt="五、常见概率分布 - 图138" /> 时， 为 <code>Erlang</code>分布。</li><li>当 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144057.svg" alt="五、常见概率分布 - 图139" /> 时，就是参数为 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144104.svg" alt="五、常见概率分布 - 图140" /> 的指数分布。</li><li>当 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144107.svg" alt="五、常见概率分布 - 图141" /> 时，就是常用的卡方分布。</li></ul></li><li><p>伽马分布的可加性：设随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144111.svg" alt="五、常见概率分布 - 图142" /> 相互独立并且都服从伽马分布： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144115.svg" alt="五、常见概率分布 - 图143" />，则：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144118.svg" alt="五、常见概率分布 - 图144" /></p></li><li><p>用均匀分布模拟伽玛分布：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_gamma</span><span class="params">(lmd,tm,k)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    用均匀分布模拟伽玛分布。 lmd为 lambda 参数； tm 为时间；k 为 k 参数</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    t=np.random.uniform(<span class="number">0</span>,tm,size=lmd*tm) <span class="comment"># 获取 lmd*tm 个事件发生的时刻</span></span><br><span class="line">    sorted_t=np.sort(t) <span class="comment">#时刻升序排列</span></span><br><span class="line">    delt_t=sorted_t[k:]-sorted_t[:-k] <span class="comment">#间隔序列</span></span><br><span class="line">    dist,edges=np.histogram(delt_t,bins=<span class="string">"auto"</span>,density=<span class="literal">True</span>)</span><br><span class="line">    x=edges[:<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> x,dist,stats.gamma.pdf(x,loc=<span class="number">0</span>,scale=<span class="number">1</span>/lmd,a=k) <span class="comment">#scale 为 1/lambda,a 为 k</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="49-贝塔分布"><a class="markdownIt-Anchor" href="#49-贝塔分布"></a> 4.9 贝塔分布</h3><ol><li><p>贝塔分布是定义在 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144145.svg" alt="五、常见概率分布 - 图145" /> 之间的连续概率分布。</p><p>如果随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144149.svg" alt="五、常见概率分布 - 图146" /> 服从贝塔分布，则其概率密度函数为：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144152.svg" alt="五、常见概率分布 - 图147" /></p><p>记做 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144156.svg" alt="五、常见概率分布 - 图148" /> 。</p><ul><li>众数为： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144159.svg" alt="五、常见概率分布 - 图149" /> 。</li><li>期望为： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144202.svg" alt="五、常见概率分布 - 图150" /> ，方差为： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144205.svg" alt="五、常见概率分布 - 图151" />。</li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144210.jpeg" alt="五、常见概率分布 - 图152" /></p></li></ol><h3 id="410-狄拉克分布"><a class="markdownIt-Anchor" href="#410-狄拉克分布"></a> 4.10 狄拉克分布</h3><ol><li><p>狄拉克分布：假设所有的概率都集中在一点 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144219.svg" alt="五、常见概率分布 - 图153" /> 上，则对应的概率密度函数为：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144223.svg" alt="五、常见概率分布 - 图154" /> 。</p><p>其中 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144226.svg" alt="五、常见概率分布 - 图155" /> 为狄拉克函数，其性质为：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144229.svg" alt="五、常见概率分布 - 图156" /></p></li><li><p>狄拉克分布的一个典型用途就是定义连续型随机变量的经验分布函数。假设数据集中有样本 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144234.svg" alt="五、常见概率分布 - 图157" />，则定义经验分布函数：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144238.svg" alt="五、常见概率分布 - 图158" /></p><p>它就是对每个样本赋予了一个概率质量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144240.svg" alt="五、常见概率分布 - 图159" />。</p></li><li><p>对于离散型随机变量的经验分布，则经验分布函数就是<code>multinoulli</code>分布，它简单地等于训练集中的经验频率。</p></li><li><p>经验分布的两个作用：</p><ul><li>通过查看训练集样本的经验分布，从而指定该训练集的样本采样的分布（保证采样之后的分布不失真）。</li><li>经验分布就是使得训练数据的可能性最大化的概率密度函数。</li></ul></li></ol><h3 id="411-多项式分布与狄里克雷分布"><a class="markdownIt-Anchor" href="#411-多项式分布与狄里克雷分布"></a> 4.11 多项式分布与狄里克雷分布</h3><ol><li><p>多项式分布的质量密度函数：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144248.svg" alt="五、常见概率分布 - 图160" /></p><p>它是 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144251.svg" alt="五、常见概率分布 - 图161" /> 的多项式展开的形式。</p></li><li><p>狄利克雷分布的概率密度函数：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144254.svg" alt="五、常见概率分布 - 图162" /></p></li><li><p>可以看到，多项式分布与狄里克雷分布的概率密度函数非常相似，区别仅仅在于前面的归一化项：</p><ul><li>多项式分布是针对离散型随机变量，通过求和获取概率。</li><li>狄里克雷分布时针对连续型随机变量，通过求积分来获取概率。</li></ul></li></ol><h3 id="412-混合概率分布"><a class="markdownIt-Anchor" href="#412-混合概率分布"></a> 4.12 混合概率分布</h3><ol><li><p>混合概率分布：它组合了其他几个分量的分布来组成。</p><ul><li><p>在每次生成样本中，首先通过<code>multinoulli</code>分布来决定选用哪个分量，然后由该分量的分布函数来生成样本。</p></li><li><p>其概率分布函数为：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144300.svg" alt="五、常见概率分布 - 图163" /></p><p>其中 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144304.svg" alt="五、常见概率分布 - 图164" /> 为一个<code>multinoulli</code>分布，<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144307.svg" alt="五、常见概率分布 - 图165" /> 的取值范围就是各分量的编号。</p></li></ul></li><li><p>前面介绍的连续型随机变量的经验分布函数就是一个混合概率分布的例子，此时 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144310.svg" alt="五、常见概率分布 - 图166" /> 。</p></li><li><p>混合概率分布可以通过简单的概率分布创建更复杂的概率分布。一个常见的例子是混合高斯模型，其中 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144315.svg" alt="五、常见概率分布 - 图167" /> 为高斯模型。每个分量都有对应的参数 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144319.svg" alt="五、常见概率分布 - 图168" /> 。</p><ul><li>有些混合高斯模型有更强的约束，如 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144323.svg" alt="五、常见概率分布 - 图169" />，更进一步还可以要求 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619144356.svg" alt="五、常见概率分布 - 图170" /> 为一个对角矩阵。</li><li>混合高斯模型是一个通用的概率密度函数逼近工具。任何平滑的概率密度函数都可以通过足够多分量的混合高斯模型来逼近。</li></ul></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能/数学基础/概率论-CH1-概率与分布</title>
      <link href="/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%A6%82%E7%8E%87%E8%AE%BA-CH1-%E6%A6%82%E7%8E%87%E4%B8%8E%E5%88%86%E5%B8%83/"/>
      <url>/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%A6%82%E7%8E%87%E8%AE%BA-CH1-%E6%A6%82%E7%8E%87%E4%B8%8E%E5%88%86%E5%B8%83/</url>
      
        <content type="html"><![CDATA[<h1 id="第-1-章-概率与分布"><a class="markdownIt-Anchor" href="#第-1-章-概率与分布"></a> 第 1 章 概率与分布</h1><h2 id="11-条件概率与独立事件"><a class="markdownIt-Anchor" href="#11-条件概率与独立事件"></a> 1.1 条件概率与独立事件</h2><ol><li><p>条件概率：已知 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619125743.svg" alt="一、概率与分布 - 图1" /> 事件发生的条件下 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619125750.svg" alt="一、概率与分布 - 图2" /> 发生的概率，记作 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619125755.svg" alt="一、概率与分布 - 图3" />，它等于事件 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619125801.svg" alt="一、概率与分布 - 图4" /> 的概率相对于事件 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619125814.svg" alt="一、概率与分布 - 图5" /> 的概率，即：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619125821.svg" alt="一、概率与分布 - 图6" /> 。其中必须有 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/4c38d9c69fa469e981cdf9cb07fc7217.svg" alt="一、概率与分布 - 图7" /> 。</p></li><li><p>条件概率分布的链式法则：对于 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619125846.svg" alt="一、概率与分布 - 图8" /> 个随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619125849.svg" alt="一、概率与分布 - 图9" />，有：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619125905.svg" alt="一、概率与分布 - 图10" /></p></li><li><p>两个随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619125909.svg" alt="一、概率与分布 - 图11" /> 相互独立的数学描述：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619125928.svg" alt="一、概率与分布 - 图12" /> 。记作： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619125936.svg" alt="一、概率与分布 - 图13" /> 。</p></li><li><p>两个随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619125945.svg" alt="一、概率与分布 - 图14" /> 关于随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619125949.svg" alt="一、概率与分布 - 图15" /> 条件独立的数学描述：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619130001.svg" alt="一、概率与分布 - 图16" /> 。</p><p>记作： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619130018.svg" alt="一、概率与分布 - 图17" /> 。</p></li></ol><h2 id="12-联合概率分布"><a class="markdownIt-Anchor" href="#12-联合概率分布"></a> 1.2 联合概率分布</h2><ol><li><p>定义<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619130031.svg" alt="一、概率与分布 - 图18" /> 和 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619130034.svg" alt="一、概率与分布 - 图19" /> 的联合分布为：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619130038.svg" alt="一、概率与分布 - 图20" /> 。</p><ul><li><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619130048.svg" alt="一、概率与分布 - 图21" /> 的分布可以从联合分布中得到：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619130052.svg" alt="一、概率与分布 - 图22" /></p></li><li><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619130056.svg" alt="一、概率与分布 - 图23" /> 的分布可以从联合分布中得到：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619130059.svg" alt="一、概率与分布 - 图24" /></p></li></ul></li><li><p>当 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619130135.svg" alt="一、概率与分布 - 图25" /> 和 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619130120.svg" alt="一、概率与分布 - 图26" /> 都是离散随机变量时， 定义 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619130152.svg" alt="一、概率与分布 - 图27" /> 和 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619130155.svg" alt="一、概率与分布 - 图28" /> 的联合概率质量函数为： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619130159.svg" alt="一、概率与分布 - 图29" /></p><p>则 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619130202.svg" alt="一、概率与分布 - 图30" /> 和 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619130205.svg" alt="一、概率与分布 - 图31" /> 的概率质量函数分布为：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619130210.svg" alt="一、概率与分布 - 图32" /></p></li><li><p>当 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619130215.svg" alt="一、概率与分布 - 图33" /> 和 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619130218.svg" alt="一、概率与分布 - 图34" /> 联合地连续时，即存在函数 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619130224.svg" alt="一、概率与分布 - 图35" /> ，使得对于所有的实数集合 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619130228.svg" alt="一、概率与分布 - 图36" /> 和 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619130231.svg" alt="一、概率与分布 - 图37" /> 满足：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619130237.svg" alt="一、概率与分布 - 图38" /></p><p>则函数 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619130241.svg" alt="一、概率与分布 - 图39" /> 称为 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619130244.svg" alt="一、概率与分布 - 图40" /> 和 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619130246.svg" alt="一、概率与分布 - 图41" /> 的概率密度函数。</p><ul><li><p>联合分布为：<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/5bba137f9106c5a2787d258c677094a3.svg" alt="一、概率与分布 - 图42" /> 。</p></li><li><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/8a2fadda07ccf6725f0c653b7e713016.svg" alt="一、概率与分布 - 图43" /> 和 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/8c5c77d5bc29f14b899b04a83df49d34.svg" alt="一、概率与分布 - 图44" /> 的分布函数以及概率密度函数分别为：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619130327.svg" alt="一、概率与分布 - 图45" /></p></li></ul></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能/数学基础/概率论-CH2-期望与方差</title>
      <link href="/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%A6%82%E7%8E%87%E8%AE%BA-CH2-%E6%9C%9F%E6%9C%9B%E4%B8%8E%E6%96%B9%E5%B7%AE/"/>
      <url>/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%A6%82%E7%8E%87%E8%AE%BA-CH2-%E6%9C%9F%E6%9C%9B%E4%B8%8E%E6%96%B9%E5%B7%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="第-2-章-期望与方差"><a class="markdownIt-Anchor" href="#第-2-章-期望与方差"></a> 第 2 章 期望与方差</h1><h2 id="21-期望"><a class="markdownIt-Anchor" href="#21-期望"></a> 2.1 期望</h2><ol><li><p>期望描述了随机变量的平均情况，衡量了随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619133703.svg" alt="二、期望和方差 - 图1" /> 的均值。它是概率分布的泛函（函数的函数）。</p><ul><li><p>离散型随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619133717.svg" alt="二、期望和方差 - 图2" /> 的期望：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619133727.svg" alt="二、期望和方差 - 图3" /> 。</p><p>若右侧级数不收敛，则期望不存在。</p></li><li><p>连续性随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619133740.svg" alt="二、期望和方差 - 图4" /> 的期望： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619133744.svg" alt="二、期望和方差 - 图5" /> 。</p><p>若右侧极限不收敛，则期望不存在。</p></li></ul></li><li><p>定理：对于随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619133803.svg" alt="二、期望和方差 - 图6" /> ，设 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619133807.svg" alt="二、期望和方差 - 图7" /> 也为随机变量，<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619133839.svg" alt="二、期望和方差 - 图8" /> 是连续函数。</p><ul><li><p>若 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619133843.svg" alt="二、期望和方差 - 图9" /> 为离散型随机变量，若 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619133847.svg" alt="二、期望和方差 - 图10" /> 的期望存在，则：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619133857.svg" alt="二、期望和方差 - 图11" /> 。</p><p>也记做：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619133908.svg" alt="二、期望和方差 - 图12" /> 。</p></li><li><p>若 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619133913.svg" alt="二、期望和方差 - 图13" /> 为连续型随机变量，若 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619133918.svg" alt="二、期望和方差 - 图14" /> 的期望存在，则 ：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619133934.svg" alt="二、期望和方差 - 图15" /> 。</p><p>也记做：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619133944.svg" alt="二、期望和方差 - 图16" /> 。</p></li></ul><p>该定理的意义在于：当求 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619133949.svg" alt="二、期望和方差 - 图17" /> 时，不必计算出 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619133952.svg" alt="二、期望和方差 - 图18" /> 的分布，只需要利用 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619133956.svg" alt="二、期望和方差 - 图19" /> 的分布即可。</p><p>该定理可以推广至两个或两个以上随机变量的情况。对于随机变量<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134000.svg" alt="二、期望和方差 - 图20" />，假设 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134003.svg" alt="二、期望和方差 - 图21" /> 也是随机变量， <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134007.svg" alt="二、期望和方差 - 图22" /> 为连续函数，则有：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134019.svg" alt="二、期望和方差 - 图23" /> 。也记做：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134022.svg" alt="二、期望和方差 - 图24" /> 。</p></li><li><p>期望性质：</p><ul><li><p>常数的期望就是常数本身。</p></li><li><p>对常数 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134036.svg" alt="二、期望和方差 - 图25" /> 有 ：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134039.svg" alt="二、期望和方差 - 图26" /> 。</p></li><li><p>对两个随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134044.svg" alt="二、期望和方差 - 图27" />，有：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134048.svg" alt="二、期望和方差 - 图28" /> 。</p><p>该结论可以推广到任意有限个随机变量之和的情况。</p></li><li><p>对两个相互独立的随机变量，有：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134056.svg" alt="二、期望和方差 - 图29" /> 。</p><p>该结论可以推广到任意有限个相互独立的随机变量之积的情况。</p></li></ul></li></ol><h2 id="22-方差"><a class="markdownIt-Anchor" href="#22-方差"></a> 2.2 方差</h2><ol><li><p>对随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134102.svg" alt="二、期望和方差 - 图30" /> ，若 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134106.svg" alt="二、期望和方差 - 图31" /> 存在，则称它为 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134111.svg" alt="二、期望和方差 - 图32" /> 的方差，记作 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134116.svg" alt="二、期望和方差 - 图33" /> 。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134122.svg" alt="二、期望和方差 - 图34" /> 的标准差为方差的开平方。即：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134126.svg" alt="二、期望和方差 - 图35" /></p><ul><li><p>方差度量了随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134135.svg" alt="二、期望和方差 - 图36" /> 与期望值偏离的程度，衡量了 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134138.svg" alt="二、期望和方差 - 图37" /> 取值分散程度的一个尺度。</p></li><li><p>由于绝对值 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134141.svg" alt="二、期望和方差 - 图38" /> 带有绝对值，不方便运算，因此采用平方来计算。</p><p>又因为 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134150.svg" alt="二、期望和方差 - 图39" /> 是一个随机变量，因此对它取期望，即得 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134201.svg" alt="二、期望和方差 - 图40" /> 与期望值偏离的均值。</p></li></ul></li><li><p>根据定义可知：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134206.svg" alt="二、期望和方差 - 图41" /></p></li><li><p>对于一个期望为 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134214.svg" alt="二、期望和方差 - 图42" />， 方差为 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134218.svg" alt="二、期望和方差 - 图43" /> 的随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134225.svg" alt="二、期望和方差 - 图44" />，随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134229.svg" alt="二、期望和方差 - 图45" /> 的数学期望为0，方差为1。 称 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134234.svg" alt="二、期望和方差 - 图46" /> 为 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134238.svg" alt="二、期望和方差 - 图47" /> 的标准化变量。</p></li><li><p>方差的性质：</p><ul><li><p>常数的方差恒为 0 。</p></li><li><p>对常数 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134243.svg" alt="二、期望和方差 - 图48" /> ，有 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134246.svg" alt="二、期望和方差 - 图49" /> 。</p></li><li><p>对两个随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134254.svg" alt="二、期望和方差 - 图50" />，有： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134258.svg" alt="二、期望和方差 - 图51" /></p><p>当 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134317.svg" alt="二、期望和方差 - 图52" /> 和 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134320.svg" alt="二、期望和方差 - 图53" /> 相互独立时，有 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134326.svg" alt="二、期望和方差 - 图54" /> 。这可以推广至任意有限多个相互独立的随机变量之和的情况。</p></li><li><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134332.svg" alt="二、期望和方差 - 图55" /> 的充要条件是 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134335.svg" alt="二、期望和方差 - 图56" /> 以概率1取常数。</p></li></ul></li></ol><h2 id="23-协方差与相关系数"><a class="markdownIt-Anchor" href="#23-协方差与相关系数"></a> 2.3 协方差与相关系数</h2><ol><li><p>对于二维随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134459.svg" alt="二、期望和方差 - 图57" /> ，可以讨论描述 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134503.svg" alt="二、期望和方差 - 图58" /> 与 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134506.svg" alt="二、期望和方差 - 图59" /> 之间相互关系的数字特征。</p><ul><li>定义 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134515.svg" alt="二、期望和方差 - 图60" /> 为随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134519.svg" alt="二、期望和方差 - 图61" /> 与 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134522.svg" alt="二、期望和方差 - 图62" /> 的协方差，记作 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134526.svg" alt="二、期望和方差 - 图63" />。</li><li>定义 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134532.svg" alt="二、期望和方差 - 图64" /> 为随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134536.svg" alt="二、期望和方差 - 图65" /> 与<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134539.svg" alt="二、期望和方差 - 图66" />的相关系数，它是协方差的归一化。</li></ul></li><li><p>由定义可知：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134603.svg" alt="二、期望和方差 - 图67" /></p></li><li><p>协方差的性质：</p><ul><li><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134608.svg" alt="二、期望和方差 - 图68" />，<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/e4c726d4d0b4c7f74c3b2d1e808534f4.svg" alt="二、期望和方差 - 图69" /> 为常数。</li><li><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134622.svg" alt="二、期望和方差 - 图70" /></li><li><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134631.svg" alt="二、期望和方差 - 图71" /></li><li><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134637.svg" alt="二、期望和方差 - 图72" /></li></ul></li><li><p>协方差的物理意义：</p><ul><li><p>协方差的绝对值越大，说明两个随机变量都远离它们的均值。</p></li><li><p>协方差如果为正，则说明两个随机变量同时趋向于取较大的值或者同时趋向于取较小的值；如果为负，则说明一个随变量趋向于取较大的值，另一个随机变量趋向于取较小的值。</p></li><li><p>两个随机变量的独立性可以导出协方差为零。但是两个随机变量的协方差为零无法导出独立性。</p><p>因为独立性也包括：没有非线性关系。有可能两个随机变量是非独立的，但是协方差为零。如：假设随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134650.svg" alt="二、期望和方差 - 图73" /> 。定义随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134654.svg" alt="二、期望和方差 - 图74" /> 的概率分布函数为：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134659.svg" alt="二、期望和方差 - 图75" /></p><p>定义随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134703.svg" alt="二、期望和方差 - 图76" />，则随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134707.svg" alt="二、期望和方差 - 图77" /> 是非独立的，但是有： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134711.svg" alt="二、期望和方差 - 图78" /> 。</p></li></ul></li><li><p>相关系数的物理意义：考虑以随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134721.svg" alt="二、期望和方差 - 图79" /> 的线性函数 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134725.svg" alt="二、期望和方差 - 图80" /> 来近似表示 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134728.svg" alt="二、期望和方差 - 图81" />。以均方误差</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134737.svg" alt="二、期望和方差 - 图82" /></p><p>来衡量以 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134741.svg" alt="二、期望和方差 - 图83" /> 近似表达 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134744.svg" alt="二、期望和方差 - 图84" /> 的好坏程度。 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134747.svg" alt="二、期望和方差 - 图85" /> 越小表示近似程度越高。</p><p>为求得最好的近似，则对 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134751.svg" alt="二、期望和方差 - 图86" /> 分别取偏导数，得到：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134755.svg" alt="二、期望和方差 - 图87" /></p><p>因此有以下定理：</p><ul><li><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134801.svg" alt="二、期望和方差 - 图88" />（<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/8f8313414ea3fdad567b521631fa889e.svg" alt="二、期望和方差 - 图89" /> 是绝对值）。</li><li><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134806.svg" alt="二、期望和方差 - 图90" /> 的充要条件是：存在常数 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134809.svg" alt="二、期望和方差 - 图91" /> 使得 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134813.svg" alt="二、期望和方差 - 图92" />。</li></ul></li><li><p>当<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134818.svg" alt="二、期望和方差 - 图93" /> 较大时， <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134822.svg" alt="二、期望和方差 - 图94" /> 较小，意味着随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134825.svg" alt="二、期望和方差 - 图95" /> 和 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134827.svg" alt="二、期望和方差 - 图96" /> 联系较紧密。于是 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134830.svg" alt="二、期望和方差 - 图97" /> 是一个表征 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134834.svg" alt="二、期望和方差 - 图98" />、<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134836.svg" alt="二、期望和方差 - 图99" /> 之间线性关系紧密程度的量。</p></li><li><p>当 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134840.svg" alt="二、期望和方差 - 图100" /> 时，称 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134844.svg" alt="二、期望和方差 - 图101" /> 和 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134847.svg" alt="二、期望和方差 - 图102" /> 不相关。</p><ul><li>不相关是就线性关系来讲的，而相互独立是一般关系而言的。</li><li>相互独立一定不相关；不相关则未必独立。</li></ul></li></ol><h2 id="24-协方差矩阵"><a class="markdownIt-Anchor" href="#24-协方差矩阵"></a> 2.4 协方差矩阵</h2><ol><li><p>设 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134855.svg" alt="二、期望和方差 - 图103" /> 和 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134857.svg" alt="二、期望和方差 - 图104" /> 是随机变量。</p><ul><li>若 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134911.svg" alt="二、期望和方差 - 图105" /> 存在，则称它为 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134915.svg" alt="二、期望和方差 - 图106" /> 的 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134919.svg" alt="二、期望和方差 - 图107" /> 阶原点矩，简称 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134922.svg" alt="二、期望和方差 - 图108" /> 阶矩。</li><li>若 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134933.svg" alt="二、期望和方差 - 图109" /> 存在，则称它为 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134938.svg" alt="二、期望和方差 - 图110" /> 的 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134941.svg" alt="二、期望和方差 - 图111" /> 阶中心矩。</li><li>若 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134944.svg" alt="二、期望和方差 - 图112" /> 存在，则称它为 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134947.svg" alt="二、期望和方差 - 图113" /> 和 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134950.svg" alt="二、期望和方差 - 图114" /> 的 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619134954.svg" alt="二、期望和方差 - 图115" /> 阶混合矩。</li><li>若 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619135005.svg" alt="二、期望和方差 - 图116" /> 存在，则称它为 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619135013.svg" alt="二、期望和方差 - 图117" /> 和 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619135016.svg" alt="二、期望和方差 - 图118" /> 的 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619135019.svg" alt="二、期望和方差 - 图119" /> 阶混合中心矩。</li></ul><p>因此：期望是一阶原点矩，方差是二阶中心矩，协方差是二阶混合中心矩。</p></li><li><p>协方差矩阵：</p><ul><li><p>二维随机变量<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619135025.svg" alt="二、期望和方差 - 图120" /> 有四个二阶中心矩（假设他们都存在），记作：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619135029.svg" alt="二、期望和方差 - 图121" /></p><p>称矩阵</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619135033.svg" alt="二、期望和方差 - 图122" /></p><p>为随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619135036.svg" alt="二、期望和方差 - 图123" /> 的协方差矩阵。</p></li><li><p>设 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619135043.svg" alt="二、期望和方差 - 图124" /> 维随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619135039.svg" alt="二、期望和方差 - 图125" /> 的二阶混合中心矩 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619135047.svg" alt="二、期望和方差 - 图126" /> 都存在，则称矩阵</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619135050.svg" alt="二、期望和方差 - 图127" /></p><p>为 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619135055.svg" alt="二、期望和方差 - 图128" /> 维随机变量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619135058.svg" alt="二、期望和方差 - 图129" /> 的协方差矩阵。</p><p>由于 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619135102.svg" alt="二、期望和方差 - 图130" /> 因此协方差矩阵是个对称阵。</p></li></ul></li><li><p>通常 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619135107.svg" alt="二、期望和方差 - 图131" /> 维随机变量的分布是不知道的，或者太复杂以致数学上不容易处理。因此实际中协方差矩阵非常重要。</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能/数学基础/数值计算-CH6-约束优化</title>
      <link href="/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97-CH6-%E7%BA%A6%E6%9D%9F%E4%BC%98%E5%8C%96/"/>
      <url>/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97-CH6-%E7%BA%A6%E6%9D%9F%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="第-6-章-约束优化"><a class="markdownIt-Anchor" href="#第-6-章-约束优化"></a> 第 6 章 约束优化</h1><ol><li><p>在有的最优化问题中，希望输入 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/86dcd33cfec6b67f675de857c11dea1a.svg" alt="六、 约束优化 - 图1" /> 位于特定的集合 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/bba7ad7a7aebbce57c57d8290ef9fed9.svg" alt="六、 约束优化 - 图2" /> 中，这称作约束优化问题。</p><p>集合<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/bba7ad7a7aebbce57c57d8290ef9fed9.svg" alt="六、 约束优化 - 图3" /> 内的点 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/86dcd33cfec6b67f675de857c11dea1a.svg" alt="六、 约束优化 - 图4" /> 称作可行解。集合 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/bba7ad7a7aebbce57c57d8290ef9fed9.svg" alt="六、 约束优化 - 图5" /> 也称作可行域。</p></li><li><p>约束优化的一个简单方法是：对梯度下降法进行修改，每次迭代后，将得到的新的 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/86dcd33cfec6b67f675de857c11dea1a.svg" alt="六、 约束优化 - 图6" /> 映射到集合 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/bba7ad7a7aebbce57c57d8290ef9fed9.svg" alt="六、 约束优化 - 图7" /> 中。</p><p>如果使用线性搜索：则每次只搜索那些使得新的 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/86dcd33cfec6b67f675de857c11dea1a.svg" alt="六、 约束优化 - 图8" /> 位于集合 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/bba7ad7a7aebbce57c57d8290ef9fed9.svg" alt="六、 约束优化 - 图9" /> 中的那些 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/df1802176e78bd9cca91b6437e22d0bd.svg" alt="六、 约束优化 - 图10" /> 。</p><ul><li>另一个做法：将线性搜索得到的新的 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/86dcd33cfec6b67f675de857c11dea1a.svg" alt="六、 约束优化 - 图11" /> 映射到集合 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/bba7ad7a7aebbce57c57d8290ef9fed9.svg" alt="六、 约束优化 - 图12" /> 中。</li><li>或者：在线性搜索之前，将梯度投影到可行域的切空间内。</li></ul></li><li><p>在约束最优化问题中，常常利用拉格朗日对偶性将原始问题转换为对偶问题，通过求解对偶问题而得到原始问题的解。</p></li><li><p>约束最优化问题的原始问题：假设 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/3cb5bcc195b5e4ed18ebe7e8c1a63057.svg" alt="六、 约束优化 - 图13" /> 是定义在 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/df57402caa4fa4d775c867799226ef80.svg" alt="六、 约束优化 - 图14" /> 上的连续可微函数。考虑约束最优化问题：</p><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/94a83adeda08e13d7260a544869e9d30.svg" alt="六、 约束优化 - 图15" /></p><p>可行域由等式和不等式确定：<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/280c20448d273cb0af12d73368e25b78.svg" alt="六、 约束优化 - 图16" /> 。</p></li></ol><h2 id="61-原始问题"><a class="markdownIt-Anchor" href="#61-原始问题"></a> 6.1 原始问题</h2><ol><li><p>引入拉格朗日函数：</p><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/a71b34692f23b8e52e10a0c3d30de3b5.svg" alt="六、 约束优化 - 图17" /></p><p>这里 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/87390ab46b92ff4b2b7b05744004b55f.svg" alt="六、 约束优化 - 图18" /> 是拉格朗日乘子， <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/63fe685201d42df6b1b597662bebb728.svg" alt="六、 约束优化 - 图19" /> 。</p><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/bf05e91f929fcd631742d3997a266414.svg" alt="六、 约束优化 - 图20" /> 是 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/af66ba659ce47666c6cc4f556b97eac9.svg" alt="六、 约束优化 - 图21" /> 的多元非线性函数。</p></li><li><p>定义函数：</p><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/54e8e73dc8a330a21b90258ac1ec2113.svg" alt="六、 约束优化 - 图22" /></p><p>其中下标 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/86565c3da9e10ea73043b77145e067ef.svg" alt="六、 约束优化 - 图23" /> 表示原始问题。则有：</p><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/e6f1ff10634f5a5a59576430dcebc556.svg" alt="六、 约束优化 - 图24" /></p><ul><li>若 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/86dcd33cfec6b67f675de857c11dea1a.svg" alt="六、 约束优化 - 图25" /> 满足原问题的约束，则很容易证明 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/378a4b608c307c76a5082db8fe733f64.svg" alt="六、 约束优化 - 图26" /> ，等号在 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/b46d9589ffdd0acf2b601b40ddd7fbb6.svg" alt="六、 约束优化 - 图27" /> 时取到。</li><li>若 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/86dcd33cfec6b67f675de857c11dea1a.svg" alt="六、 约束优化 - 图28" /> 不满足原问题的约束：<ul><li>若不满足 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/9e1b3aa81a5fdcdf540d1cbddbfa870e.svg" alt="六、 约束优化 - 图29" /> ：设违反的为 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/9820b4c3c0cd3b0540b4a35d7e5c9278.svg" alt="六、 约束优化 - 图30" />，则令 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/64cfc652f2edb96e67909ca42611c90c.svg" alt="六、 约束优化 - 图31" />，有：<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/3d1b27dadf6de129509767cf42428287.svg" alt="六、 约束优化 - 图32" /> 。</li><li>若不满足 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/70c67f84478850252cb4f771db32b8cc.svg" alt="六、 约束优化 - 图33" /> ： 设违反的为 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/ffb42c7f6c5797267845457efcdace7e.svg" alt="六、 约束优化 - 图34" />，则令 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/19f0fbde0152f5411f36250213a0ff9d.svg" alt="六、 约束优化 - 图35" />，有：<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/7b2cc960fff11d5f5ff9b9a4b608f3db.svg" alt="六、 约束优化 - 图36" /> 。</li></ul></li></ul></li><li><p>考虑极小化问题：</p><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/80f39352c17f877e5704124cf700427c.svg" alt="六、 约束优化 - 图37" /></p><p>则该问题是与原始最优化问题是等价的，即他们有相同的问题。</p><ul><li><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/9afc9baa97ef4616592a9080f0902f62.svg" alt="六、 约束优化 - 图38" /> 称为广义拉格朗日函数的极大极小问题。</li><li>为了方便讨论，定义原始问题的最优值为：<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/f4c79bbf5d68f1ede96100f5edb8a626.svg" alt="六、 约束优化 - 图39" /> 。</li></ul></li></ol><h2 id="62-对偶问题"><a class="markdownIt-Anchor" href="#62-对偶问题"></a> 6.2 对偶问题</h2><ol><li><p>定义 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/15ee0b3ff367439314c5f05ed5c5126f.svg" alt="六、 约束优化 - 图40" />，考虑极大化 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/ce5c037af3b953009efc418313a6e062.svg" alt="六、 约束优化 - 图41" />，即：</p><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/2af22bb898a1bb800bcf2768154a0fc0.svg" alt="六、 约束优化 - 图42" /></p><p>问题 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/a2e694edc489f338968328b436da8aa4.svg" alt="六、 约束优化 - 图43" /> 称为广义拉格朗日函数的极大极小问题。它可以表示为约束最优化问题：</p><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/42338373cb89cb286cea444c96764ede.svg" alt="六、 约束优化 - 图44" /></p><p>称为原始问题的对偶问题。</p><p>为了方便讨论，定义对偶问题的最优值为：<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/ac6ad7b257528a8d71fdb10de05e724a.svg" alt="六、 约束优化 - 图45" /> 。</p></li><li><p>定理一：若原问题和对偶问题具有最优值，则：</p><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/0a4f59107392bba5f86e7efef7e664d9.svg" alt="六、 约束优化 - 图46" /></p><ul><li><p>推论一：设 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/d54cb1ab33438091ecdf015dfdd4ce9d.svg" alt="六、 约束优化 - 图47" /> 为原始问题的可行解，且 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/c18fa74acc14cfdae781cb3eb1dfd5a2.svg" alt="六、 约束优化 - 图48" /> 的值为 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/c14bcbcf3be588f39f6968166432cfbf.svg" alt="六、 约束优化 - 图49" /> ； <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/f1caa326a9838059ce4c8dff741f292e.svg" alt="六、 约束优化 - 图50" /> 为对偶问题的可行解， <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/bda73e2b7d9577582f76cba5caaabbdd.svg" alt="六、 约束优化 - 图51" /> 值为 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/ee7ea8f8694b741ea138100970da1455.svg" alt="六、 约束优化 - 图52" />。</p><p>如果有 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/55e6a4a6adca0303d82754581ed7d529.svg" alt="六、 约束优化 - 图53" />，则 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/56f1640d09535784cc681ce99ec8467a.svg" alt="六、 约束优化 - 图54" /> 分别为原始问题和对偶问题的最优解。</p></li></ul></li><li><p>定理二：假设函数 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/20a5de94ddb5187eecfad8d7d2f3b39f.svg" alt="六、 约束优化 - 图55" /> 和 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/d3fe96d7ce5cadd47770ceace5ad3c0b.svg" alt="六、 约束优化 - 图56" /> 为凸函数， <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/5019a8a2e4154e1d239c4432dc4c34ae.svg" alt="六、 约束优化 - 图57" /> 是仿射函数；并且假设不等式约束 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/d3fe96d7ce5cadd47770ceace5ad3c0b.svg" alt="六、 约束优化 - 图58" /> 是严格可行的，即存在<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/86dcd33cfec6b67f675de857c11dea1a.svg" alt="六、 约束优化 - 图59" /> ，对于所有 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/03044bce264471863b3681706b09ab8d.svg" alt="六、 约束优化 - 图60" /> 有 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/18e34f51bf1a25e3d001947335506a5e.svg" alt="六、 约束优化 - 图61" />。则存在 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/56f1640d09535784cc681ce99ec8467a.svg" alt="六、 约束优化 - 图62" /> ，使得： <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/d54cb1ab33438091ecdf015dfdd4ce9d.svg" alt="六、 约束优化 - 图63" /> 是原始问题 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/fbb6e2f4c1766e3586f6b3821fd37ac0.svg" alt="六、 约束优化 - 图64" /> 的解，<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/f1caa326a9838059ce4c8dff741f292e.svg" alt="六、 约束优化 - 图65" /> 是对偶问题 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/90e72d83d9b85822de9587d8ac110d60.svg" alt="六、 约束优化 - 图66" /> 的解，并且 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/9186dddc616261ceb7ffcbc320ebaf82.svg" alt="六、 约束优化 - 图67" /> 。</p></li><li><p>定理三：假设函数 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/20a5de94ddb5187eecfad8d7d2f3b39f.svg" alt="六、 约束优化 - 图68" /> 和 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/d3fe96d7ce5cadd47770ceace5ad3c0b.svg" alt="六、 约束优化 - 图69" /> 为凸函数， <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/5019a8a2e4154e1d239c4432dc4c34ae.svg" alt="六、 约束优化 - 图70" /> 是仿射函数；并且假设不等式约束 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/d3fe96d7ce5cadd47770ceace5ad3c0b.svg" alt="六、 约束优化 - 图71" /> 是严格可行的，即存在<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/86dcd33cfec6b67f675de857c11dea1a.svg" alt="六、 约束优化 - 图72" /> ，对于所有 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/03044bce264471863b3681706b09ab8d.svg" alt="六、 约束优化 - 图73" /> 有 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/18e34f51bf1a25e3d001947335506a5e.svg" alt="六、 约束优化 - 图74" />。则存在 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/56f1640d09535784cc681ce99ec8467a.svg" alt="六、 约束优化 - 图75" /> ，使得 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/d54cb1ab33438091ecdf015dfdd4ce9d.svg" alt="六、 约束优化 - 图76" /> 是原始问题 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/fbb6e2f4c1766e3586f6b3821fd37ac0.svg" alt="六、 约束优化 - 图77" /> 的解，<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/f1caa326a9838059ce4c8dff741f292e.svg" alt="六、 约束优化 - 图78" /> 是对偶问题 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/90e72d83d9b85822de9587d8ac110d60.svg" alt="六、 约束优化 - 图79" /> 的解的充要条件是：<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/56f1640d09535784cc681ce99ec8467a.svg" alt="六、 约束优化 - 图80" /> 满足下面的 <code>Karush-kuhn-Tucker(KKT)</code> 条件：</p><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/958b7df76da491bc8076dfedcb6642fe.svg" alt="六、 约束优化 - 图81" /></p></li><li><p>仿射函数：仿射函数即由<code>1</code>阶多项式构成的函数。</p><p>一般形式为 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/88be2fb3a9b6f4a49239ebe969536df5.svg" alt="六、 约束优化 - 图82" />。这里：<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/df2c1b3de5e4d6e405c423b6d5571b21.svg" alt="六、 约束优化 - 图83" /> 是一个 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/3ed6c63caa3faeacbfead4750a351395.svg" alt="六、 约束优化 - 图84" /> 矩阵，<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/86dcd33cfec6b67f675de857c11dea1a.svg" alt="六、 约束优化 - 图85" /> 是一个 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/a1cc8499ed2176475ae997495d68a754.svg" alt="六、 约束优化 - 图86" /> 维列向量，<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/327151543806511da21e6a26b4cf17f6.svg" alt="六、 约束优化 - 图87" /> 是一个 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/b7cb9d36658b8ba6eecdfadea9653052.svg" alt="六、 约束优化 - 图88" /> 维列向量。</p><p>它实际上反映了一种从 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/a1cc8499ed2176475ae997495d68a754.svg" alt="六、 约束优化 - 图89" /> 维到 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/b7cb9d36658b8ba6eecdfadea9653052.svg" alt="六、 约束优化 - 图90" /> 维的空间线性映射关系。</p></li><li><p>凸函数：设 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/60b1a651b9564561edd4d4a2aa5d86d0.svg" alt="六、 约束优化 - 图91" /> 为定义在区间 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/67bc409f62594d9e7cd2dc5c894336a6.svg" alt="六、 约束优化 - 图92" /> 上的函数，若对 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/67bc409f62594d9e7cd2dc5c894336a6.svg" alt="六、 约束优化 - 图93" /> 上的任意两点 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/604007c6db62260914d853958d6aae4a.svg" alt="六、 约束优化 - 图94" /> 和任意的实数 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/87ab1d96cafbcffb7fc6f00d8bf4d8a7.svg" alt="六、 约束优化 - 图95" />，总有 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/450a31a062af14b6b2703808ab5bc40f.svg" alt="六、 约束优化 - 图96" /> ，则 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/60b1a651b9564561edd4d4a2aa5d86d0.svg" alt="六、 约束优化 - 图97" /> 称为 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/67bc409f62594d9e7cd2dc5c894336a6.svg" alt="六、 约束优化 - 图98" /> 上的凸函数 。</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能/数学基础/数值计算-CH3-二阶导数与海森矩阵</title>
      <link href="/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97-CH3-%E4%BA%8C%E9%98%B6%E5%AF%BC%E6%95%B0%E4%B8%8E%E6%B5%B7%E6%A3%AE%E7%9F%A9%E9%98%B5/"/>
      <url>/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97-CH3-%E4%BA%8C%E9%98%B6%E5%AF%BC%E6%95%B0%E4%B8%8E%E6%B5%B7%E6%A3%AE%E7%9F%A9%E9%98%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="第-3-章-二阶导数与海森矩阵"><a class="markdownIt-Anchor" href="#第-3-章-二阶导数与海森矩阵"></a> 第 3 章 二阶导数与海森矩阵</h1><h2 id="31-海森矩阵"><a class="markdownIt-Anchor" href="#31-海森矩阵"></a> 3.1 海森矩阵</h2><ol><li><p>二阶导数 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113019.svg" alt="三、二阶导数与海森矩阵 - 图1" /> 刻画了曲率。假设有一个二次函数（实际任务中，很多函数不是二次的，但是在局部可以近似为二次函数）：</p><ul><li>如果函数的二阶导数为零，则它是一条直线。如果梯度为 1，则当沿着负梯度的步长为 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113039.svg" alt="三、二阶导数与海森矩阵 - 图2" /> 时，函数值减少 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113043.svg" alt="三、二阶导数与海森矩阵 - 图3" /> 。</li><li>如果函数的二阶导数为负，则函数向下弯曲。如果梯度为1，则当沿着负梯度的步长为 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113058.svg" alt="三、二阶导数与海森矩阵 - 图4" /> 时，函数值减少的量大于 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113137.svg" alt="三、二阶导数与海森矩阵 - 图5" /> 。</li><li>如果函数的二阶导数为正，则函数向上弯曲。如果梯度为1，则当沿着负梯度的步长为 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113140.svg" alt="三、二阶导数与海森矩阵 - 图6" /> 时，函数值减少的量少于 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113144.svg" alt="三、二阶导数与海森矩阵 - 图7" /> 。 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113152.png" alt="curvature.PNG" /></li></ul></li><li><p>当函数输入为多维时，定义海森矩阵：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113215.svg" alt="三、二阶导数与海森矩阵 - 图9" /></p><p>即海森矩阵的第 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113223.svg" alt="三、二阶导数与海森矩阵 - 图10" /> 行 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113225.svg" alt="三、二阶导数与海森矩阵 - 图11" /> 列元素为：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113228.svg" alt="三、二阶导数与海森矩阵 - 图12" /> 。</p></li><li><p>当二阶偏导是连续时，海森矩阵是对称阵，即有： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113242.svg" alt="三、二阶导数与海森矩阵 - 图13" /> 。</p><p>在深度学习中大多数海森矩阵都是对称阵。</p></li><li><p>对于特定方向 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113255.svg" alt="三、二阶导数与海森矩阵 - 图14" /> 上的二阶导数为：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113300.svg" alt="三、二阶导数与海森矩阵 - 图15" /> 。</p><ul><li>如果 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113305.svg" alt="三、二阶导数与海森矩阵 - 图16" /> 是海森矩阵的特征向量，则该方向的二阶导数就是对应的特征值。</li><li>如果 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113310.svg" alt="三、二阶导数与海森矩阵 - 图17" /> 不是海森矩阵的特征向量，则该方向的二阶导数就是所有特征值的加权平均，权重在 <code>(0,1)</code>之间。且与 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113314.svg" alt="三、二阶导数与海森矩阵 - 图18" /> 夹角越小的特征向量对应的特征值具有更大的权重。</li><li>最大特征值确定了最大二阶导数，最小特征值确定最小二阶导数。</li></ul></li></ol><h2 id="32-海森矩阵与学习率"><a class="markdownIt-Anchor" href="#32-海森矩阵与学习率"></a> 3.2 海森矩阵与学习率</h2><ol><li><p>将 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113419.svg" alt="三、二阶导数与海森矩阵 - 图19" /> 在 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113424.svg" alt="三、二阶导数与海森矩阵 - 图20" /> 处泰勒展开：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113427.svg" alt="三、二阶导数与海森矩阵 - 图21" /> 。其中： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113447.svg" alt="三、二阶导数与海森矩阵 - 图22" /> 为 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113457.svg" alt="三、二阶导数与海森矩阵 - 图23" /> 处的梯度； <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113457.svg" alt="三、二阶导数与海森矩阵 - 图24" /> 为 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113506.svg" alt="三、二阶导数与海森矩阵 - 图25" /> 处的海森矩阵。</p><p>根据梯度下降法：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113510.svg" alt="三、二阶导数与海森矩阵 - 图26" /> 。</p><p>应用在点 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113514.svg" alt="三、二阶导数与海森矩阵 - 图27" />，有：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113517.svg" alt="三、二阶导数与海森矩阵 - 图28" /> 。</p><ul><li>第一项代表函数在点 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113521.svg" alt="三、二阶导数与海森矩阵 - 图29" /> 处的值。</li><li>第二项代表由于斜率的存在，导致函数值的变化。</li><li>第三项代表由于曲率的存在，对于函数值变化的矫正。</li></ul></li><li><p>注意：如果 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113702.svg" alt="三、二阶导数与海森矩阵 - 图30" /> 较大，则很有可能导致：沿着负梯度的方向，函数值反而增加！</p><ul><li><p>如果 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113707.svg" alt="三、二阶导数与海森矩阵 - 图31" /> ，则无论 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113711.svg" alt="三、二阶导数与海森矩阵 - 图32" /> 取多大的值， 可以保证函数值是减小的。</p></li><li><p>如果 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113715.svg" alt="三、二阶导数与海森矩阵 - 图33" />， 则学习率 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113719.svg" alt="三、二阶导数与海森矩阵 - 图34" /> 不能太大。若 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113722.svg" alt="三、二阶导数与海森矩阵 - 图35" /> 太大则函数值增加。</p><ul><li><p>根据 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113725.svg" alt="三、二阶导数与海森矩阵 - 图36" /> ，则需要满足：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113728.svg" alt="三、二阶导数与海森矩阵 - 图37" /> 。若 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113730.svg" alt="三、二阶导数与海森矩阵 - 图38" /> ，则会导致沿着负梯度的方向函数值在增加。</p></li><li><p>考虑最速下降法，选择使得 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113734.svg" alt="三、二阶导数与海森矩阵 - 图39" /> 下降最快的 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113738.svg" alt="三、二阶导数与海森矩阵 - 图40" /> ，则有：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113740.svg" alt="三、二阶导数与海森矩阵 - 图41" /> 。求解 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113744.svg" alt="三、二阶导数与海森矩阵 - 图42" /> 有：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113746.svg" alt="三、二阶导数与海森矩阵 - 图43" /> 。</p><p>根据 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113749.svg" alt="三、二阶导数与海森矩阵 - 图44" /> ，很明显有： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113752.svg" alt="三、二阶导数与海森矩阵 - 图45" /> 。</p></li></ul></li></ul></li><li><p>由于海森矩阵为实对称阵，因此它可以进行特征值分解。假设其特征值从大到小排列为：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113756.svg" alt="三、二阶导数与海森矩阵 - 图46" /> 。</p><p>海森矩阵的瑞利商为： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113758.svg" alt="三、二阶导数与海森矩阵 - 图47" /> 。可以证明：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113803.svg" alt="三、二阶导数与海森矩阵 - 图48" /></p><p>根据 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113808.svg" alt="三、二阶导数与海森矩阵 - 图49" /> 可知：海森矩阵决定了学习率的取值范围。最坏的情况下，梯度 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113812.svg" alt="三、二阶导数与海森矩阵 - 图50" /> 与海森矩阵最大特征值 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113815.svg" alt="三、二阶导数与海森矩阵 - 图51" /> 对应的特征向量平行，则此时最优学习率为 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113818.svg" alt="三、二阶导数与海森矩阵 - 图52" /> 。</p></li></ol><h2 id="33-驻点与全局极小点"><a class="markdownIt-Anchor" href="#33-驻点与全局极小点"></a> 3.3 驻点与全局极小点</h2><ol><li><p>满足导数为零的点（即 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113822.svg" alt="三、二阶导数与海森矩阵 - 图53" /> ）称作驻点。驻点可能为下面三种类型之一：</p><ul><li>局部极小点：在 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113827.svg" alt="三、二阶导数与海森矩阵 - 图54" /> 的一个邻域内，该点的值最小。</li><li>局部极大点：在 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113830.svg" alt="三、二阶导数与海森矩阵 - 图55" /> 的一个邻域内，该点的值最大。</li><li>鞍点：既不是局部极小，也不是局部极大。</li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113833.png" alt="critical_point.PNG" /></p></li><li><p>全局极小点：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113842.svg" alt="三、二阶导数与海森矩阵 - 图57" />。</p><ul><li><p>全局极小点可能有一个或者多个。</p></li><li><p>在深度学习中，目标函数很可能具有非常多的局部极小点，以及许多位于平坦区域的鞍点。这使得优化非常不利。</p><p>因此通常选取一个非常低的目标函数值，而不一定要是全局最小值。 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113848.png" alt="deeplearning_optimization.PNG" /></p></li></ul></li><li><p>二阶导数可以配合一阶导数来决定驻点的类型：</p><ul><li>局部极小点：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113852.svg" alt="三、二阶导数与海森矩阵 - 图59" /> 。</li><li>局部极大点：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113855.svg" alt="三、二阶导数与海森矩阵 - 图60" /> 。</li><li><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113857.svg" alt="三、二阶导数与海森矩阵 - 图61" /> ：驻点的类型可能为任意三者之一。</li></ul></li><li><p>对于多维的情况类似有：</p><ul><li><p>局部极小点：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113900.svg" alt="三、二阶导数与海森矩阵 - 图62" />，且海森矩阵为正定的（即所有的特征值都是正的）。</p><p>当海森矩阵为正定时，任意方向的二阶偏导数都是正的。</p></li><li><p>局部极大点：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113902.svg" alt="三、二阶导数与海森矩阵 - 图63" />，且海森矩阵为负定的（即所有的特征值都是负的）。</p><p>当海森矩阵为负定时，任意方向的二阶偏导数都是负的。</p></li><li><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113906.svg" alt="三、二阶导数与海森矩阵 - 图64" />，且海森矩阵的特征值中至少一个正值、至少一个负值时，为鞍点。</p></li><li><p>当海森矩阵非上述情况时，驻点类型无法判断。</p></li></ul><p>下图为 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113909.svg" alt="三、二阶导数与海森矩阵 - 图65" /> 在原点附近的等值线。其海森矩阵为一正一负。</p><ul><li>沿着 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113912.svg" alt="三、二阶导数与海森矩阵 - 图66" /> 方向，曲线向上弯曲；沿着 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113915.svg" alt="三、二阶导数与海森矩阵 - 图67" /> 方向，曲线向下弯曲。</li><li>鞍点就是在一个横截面内的局部极小值，另一个横截面内的局部极大值。</li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200621113918.png" alt="saddle.PNG" /></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能/数学基础/数值计算-CH4-牛顿法</title>
      <link href="/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97-CH4-%E7%89%9B%E9%A1%BF%E6%B3%95/"/>
      <url>/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97-CH4-%E7%89%9B%E9%A1%BF%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="第-4-章-牛顿法"><a class="markdownIt-Anchor" href="#第-4-章-牛顿法"></a> 第 4 章 牛顿法</h1><ol><li><p>梯度下降法有个缺陷：它未能利用海森矩阵的信息。</p><ul><li><p>当海森矩阵的条件数较大时，不同方向的梯度的变化差异很大。</p><ul><li><p>在某些方向上，梯度变化很快；在有些方向上，梯度变化很慢。</p></li><li><p>梯度下降法未能利用海森矩阵，也就不知道应该优先搜索导数长期为负或者长期为正的方向。</p><p>本质上应该沿着负梯度方向搜索。但是沿着该方向的一段区间内，如果导数一直为正或者一直为负，则可以直接跨过该区间。前提是：必须保证该区间内，该方向导数不会发生正负改变。</p></li></ul></li><li><p>当海森矩阵的条件数较大时，也难以选择合适的步长。</p><ul><li>步长必须足够小，从而能够适应较强曲率的地方（对应着较大的二阶导数，即该区域比较陡峭）。</li><li>但是如果步长太小，对于曲率较小的地方（对应着较小的二阶导数，即该区域比较平缓）则推进太慢。</li></ul></li></ul></li><li><p>下图是利用梯度下降法寻找函数最小值的路径。该函数是二次函数，海森矩阵条件数为 5，表明最大曲率是最小曲率的5倍。红线为梯度下降的搜索路径。</p><blockquote><p>它没有用最速下降法，而是用到线性搜索。如果是最速下降法，则相邻两次搜索的方向正交。</p></blockquote><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/cdb31d0d27ab9fcf520d6d9dcaba2ac0.png" alt="g_descent.PNG" /></p></li><li><p>牛顿法结合了海森矩阵。</p><p>考虑泰勒展开式：<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/e0f214e1719cedd46f1c98d19979e4b4.svg" alt="四、牛顿法 - 图2" /> 。其中 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/f8ed3e46c2e89b33f6518cdbe2590277.svg" alt="四、牛顿法 - 图3" /> 为 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/1580c5c168f64b97c723c82574db5164.svg" alt="四、牛顿法 - 图4" /> 处的梯度； <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/57067a4153cc098522a3ef9adae370f0.svg" alt="四、牛顿法 - 图5" /> 为 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/1580c5c168f64b97c723c82574db5164.svg" alt="四、牛顿法 - 图6" /> 处的海森矩阵。</p><p>如果 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/2d3fc8817fdbb2cc3e44ded6b347e47c.svg" alt="四、牛顿法 - 图7" /> 为极值点，则有： <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/a9f4f9d9194a1776a5594c8b328407d5.svg" alt="四、牛顿法 - 图8" />，则有：<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/8449a1c8bc2b0c9b0d5ef2d773716aa3.svg" alt="四、牛顿法 - 图9" /> 。</p><ul><li>当 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/60b1a651b9564561edd4d4a2aa5d86d0.svg" alt="四、牛顿法 - 图10" /> 是个正定的二次型，则牛顿法直接一次就能到达最小值点。</li><li>当 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/60b1a651b9564561edd4d4a2aa5d86d0.svg" alt="四、牛顿法 - 图11" /> 不是正定的二次型，则可以在局部近似为正定的二次型，那么则采用多次牛顿法即可到达最小值点。</li></ul></li><li><p>一维情况下，梯度下降法和牛顿法的原理展示：</p><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/85be33ecba9f5eb637bd37c4d86398d2.jpeg" alt="newton" /></p><ul><li><p>梯度下降法：下一次迭代的点 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/188d71323c919c2b273084c517218f3a.svg" alt="四、牛顿法 - 图13" />。</p><p>对于一维的情况，可以固定 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/8ebc0f7156d02a58234de09a1f2b3b7c.svg" alt="四、牛顿法 - 图14" /> 。由于随着迭代的推进，<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/f79de0e5ceff9c75215dae7bfe2bfa42.svg" alt="四、牛顿法 - 图15" /> 绝对值是减小的（直到0），因此越靠近极值点，<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/6a17bf7621a752872e635643df475f42.svg" alt="四、牛顿法 - 图16" /> 越小。</p></li><li><p>牛顿法：目标是 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/1088fb0f330b54d8c7f4333833e0b53c.svg" alt="四、牛顿法 - 图17" />。</p><p>在一维情况下就是求解 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/44ba9a707f90d6d23d0d671378f0a94c.svg" alt="四、牛顿法 - 图18" />。牛顿法的方法是：以 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/9ca40eef5be3cdc162fda5a4623724df.svg" alt="四、牛顿法 - 图19" /> 做 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/6c740109aafc486dae6ab7024dd35b92.svg" alt="四、牛顿法 - 图20" /> 切线，该切线过点 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/7fd808d37f8256a0a8181801bedabe15.svg" alt="四、牛顿法 - 图21" />。该切线在 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/a0192ef7e2aa3d3e0e48bdd2906a0f40.svg" alt="四、牛顿法 - 图22" /> 轴上的交点就是： <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/7ff12cc5432f16693555c001bb708b48.svg" alt="四、牛顿法 - 图23" /> 。</p><p>推广到多维情况下就是：<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/3e4ac8a2c935d3e82059198e5c3b2274.svg" alt="四、牛顿法 - 图24" /> 。</p></li></ul></li><li><p>当位于一个极小值点附近时，牛顿法比梯度下降法能更快地到达极小值点。</p><p>如果在一个鞍点附近，牛顿法效果很差，因为牛顿法会主动跳入鞍点。而梯度下降法此时效果较好（除非负梯度的方向刚好指向了鞍点）。</p></li><li><p>仅仅利用了梯度的优化算法（如梯度下降法）称作一阶优化算法，同时利用了海森矩阵的优化算法（如牛顿法）称作二阶优化算法。</p></li><li><p>牛顿法算法：</p><ul><li>输入：<ul><li>目标函数 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/20a5de94ddb5187eecfad8d7d2f3b39f.svg" alt="四、牛顿法 - 图25" /></li><li>梯度 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/a3449263623ad5692edc80706175f5da.svg" alt="四、牛顿法 - 图26" /></li><li>海森矩阵 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/403a595090b916c507057ccaecf5ba14.svg" alt="四、牛顿法 - 图27" /></li><li>精度要求 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/050d005f9436c23262d6c9f27620e71f.svg" alt="四、牛顿法 - 图28" /></li></ul></li><li>输出： <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/20a5de94ddb5187eecfad8d7d2f3b39f.svg" alt="四、牛顿法 - 图29" /> 的极小值点 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/357c2bc6fc0b242315f49ef85b5af80e.svg" alt="四、牛顿法 - 图30" /></li><li>算法步骤：<ul><li>选取初始值 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/bfcb8ca9b89f46d88ff3f578ff54681a.svg" alt="四、牛顿法 - 图31" />, 置 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/2c8d979a4455d4486c53896f78b27aa8.svg" alt="四、牛顿法 - 图32" /> 。</li><li>迭代，停止条件为：梯度收敛。迭代步骤为：<ul><li>计算 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/1159a2396353dab70d4ca5fbc20186b2.svg" alt="四、牛顿法 - 图33" /> 。</li><li>若 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/021c99f3846a5db31cb7f2ffe12663e2.svg" alt="四、牛顿法 - 图34" />， 则停止计算，得到近似解 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/f524dcd6c503f416e32cb9764c353a42.svg" alt="四、牛顿法 - 图35" /> 。</li><li>若 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/d5ffcaada57bed21313f90be3165f696.svg" alt="四、牛顿法 - 图36" />， 则：<ul><li>计算 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/701231108c9d0fbe2f563715658168ea.svg" alt="四、牛顿法 - 图37" />，并求 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/7903df66d510fc7bdb89d8cdffc1407c.svg" alt="四、牛顿法 - 图38" />，使得：<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/911446f5814f8b40fc9673546e32560b.svg" alt="四、牛顿法 - 图39" /> 。</li><li>置 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/d6a8d09fb9aae2ed95290948fa4fb923.svg" alt="四、牛顿法 - 图40" /> 。</li><li>置 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/02fe1f48ca7175d0446ebbae4ebde287.svg" alt="四、牛顿法 - 图41" /> ，继续迭代。</li></ul></li></ul></li></ul></li></ul></li><li><p>梯度下降法中，每一次 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/86dcd33cfec6b67f675de857c11dea1a.svg" alt="四、牛顿法 - 图42" /> 增加的方向一定是梯度相反的方向 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/99506380316c5bbccfc89d52697e63e1.svg" alt="四、牛顿法 - 图43" /> 。增加的幅度由 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/b943461f7a53c2d93e949393b4027a77.svg" alt="四、牛顿法 - 图44" /> 决定，若跨度过大容易引发震荡。</p><p>而牛顿法中，每一次 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/86dcd33cfec6b67f675de857c11dea1a.svg" alt="四、牛顿法 - 图45" /> 增加的方向是梯度增速最大的反方向 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/ae6960616eac2440b565fabe2a941a3d.svg" alt="四、牛顿法 - 图46" />（它通常情况下与梯度不共线）。增加的幅度已经包含在 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/03e06ab9bf90599c3e32beafa16b0878.svg" alt="四、牛顿法 - 图47" /> 中（也可以乘以学习率作为幅度的系数）。</p><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/6ae7434c4c639acac86943b94f55dd40.png" alt="gradient_descent_newton" /></p></li><li><p>深度学习中的目标函数非常复杂，无法保证可以通过上述优化算法进行优化。因此有时会限定目标函数具有<code>Lipschitz</code>连续，或者其导数<code>Lipschitz</code>连续。</p><ul><li><code>Lipschitz</code>连续的定义：对于函数 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/60b1a651b9564561edd4d4a2aa5d86d0.svg" alt="四、牛顿法 - 图49" />，存在一个<code>Lipschitz</code>常数 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/9b59e5e22dc8de1d5b55d7f355ab3bdf.svg" alt="四、牛顿法 - 图50" />，使得：</li></ul><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/18fb864d3cffd81898bc2847f40d9ba8.svg" alt="四、牛顿法 - 图51" /></p><ul><li><p><code>Lipschitz</code>连续的意义是：输入的一个很小的变化，会引起输出的一个很小的变化。</p><blockquote><p>与之相反的是：输入的一个很小的变化，会引起输出的一个很大的变化</p></blockquote></li></ul></li><li><p>凸优化在某些特殊的领域取得了巨大的成功。但是在深度学习中，大多数优化问题都难以用凸优化来描述。</p><p>凸优化的重要性在深度学习中大大降低。凸优化仅仅作为一些深度学习算法的子程序。</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能/数学基础/数值计算-CH5-拟牛顿法</title>
      <link href="/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97-CH5-%E6%8B%9F%E7%89%9B%E9%A1%BF%E6%B3%95/"/>
      <url>/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97-CH5-%E6%8B%9F%E7%89%9B%E9%A1%BF%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="第-5-章-拟牛顿法"><a class="markdownIt-Anchor" href="#第-5-章-拟牛顿法"></a> 第 5 章 拟牛顿法</h1><h2 id="51-原理"><a class="markdownIt-Anchor" href="#51-原理"></a> 5.1 原理</h2><ol><li><p>在牛顿法的迭代中，需要计算海森矩阵的逆矩阵 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/f23f0a32528f5879a77d903bb2308103.svg" alt="五、拟牛顿法 - 图1" />，这一计算比较复杂。</p><p>可以考虑用一个 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/9f272918b0861230b374fdb073e149bb.svg" alt="五、拟牛顿法 - 图2" /> 阶矩阵 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/c3aed0ee00ef5ae52da0b660e031e742.svg" alt="五、拟牛顿法 - 图3" /> 来近似代替 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/3c4db4b855fcb07616191e6c4d73312f.svg" alt="五、拟牛顿法 - 图4" />。</p></li><li><p>先看海森矩阵满足的条件：<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/028270db1288e6860c704efe53a32182.svg" alt="五、拟牛顿法 - 图5" /> 。</p><ul><li><p>令 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/67d73b94fa75e79cfd410637a5601467.svg" alt="五、拟牛顿法 - 图6" /> 。则有：<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/026f95c88544db2b243b4d03fa095f28.svg" alt="五、拟牛顿法 - 图7" />，或者 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/ce5182d2502527e020503ab3d42d879f.svg" alt="五、拟牛顿法 - 图8" />。</p><p>这称为拟牛顿条件。</p></li><li><p>根据牛顿法的迭代： <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/3e4ac8a2c935d3e82059198e5c3b2274.svg" alt="五、拟牛顿法 - 图9" />，将 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/20a5de94ddb5187eecfad8d7d2f3b39f.svg" alt="五、拟牛顿法 - 图10" /> 在 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/17beb32c83647f0abab41f0d9d158e5c.svg" alt="五、拟牛顿法 - 图11" /> 的一阶泰勒展开：</p><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/577fa7958be3531aabfb66f502ec3473.svg" alt="五、拟牛顿法 - 图12" /></p><p>当 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/c7782320b53915298a9048b5129f3ba7.svg" alt="五、拟牛顿法 - 图13" /> 是正定矩阵时，总有 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/3621964e2eeeb7d5f932c7e9796a7618.svg" alt="五、拟牛顿法 - 图14" />，因此每次都是沿着函数递减的方向迭代。</p></li></ul></li><li><p>如果选择 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/5fdb93ada21717d18009f379bbccd63b.svg" alt="五、拟牛顿法 - 图15" /> 作为 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/ef1510488e061857a09cd19890b06224.svg" alt="五、拟牛顿法 - 图16" /> 的近似时，<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/5fdb93ada21717d18009f379bbccd63b.svg" alt="五、拟牛顿法 - 图17" /> 同样要满足两个条件：</p><ul><li><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/5fdb93ada21717d18009f379bbccd63b.svg" alt="五、拟牛顿法 - 图18" /> 必须是正定的。</p></li><li><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/5fdb93ada21717d18009f379bbccd63b.svg" alt="五、拟牛顿法 - 图19" /> 满足拟牛顿条件：<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/f4cf37e7bc6af3dfc3bed50a3b07b1e9.svg" alt="五、拟牛顿法 - 图20" /> 。</p><p>因为 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/43a2bb2b1ac5c63d99dbcd800669ce44.svg" alt="五、拟牛顿法 - 图21" /> 是给定的初始化条件，所以下标从 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/e34f758af9775d2588fd19f3777a06b3.svg" alt="五、拟牛顿法 - 图22" /> 开始。</p></li></ul><p>按照拟牛顿条件，在每次迭代中可以选择更新矩阵 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/968c219d6fca60056c86afb3a85fc024.svg" alt="五、拟牛顿法 - 图23" /> 。</p></li><li><p>正定矩阵定义：设 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/7f192304d6e5b32d5049d3559af0140c.svg" alt="五、拟牛顿法 - 图24" /> 是 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/7d46fec978a19f859b1569b2446f0c35.svg" alt="五、拟牛顿法 - 图25" /> 阶方阵，如果对任何非零向量<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/86dcd33cfec6b67f675de857c11dea1a.svg" alt="五、拟牛顿法 - 图26" /> ，都有 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/39a5fc49bc4d5d67e00acf213af2745a.svg" alt="五、拟牛顿法 - 图27" />，就称 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/7f192304d6e5b32d5049d3559af0140c.svg" alt="五、拟牛顿法 - 图28" />正定矩阵。</p><ul><li>正定矩阵判定：<ul><li>判定定理1：对称阵 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/7f192304d6e5b32d5049d3559af0140c.svg" alt="五、拟牛顿法 - 图29" /> 为正定的充分必要条件是：<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/7f192304d6e5b32d5049d3559af0140c.svg" alt="五、拟牛顿法 - 图30" /> 的特征值全为正。</li><li>判定定理2：对称阵 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/7f192304d6e5b32d5049d3559af0140c.svg" alt="五、拟牛顿法 - 图31" /> 为正定的充分必要条件是：<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/7f192304d6e5b32d5049d3559af0140c.svg" alt="五、拟牛顿法 - 图32" /> 的各阶顺序主子式都为正。</li><li>判定定理3：任意阵 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/7f192304d6e5b32d5049d3559af0140c.svg" alt="五、拟牛顿法 - 图33" /> 为正定的充分必要条件是：<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/7f192304d6e5b32d5049d3559af0140c.svg" alt="五、拟牛顿法 - 图34" /> 合同于单位阵。</li></ul></li><li>正定矩阵的性质：<ul><li>正定矩阵一定是非奇异的。奇异矩阵的定义：若 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/7d46fec978a19f859b1569b2446f0c35.svg" alt="五、拟牛顿法 - 图35" /> 阶矩阵 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/7f192304d6e5b32d5049d3559af0140c.svg" alt="五、拟牛顿法 - 图36" /> 为奇异阵，则其的行列式为零，即 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/491af7930d8edd6fd22c92b2b97d65b7.svg" alt="五、拟牛顿法 - 图37" />。</li><li>正定矩阵的任一主子矩阵也是正定矩阵。</li><li>若 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/7f192304d6e5b32d5049d3559af0140c.svg" alt="五、拟牛顿法 - 图38" /> 为<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/7d46fec978a19f859b1569b2446f0c35.svg" alt="五、拟牛顿法 - 图39" /> 阶对称正定矩阵，则存在唯一的主对角线元素都是正数的下三角阵 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/223fe439d461c38a1061e45316137d90.svg" alt="五、拟牛顿法 - 图40" />，使得 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/ed7a8f06bd0239869312a63cffe0344d.svg" alt="五、拟牛顿法 - 图41" />，此分解式称为 正定矩阵的乔列斯基（<code>Cholesky</code>）分解。</li><li>若 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/7f192304d6e5b32d5049d3559af0140c.svg" alt="五、拟牛顿法 - 图42" /> 为 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/7d46fec978a19f859b1569b2446f0c35.svg" alt="五、拟牛顿法 - 图43" /> 阶正定矩阵，则 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/7f192304d6e5b32d5049d3559af0140c.svg" alt="五、拟牛顿法 - 图44" /> 为 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/7d46fec978a19f859b1569b2446f0c35.svg" alt="五、拟牛顿法 - 图45" /> 阶可逆矩阵。</li></ul></li><li>正定矩阵在某个合同变换下可化为标准型， 即对角矩阵。</li><li>所有特征值大于零的对称矩阵也是正定矩阵。</li></ul></li><li><p>合同矩阵：两个实对称矩阵 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/df2c1b3de5e4d6e405c423b6d5571b21.svg" alt="五、拟牛顿法 - 图46" /> 和 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/8c8943fb1f28ff5743466c6f6d15d91a.svg" alt="五、拟牛顿法 - 图47" /> 是合同的，当且仅当存在一个可逆矩阵 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/bb6b659694450ca004ccb674046a3fda.svg" alt="五、拟牛顿法 - 图48" /> ，使得 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/e95d6566bd0b4ab2e4b0b05172d73d4c.svg" alt="五、拟牛顿法 - 图49" /></p><ul><li><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/df2c1b3de5e4d6e405c423b6d5571b21.svg" alt="五、拟牛顿法 - 图50" /> 的合同变换：对某个可逆矩阵 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/bb6b659694450ca004ccb674046a3fda.svg" alt="五、拟牛顿法 - 图51" />，对 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/df2c1b3de5e4d6e405c423b6d5571b21.svg" alt="五、拟牛顿法 - 图52" /> 执行 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/3493919a769d761e90ad72c40a88396b.svg" alt="五、拟牛顿法 - 图53" />。</li></ul></li></ol><h2 id="52-dfp-算法"><a class="markdownIt-Anchor" href="#52-dfp-算法"></a> 5.2 DFP 算法</h2><ol><li><p><code>DFP</code>算法( <code>Davidon-Fletcher-Powell</code>) 选择 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/456644634e803999a9a9aab04bc67514.svg" alt="五、拟牛顿法 - 图54" /> 的方法是：</p><p>假设每一步迭代中 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/456644634e803999a9a9aab04bc67514.svg" alt="五、拟牛顿法 - 图55" /> 是由 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/5fdb93ada21717d18009f379bbccd63b.svg" alt="五、拟牛顿法 - 图56" /> 加上两个附加项构成：<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/199915d60508d66f709117709cad4499.svg" alt="五、拟牛顿法 - 图57" />，其中 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/ee9f88c821fc59396437a020a4f5c3a9.svg" alt="五、拟牛顿法 - 图58" /> 是待定矩阵。此时有：<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/5440b757d72a8bd29689bd62321b4051.svg" alt="五、拟牛顿法 - 图59" />。</p><p>为了满足拟牛顿条件，可以取：<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/262b68f7abefc3643f687986990105eb.svg" alt="五、拟牛顿法 - 图60" />。</p><p>这样的<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/ee9f88c821fc59396437a020a4f5c3a9.svg" alt="五、拟牛顿法 - 图61" /> 不止一个。例如取 ：</p><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/33e013efc3817197f817ab83724dba06.svg" alt="五、拟牛顿法 - 图62" /></p><p>则迭代公式为：</p><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/02cbd79793e4aac3c3972027aa9fe9f2.svg" alt="五、拟牛顿法 - 图63" /></p><p>可以证明：如果初始矩阵 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/43a2bb2b1ac5c63d99dbcd800669ce44.svg" alt="五、拟牛顿法 - 图64" /> 是正定的，则迭代过程中每个矩阵 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/5fdb93ada21717d18009f379bbccd63b.svg" alt="五、拟牛顿法 - 图65" /> 都是正定的。</p></li><li><p><code>DFP</code>算法：</p><ul><li>输入：<ul><li>目标函数 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/20a5de94ddb5187eecfad8d7d2f3b39f.svg" alt="五、拟牛顿法 - 图66" /></li><li>梯度 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/a3449263623ad5692edc80706175f5da.svg" alt="五、拟牛顿法 - 图67" /></li><li>精度要求 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/050d005f9436c23262d6c9f27620e71f.svg" alt="五、拟牛顿法 - 图68" /></li></ul></li><li>输出： <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/20a5de94ddb5187eecfad8d7d2f3b39f.svg" alt="五、拟牛顿法 - 图69" /> 的极小值点 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/357c2bc6fc0b242315f49ef85b5af80e.svg" alt="五、拟牛顿法 - 图70" /></li><li>算法步骤：<ul><li>选取初始值 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/bfcb8ca9b89f46d88ff3f578ff54681a.svg" alt="五、拟牛顿法 - 图71" />, 取 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/43a2bb2b1ac5c63d99dbcd800669ce44.svg" alt="五、拟牛顿法 - 图72" /> 为正定对称矩阵，置 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/2c8d979a4455d4486c53896f78b27aa8.svg" alt="五、拟牛顿法 - 图73" /> 。</li><li>迭代，停止条件为：梯度收敛。迭代步骤为：<ul><li>计算 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/1159a2396353dab70d4ca5fbc20186b2.svg" alt="五、拟牛顿法 - 图74" /> 。</li><li>若 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/021c99f3846a5db31cb7f2ffe12663e2.svg" alt="五、拟牛顿法 - 图75" />， 则停止计算，得到近似解 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/f524dcd6c503f416e32cb9764c353a42.svg" alt="五、拟牛顿法 - 图76" />。</li><li>若 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/d5ffcaada57bed21313f90be3165f696.svg" alt="五、拟牛顿法 - 图77" />， 则：<ul><li>计算 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/3991cb846b069ac08c70e280df0a4969.svg" alt="五、拟牛顿法 - 图78" /> 。</li><li>一维搜索：求 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/b943461f7a53c2d93e949393b4027a77.svg" alt="五、拟牛顿法 - 图79" />： <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/9260bf980195d869aedbb00d781a2116.svg" alt="五、拟牛顿法 - 图80" /> 。</li><li>设置 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/78f286371aa0185897f425349c6c25fa.svg" alt="五、拟牛顿法 - 图81" /> 。</li><li>计算 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/b3e37076e3478890f9589da19d5f498b.svg" alt="五、拟牛顿法 - 图82" />。若 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/e530bf9dd9060f828e5d7036f0fff43f.svg" alt="五、拟牛顿法 - 图83" />， 则停止计算，得到近似解 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/f524dcd6c503f416e32cb9764c353a42.svg" alt="五、拟牛顿法 - 图84" /> 。</li><li>否则计算 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/456644634e803999a9a9aab04bc67514.svg" alt="五、拟牛顿法 - 图85" />，置 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/02fe1f48ca7175d0446ebbae4ebde287.svg" alt="五、拟牛顿法 - 图86" />，继续迭代。</li></ul></li></ul></li></ul></li></ul></li><li><p><code>DFP</code>算法中，每一次 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/86dcd33cfec6b67f675de857c11dea1a.svg" alt="五、拟牛顿法 - 图87" /> 增加的方向是 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/f93a31ad7c1685d7b2af0d494b77be40.svg" alt="五、拟牛顿法 - 图88" /> 的方向。增加的幅度由 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/b943461f7a53c2d93e949393b4027a77.svg" alt="五、拟牛顿法 - 图89" /> 决定，若跨度过大容易引发震荡。</p><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/1a801fca61c6bd1418b13311d37b004e.png" alt="gradient_descent_newton_dfp" /></p></li></ol><h2 id="52-bfgs-算法"><a class="markdownIt-Anchor" href="#52-bfgs-算法"></a> 5.2 BFGS 算法</h2><ol><li><p><code>BFGS</code>是最流行的拟牛顿算法。 <code>DFP</code>算法中，用 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/5fdb93ada21717d18009f379bbccd63b.svg" alt="五、拟牛顿法 - 图91" /> 逼近 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/f23f0a32528f5879a77d903bb2308103.svg" alt="五、拟牛顿法 - 图92" />。换个角度看，可以用矩阵 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/beef5366abaa82a319ab6a9da88772b5.svg" alt="五、拟牛顿法 - 图93" /> 逼近海森矩阵 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/57067a4153cc098522a3ef9adae370f0.svg" alt="五、拟牛顿法 - 图94" />。此时对应的拟牛顿条件为： <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/6db35a26e7ffd333dc9d140f7587f77a.svg" alt="五、拟牛顿法 - 图95" />。</p><blockquote><p>因为 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/c96014fcd37798463fcce62e0a215f47.svg" alt="五、拟牛顿法 - 图96" /> 是给定的初始化条件，所以下标从 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/e34f758af9775d2588fd19f3777a06b3.svg" alt="五、拟牛顿法 - 图97" /> 开始。</p></blockquote></li><li><p>令： <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/b06cb0cf1992ee5c67ae6df6b8535d19.svg" alt="五、拟牛顿法 - 图98" />，有： <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/b852370b9fa0a2d5afb0d4dfd6ca7faf.svg" alt="五、拟牛顿法 - 图99" /> 。</p><p>可以取 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/8581192721033a643a3be5ba92f25551.svg" alt="五、拟牛顿法 - 图100" /> 。寻找合适的 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/ee9f88c821fc59396437a020a4f5c3a9.svg" alt="五、拟牛顿法 - 图101" /> ，可以得到 <code>BFGS</code> 算法矩阵的 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/e209f528b44cf5b6efac91a5705a34fd.svg" alt="五、拟牛顿法 - 图102" /> 的迭代公式：</p><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/60157a127e6464661e3b7e3071bc6578.svg" alt="五、拟牛顿法 - 图103" /></p><p>可以证明，若 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/c96014fcd37798463fcce62e0a215f47.svg" alt="五、拟牛顿法 - 图104" /> 是正定的，则迭代过程中每个矩阵 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/beef5366abaa82a319ab6a9da88772b5.svg" alt="五、拟牛顿法 - 图105" /> 都是正定的。</p></li><li><p><code>BFGS</code>算法：</p><ul><li><p>输入：</p><ul><li>目标函数 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/20a5de94ddb5187eecfad8d7d2f3b39f.svg" alt="五、拟牛顿法 - 图106" /></li><li>梯度 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/a3449263623ad5692edc80706175f5da.svg" alt="五、拟牛顿法 - 图107" /></li><li>精度要求 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/750d915d44091aa15b1e626053cf7de1.svg" alt="五、拟牛顿法 - 图108" /></li></ul></li><li><p>输出： <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/20a5de94ddb5187eecfad8d7d2f3b39f.svg" alt="五、拟牛顿法 - 图109" /> 的极小值点 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/357c2bc6fc0b242315f49ef85b5af80e.svg" alt="五、拟牛顿法 - 图110" /></p></li><li><p>算法步骤：</p><ul><li><p>选取初始值 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/bfcb8ca9b89f46d88ff3f578ff54681a.svg" alt="五、拟牛顿法 - 图111" />, 取 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/c96014fcd37798463fcce62e0a215f47.svg" alt="五、拟牛顿法 - 图112" /> 为正定对称矩阵，置 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/2c8d979a4455d4486c53896f78b27aa8.svg" alt="五、拟牛顿法 - 图113" /> 。</p></li><li><p>迭代，停止条件为：梯度收敛。迭代步骤为：</p><ul><li><p>计算 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/1159a2396353dab70d4ca5fbc20186b2.svg" alt="五、拟牛顿法 - 图114" /> 。</p></li><li><p>若 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/021c99f3846a5db31cb7f2ffe12663e2.svg" alt="五、拟牛顿法 - 图115" />， 则停止计算，得到近似解 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/f524dcd6c503f416e32cb9764c353a42.svg" alt="五、拟牛顿法 - 图116" /> 。</p></li><li><p>若 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/d5ffcaada57bed21313f90be3165f696.svg" alt="五、拟牛顿法 - 图117" />， 则:</p><ul><li><p>由 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/dd410764c6c44285908136d5c7948914.svg" alt="五、拟牛顿法 - 图118" /> 求出 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/7903df66d510fc7bdb89d8cdffc1407c.svg" alt="五、拟牛顿法 - 图119" /> 。</p><blockquote><p>这里表面上看需要对矩阵求逆。但是实际上 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/5f7e4a5ddf87f6807b93bf8bed5ad934.svg" alt="五、拟牛顿法 - 图120" /> 有迭代公式。根据<code>Sherman-Morrison</code> 公式以及 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/beef5366abaa82a319ab6a9da88772b5.svg" alt="五、拟牛顿法 - 图121" /> 的迭代公式，可以得到 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/5f7e4a5ddf87f6807b93bf8bed5ad934.svg" alt="五、拟牛顿法 - 图122" /> 的迭代公式。</p></blockquote></li><li><p>一维搜索：求 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/b943461f7a53c2d93e949393b4027a77.svg" alt="五、拟牛顿法 - 图123" />： <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/9260bf980195d869aedbb00d781a2116.svg" alt="五、拟牛顿法 - 图124" /> 。</p></li><li><p>设置 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/78f286371aa0185897f425349c6c25fa.svg" alt="五、拟牛顿法 - 图125" /> 。</p></li><li><p>计算 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/b3e37076e3478890f9589da19d5f498b.svg" alt="五、拟牛顿法 - 图126" />。若 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/e530bf9dd9060f828e5d7036f0fff43f.svg" alt="五、拟牛顿法 - 图127" /> ， 则停止计算，得到近似解 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/f524dcd6c503f416e32cb9764c353a42.svg" alt="五、拟牛顿法 - 图128" /> 。</p></li><li><p>否则计算 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/e209f528b44cf5b6efac91a5705a34fd.svg" alt="五、拟牛顿法 - 图129" /> ，置 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/02fe1f48ca7175d0446ebbae4ebde287.svg" alt="五、拟牛顿法 - 图130" /> ，继续迭代。</p></li></ul></li></ul></li></ul></li></ul></li><li><p><code>BFPS</code> 算法中，每一次 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/86dcd33cfec6b67f675de857c11dea1a.svg" alt="五、拟牛顿法 - 图131" /> 增加的方向是 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/a46d50d1a0d89f1ca58b9f3b1b8aea1b.svg" alt="五、拟牛顿法 - 图132" /> 的方向。增加的幅度由 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/b943461f7a53c2d93e949393b4027a77.svg" alt="五、拟牛顿法 - 图133" /> 决定，若跨度过大容易引发震荡。</p><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/b71556d80cea98c253aa51d078979623.png" alt="gradient_descent_newton_dfp" /></p></li></ol><h2 id="53-broyden-类算法"><a class="markdownIt-Anchor" href="#53-broyden-类算法"></a> 5.3 Broyden 类算法</h2><ol><li><p>若记 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/7c5d52cc817fb7bc3d61d8f0803a6447.svg" alt="五、拟牛顿法 - 图135" />，则对式子：</p><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/92d28cdd5dd264027fff4a3b8ad80464.svg" alt="五、拟牛顿法 - 图136" /></p><p>使用两次<code>Sherman-Morrison</code>公式可得：</p><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/2937e062f17cb953a38de20819d29e34.svg" alt="五、拟牛顿法 - 图137" /></p></li><li><p>令 <code>DFP</code> 算法获得的 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/456644634e803999a9a9aab04bc67514.svg" alt="五、拟牛顿法 - 图138" /> 的迭代公式记作：</p><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/81666ebe1df2aa98fff017f5d9b7f5b3.svg" alt="五、拟牛顿法 - 图139" /></p><p>由 <code>BFGS</code> 算法获得的 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/456644634e803999a9a9aab04bc67514.svg" alt="五、拟牛顿法 - 图140" /> 的迭代公式记作 ：</p><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/70f8ae3c4588590aae8dc5f9db961958.svg" alt="五、拟牛顿法 - 图141" /></p><p>他们都满足拟牛顿条件，所以他们的线性组合：<img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/5f3e85c8642f125173261e72acf0be83.svg" alt="五、拟牛顿法 - 图142" /> 也满足拟牛顿条件，而且是正定的，其中 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/bdb829fd5bed8e8fdcdb51f85c367900.svg" alt="五、拟牛顿法 - 图143" /> 。</p><p>这样获得了一族拟牛顿法，称为 <code>Broyden</code> 类算法。</p></li><li><p><code>Sherman-Morrison</code>公式：假设 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/df2c1b3de5e4d6e405c423b6d5571b21.svg" alt="五、拟牛顿法 - 图144" /> 是 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/9f272918b0861230b374fdb073e149bb.svg" alt="五、拟牛顿法 - 图145" /> 阶可逆矩阵， <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/3bcddd5e8a121f9d232b701075413f14.svg" alt="五、拟牛顿法 - 图146" /> 是 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/9f272918b0861230b374fdb073e149bb.svg" alt="五、拟牛顿法 - 图147" /> 维列向量，且 <img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/04179cec2362c116eec1362afb157581.svg" alt="五、拟牛顿法 - 图148" /> 也是可逆矩阵，则：</p><p><img src= "/img/loading.gif" data-src="https://static.bookstack.cn/projects/huaxiaozhuan-ai/e27bc41a51cbe44df0daccb933ade99e.svg" alt="五、拟牛顿法 - 图149" /></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能/数学基础/数值计算-CH2-梯度下降法</title>
      <link href="/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97-CH2-%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95/"/>
      <url>/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97-CH2-%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="第-2-章-梯度下降法"><a class="markdownIt-Anchor" href="#第-2-章-梯度下降法"></a> 第 2 章 梯度下降法</h1><ol><li><p>梯度下降法是求解无约束最优化问题的一种常见方法，优点是实现简单。</p></li><li><p>对于函数： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225213.svg" alt="二、梯度下降法 - 图1" />，假设输入 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225218.svg" alt="二、梯度下降法 - 图2" />，则定义梯度：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225223.svg" alt="二、梯度下降法 - 图3" /></p><p>函数的驻点满足： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225228.svg" alt="二、梯度下降法 - 图4" /> 。</p></li><li><p>沿着方向 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225242.svg" alt="二、梯度下降法 - 图5" /> 的方向导数<code>directional derivative</code>定义为：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225246.svg" alt="二、梯度下降法 - 图6" /></p><p>其中 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225258.svg" alt="二、梯度下降法 - 图7" /> 为单位向量。</p><p>方向导数就是 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225301.svg" alt="二、梯度下降法 - 图8" />。根据链式法则，它也等于 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225304.svg" alt="二、梯度下降法 - 图9" /> 。</p></li><li><p>为了最小化 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225308.svg" alt="二、梯度下降法 - 图10" />，则寻找一个方向：沿着该方向，函数值减少的速度最快（换句话说，就是增加最慢）。即：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225321.svg" alt="二、梯度下降法 - 图11" /></p><p>假设 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225325.svg" alt="二、梯度下降法 - 图12" /> 与梯度的夹角为 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225328.svg" alt="二、梯度下降法 - 图13" />，则目标函数等于：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225330.svg" alt="二、梯度下降法 - 图14" /> 。</p><p>考虑到 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225333.svg" alt="二、梯度下降法 - 图15" />，以及梯度的大小与 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225337.svg" alt="二、梯度下降法 - 图16" /> 无关，于是上述问题转化为：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225340.svg" alt="二、梯度下降法 - 图17" /></p><p>于是： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225343.svg" alt="二、梯度下降法 - 图18" />，即 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225349.svg" alt="二、梯度下降法 - 图19" /> 沿着梯度的相反的方向。即：梯度的方向是函数值增加最快的方向，梯度的相反方向是函数值减小的最快的方向。</p><p>因此：可以沿着负梯度的方向来降低 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225354.svg" alt="二、梯度下降法 - 图20" /> 的值，这就是梯度下降法。</p></li><li><p>根据梯度下降法，为了寻找 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225358.svg" alt="二、梯度下降法 - 图21" /> 的最小点，迭代过程为：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225401.svg" alt="二、梯度下降法 - 图22" /> 。其中：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225406.svg" alt="二、梯度下降法 - 图23" /> 为学习率，它是一个正数，决定了迭代的步长。</p><p>迭代结束条件为：梯度向量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225410.svg" alt="二、梯度下降法 - 图24" /> 的每个成分为零或者非常接近零。</p></li><li><p>选择学习率有多种方法：</p><ul><li><p>一种方法是：选择 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225416.svg" alt="二、梯度下降法 - 图25" /> 为一个小的、正的常数。</p></li><li><p>另一种方法是：给定多个 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225424.svg" alt="二、梯度下降法 - 图26" />，然后选择使得 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225427.svg" alt="二、梯度下降法 - 图27" /> 最小的那个值作为本次迭代的学习率（即：选择一个使得目标函数下降最大的学习率）。</p><p>这种做法叫做线性搜索<code>line search</code> 。</p></li><li><p>第三种方法是：求得使 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225432.svg" alt="二、梯度下降法 - 图28" /> 取极小值的 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225436.svg" alt="二、梯度下降法 - 图29" />，即求解最优化问题：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225438.svg" alt="二、梯度下降法 - 图30" /></p><p>这种方法也称作最速下降法。</p><ul><li><p>在最速下降法中，假设相邻的三个迭代点分别为： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225442.svg" alt="二、梯度下降法 - 图31" />，可以证明： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225445.svg" alt="二、梯度下降法 - 图32" />。即相邻的两次搜索的方向是正交的！</p><p>证明：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225449.svg" alt="二、梯度下降法 - 图33" /></p><p>根据最优化问题，有：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225452.svg" alt="二、梯度下降法 - 图34" /></p><p>将 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225457.svg" alt="二、梯度下降法 - 图35" /> 代入，有：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225503.svg" alt="二、梯度下降法 - 图36" /></p><p>为求 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225506.svg" alt="二、梯度下降法 - 图37" /> 极小值，则求解： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225509.svg" alt="二、梯度下降法 - 图38" /> 。</p><p>根据链式法则：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225513.svg" alt="二、梯度下降法 - 图39" /></p><p>即：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225516.svg" alt="二、梯度下降法 - 图40" /> 。则有：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225522.svg" alt="二、梯度下降法 - 图41" /> 。</p></li><li><p>此时迭代的路线是锯齿形的，因此收敛速度较慢。</p></li></ul></li></ul></li><li><p>某些情况下如果梯度向量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225526.svg" alt="二、梯度下降法 - 图42" /> 的形式比较简单，则可以直接求解方程：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225530.svg" alt="二、梯度下降法 - 图43" /> 。</p><p>此时不用任何迭代，直接获得解析解。</p></li><li><p>梯度下降算法：</p><ul><li><p>输入：</p><ul><li>目标函数 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225533.svg" alt="二、梯度下降法 - 图44" /></li><li>梯度函数 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225536.svg" alt="二、梯度下降法 - 图45" /></li><li>计算精度 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225539.svg" alt="二、梯度下降法 - 图46" /></li></ul></li><li><p>输出： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225543.svg" alt="二、梯度下降法 - 图47" /> 的极小点 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225545.svg" alt="二、梯度下降法 - 图48" /></p></li><li><p>算法步骤：</p><ul><li><p>选取初始值 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225550.svg" alt="二、梯度下降法 - 图49" />，置 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225553.svg" alt="二、梯度下降法 - 图50" /> 。</p></li><li><p>迭代，停止条件为：梯度收敛或者目标函数收敛。迭代步骤为：</p><ul><li><p>计算目标函数 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225600.svg" alt="二、梯度下降法 - 图51" />，计算梯度 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225604.svg" alt="二、梯度下降法 - 图52" /> 。</p></li><li><p>若梯度 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225607.svg" alt="二、梯度下降法 - 图53" />，则停止迭代，<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225610.svg" alt="二、梯度下降法 - 图54" /> 。</p></li><li><p>若梯度 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225613.svg" alt="二、梯度下降法 - 图55" />，则令 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225616.svg" alt="二、梯度下降法 - 图56" />，求 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225621.svg" alt="二、梯度下降法 - 图57" /> ： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225624.svg" alt="二、梯度下降法 - 图58" /> 。</p><blockquote><p>通常这也是个最小化问题。但是可以给定一系列的<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225628.svg" alt="二、梯度下降法 - 图59" />的值，如：<code>[10,1,0.1,0.01,0.001,0.0001]</code> 。然后从中挑选使得目标函数最小的那个。</p></blockquote></li><li><p>令 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225631.svg" alt="二、梯度下降法 - 图60" />，计算 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225637.svg" alt="二、梯度下降法 - 图61" /> 。</p><ul><li>若 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225639.svg" alt="二、梯度下降法 - 图62" />或者 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225643.svg" alt="二、梯度下降法 - 图63" /> 时，停止迭代，此时 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225647.svg" alt="二、梯度下降法 - 图64" /> 。</li><li>否则，令 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225652.svg" alt="二、梯度下降法 - 图65" /> ，计算梯度 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225650.svg" alt="二、梯度下降法 - 图66" /> 继续迭代。</li></ul></li></ul></li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619225656.png" alt="gradient_descent" /></p></li></ul></li><li><p>当目标函数是凸函数时，梯度下降法的解是全局最优的。通常情况下，梯度下降法的解不保证是全局最优的。</p></li><li><p>梯度下降法的收敛速度未必是最快的。</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能/数学基础/参考资料</title>
      <link href="/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/"/>
      <url>/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/</url>
      
        <content type="html"><![CDATA[<h1 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h1><ul><li><a href="https://www.bilibili.com/video/BV1b4411H7sE" target="_blank" rel="noopener">机器学习中的数学基础</a></li><li><a href="https://www.bookstack.cn/read/huaxiaozhuan-ai/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80.md" target="_blank" rel="noopener">AI 算法工程师手册 数学基础</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能/数学基础/数值计算-CH1-数值稳定性</title>
      <link href="/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97-CH1-%E6%95%B0%E5%80%BC%E7%A8%B3%E5%AE%9A%E6%80%A7/"/>
      <url>/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97-CH1-%E6%95%B0%E5%80%BC%E7%A8%B3%E5%AE%9A%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="第-1-章-数值稳定性"><a class="markdownIt-Anchor" href="#第-1-章-数值稳定性"></a> 第 1 章 数值稳定性</h1><ol><li><p>在计算机中执行数学运算需要使用有限的比特位来表达<code>实数</code>，这会<code>引入近似误差</code>。</p><p>近似误差可以在多步数值运算中传递、积累，从而导致理论上成功的算法失败。因此数值算法设计时要考虑将累计误差最小化。</p></li><li><p>当从头开始实现一个数值算法时，需要考虑数值稳定性。当使用现有的数值计算库（如<code>tensorflow</code> ）时，不需要考虑数值稳定性。</p></li></ol><h2 id="11-上溢出-下溢出"><a class="markdownIt-Anchor" href="#11-上溢出-下溢出"></a> 1.1 上溢出、下溢出</h2><ol><li><p>一种严重的误差是下溢出<code>underflow</code>：当接近零的数字四舍五入为零时，发生下溢出。</p><p>许多函数在参数为零和参数为一个非常小的正数时，行为是不同的。如：对数函数要求自变量大于零，除法中要求除数非零。</p></li><li><p>一种严重的误差是上溢出<code>overflow</code>：当数值非常大，超过了计算机的表示范围时，发生上溢出。</p></li><li><p>一个数值稳定性的例子是<code>softmax</code>函数。</p><p>设 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619224309.svg" alt="一、数值稳定性 - 图1" />，则<code>softmax</code>函数定义为：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619224315.svg" alt="一、数值稳定性 - 图2" /></p><p>当所有的 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619224318.svg" alt="一、数值稳定性 - 图3" /> 都等于常数 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619224322.svg" alt="一、数值稳定性 - 图4" /> 时，<code>softmax</code>函数的每个分量的理论值都为 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619224326.svg" alt="一、数值稳定性 - 图5" /> 。</p><ul><li>考虑 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619224329.svg" alt="一、数值稳定性 - 图6" /> 是一个非常大的负数（比如趋近负无穷），此时 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619224333.svg" alt="一、数值稳定性 - 图7" /> 下溢出。此时 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619224336.svg" alt="一、数值稳定性 - 图8" /> 分母为零，结果未定义。</li><li>考虑 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619224342.svg" alt="一、数值稳定性 - 图9" /> 是一个非常大的正数（比如趋近正无穷），此时 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619224346.svg" alt="一、数值稳定性 - 图10" /> 上溢出。 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619224349.svg" alt="一、数值稳定性 - 图11" /> 的结果未定义。</li></ul></li><li><p>为了解决<code>softmax</code>函数的数值稳定性问题，令 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619224353.svg" alt="一、数值稳定性 - 图12" />，则有 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619224356.svg" alt="一、数值稳定性 - 图13" /> 的第 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619224359.svg" alt="一、数值稳定性 - 图14" /> 个分量为：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619224403.svg" alt="一、数值稳定性 - 图15" /></p><ul><li>当 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619224409.svg" alt="一、数值稳定性 - 图16" /> 的分量较小时， <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619224412.svg" alt="一、数值稳定性 - 图17" /> 的分量至少有一个为零，从而导致 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619224415.svg" alt="一、数值稳定性 - 图18" /> 的分母至少有一项为 1，从而解决了下溢出的问题。</li><li>当 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619224420.svg" alt="一、数值稳定性 - 图19" /> 的分量较大时，<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619224423.svg" alt="一、数值稳定性 - 图20" /> 相当于分子分母同时除以一个非常大的数 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619224427.svg" alt="一、数值稳定性 - 图21" /> ，从而解决了上溢出。</li></ul></li><li><p>当 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619224431.svg" alt="一、数值稳定性 - 图22" /> 的分量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619224434.svg" alt="一、数值稳定性 - 图23" /> 较小时， <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619224437.svg" alt="一、数值稳定性 - 图24" /> 的计算结果可能为 0 。此时 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619224440.svg" alt="一、数值稳定性 - 图25" /> 趋向于负无穷，因此存在数值稳定性问题。</p><ul><li>通常需要设计专门的函数来计算 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619224445.svg" alt="一、数值稳定性 - 图26" /> ，而不是将 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619224449.svg" alt="一、数值稳定性 - 图27" /> 的结果传递给 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619224451.svg" alt="一、数值稳定性 - 图28" /> 函数。</li><li><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619224455.svg" alt="一、数值稳定性 - 图29" /> 函数应用非常广泛。通常将 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619224459.svg" alt="一、数值稳定性 - 图30" /> 函数的输出作为模型的输出。由于一般使用样本的交叉熵作为目标函数，因此需要用到 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619224504.svg" alt="一、数值稳定性 - 图31" /> 输出的对数。</li></ul></li><li><p><code>softmax</code> 名字的来源是<code>hardmax</code>。</p><ul><li><code>hardmax</code> 把一个向量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619224512.svg" alt="一、数值稳定性 - 图32" /> 映射成向量 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619224516.svg" alt="一、数值稳定性 - 图33" /> 。即：<img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619224518.svg" alt="一、数值稳定性 - 图34" /> 最大元素的位置填充<code>1</code>，其它位置填充<code>0</code>。</li><li><code>softmax</code> 会在这些位置填充<code>0.0~1.0</code> 之间的值（如：某个概率值）。</li></ul></li></ol><h2 id="12-conditioning"><a class="markdownIt-Anchor" href="#12-conditioning"></a> 1.2 Conditioning</h2><ol><li><p><code>Conditioning</code>刻画了一个函数的如下特性：当函数的输入发生了微小的变化时，函数的输出的变化有多大。</p><p>对于<code>Conditioning</code>较大的函数，在数值计算中可能有问题。因为函数输入的舍入误差可能导致函数输出的较大变化。</p></li><li><p>对于方阵 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619224525.svg" alt="一、数值稳定性 - 图35" /> ，其条件数<code>condition number</code>为：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619224528.svg" alt="一、数值稳定性 - 图36" /></p><p>其中 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619224532.svg" alt="一、数值稳定性 - 图37" /> 为 <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619224535.svg" alt="一、数值稳定性 - 图38" /> 的特征值。</p><ul><li>方阵的条件数就是最大的特征值除以最小的特征值。</li><li>当方阵的条件数很大时，矩阵的求逆将对误差特别敏感（即： <img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200619224539.svg" alt="一、数值稳定性 - 图39" /> 的一个很小的扰动，将导致其逆矩阵一个非常明显的变化）。</li><li>条件数是矩阵本身的特性，它会放大那些包含矩阵求逆运算过程中的误差。</li></ul></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能/人工智能的常用十种算法</title>
      <link href="/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%9A%84%E5%B8%B8%E7%94%A8%E5%8D%81%E7%A7%8D%E7%AE%97%E6%B3%95/"/>
      <url>/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%9A%84%E5%B8%B8%E7%94%A8%E5%8D%81%E7%A7%8D%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="人工智能的常用十种算法"><a class="markdownIt-Anchor" href="#人工智能的常用十种算法"></a> 人工智能的常用十种算法</h1><h2 id="1决策树"><a class="markdownIt-Anchor" href="#1决策树"></a> 1.决策树</h2><p>根据一些 feature 进行分类，每个节点提一个问题，通过判断，将数据分为两类，再继续提问。这些问题是根据已有数据学习出来的，再投入新数据的时候，就可以根据这棵树上的问题，将数据划分到合适的叶子上。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200516233645.jpg" alt="" /></p><h2 id="2随机森林"><a class="markdownIt-Anchor" href="#2随机森林"></a> 2.随机森林</h2><p><a href="https://www.youtube.com/watch?v=loNcrMjYh64" target="_blank" rel="noopener">视频</a></p><p>在源数据中随机选取数据，组成几个子集</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200516234038.jpg" alt="" /></p><p>S 矩阵是源数据，有 1-N 条数据，A B C 是feature，最后一列 C 是类别</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200516234112.jpg" alt="" /></p><p>由 S 随机生成 M 个子矩阵</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517095529.jpg" alt="" /></p><p>这 M 个子集得到 M 个决策树</p><p>将新数据投入到这 M 个树中，得到 M 个分类结果，计数看预测成哪一类的数目最多，就将此类别作为最后的预测结果</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517095702.jpg" alt="img" /></p><h2 id="3-逻辑回归"><a class="markdownIt-Anchor" href="#3-逻辑回归"></a> 3. 逻辑回归</h2><p><a href="https://www.youtube.com/watch?v=gNhogKJ_q7U" target="_blank" rel="noopener">视频</a></p><p>当预测目标是概率这样的，值域需要满足大于等于0，小于等于1的，这个时候单纯的线性模型是做不到的，因为在定义域不在某个范围之内时，值域也超出了规定区间。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517095820.jpg" alt="img" /></p><p>所以此时需要这样的形状的模型会比较好</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517095827.jpg" alt="img" /></p><p>那么怎么得到这样的模型呢？</p><p>这个模型需要满足两个条件 大于等于0，小于等于1<br />大于等于0 的模型可以选择 绝对值，平方值，这里用 指数函数，一定大于0<br />小于等于1 用除法，分子是自己，分母是自身加上1，那一定是小于1的了</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517095833.jpg" alt="img" /></p><p>再做一下变形，就得到了 logistic regression 模型</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517095839.jpg" alt="img" /></p><p>通过源数据计算可以得到相应的系数了</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517095843.jpg" alt="img" /></p><p>最后得到 logistic 的图形</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517095847.jpg" alt="img" /></p><h2 id="4-svm"><a class="markdownIt-Anchor" href="#4-svm"></a> 4. SVM</h2><p><a href="https://www.youtube.com/watch?v=1NxnPkZM9bc" target="_blank" rel="noopener">视频</a></p><p>support vector machine</p><p>要将两类分开，想要得到一个超平面，最优的超平面是到两类的 margin 达到最大，margin就是超平面与离它最近一点的距离，如下图，Z2&gt;Z1，所以绿色的超平面比较好</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517095852.jpg" alt="img" /></p><p>将这个超平面表示成一个线性方程，在线上方的一类，都大于等于1，另一类小于等于－1</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517095856.jpg" alt="img" /></p><p>点到面的距离根据图中的公式计算</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517095900.jpg" alt="img" /></p><p>所以得到 total margin 的表达式如下，目标是最大化这个 margin，就需要最小化分母，于是变成了一个优化问题</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517095904.jpg" alt="img" /></p><p>举个栗子，三个点，找到最优的超平面，定义了 weight vector＝（2，3）－（1，1）</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517095907.jpg" alt="img" /></p><p>得到 weight vector 为（a，2a），将两个点代入方程，代入（2，3）另其值＝1，代入（1，1）另其值＝-1，求解出 a 和 截矩 w0 的值，进而得到超平面的表达式。</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517095912.jpg" alt="img" /></p><p>a 求出来后，代入（a，2a）得到的就是 support vector</p><p>a 和 w0 代入超平面的方程就是 support vector machine</p><h2 id="5-朴素贝叶斯"><a class="markdownIt-Anchor" href="#5-朴素贝叶斯"></a> 5. 朴素贝叶斯</h2><p><a href="https://www.youtube.com/watch?v=TpjPzKODuXo" target="_blank" rel="noopener">视频</a></p><p>举个在 NLP 的应用</p><p>给一段文字，返回情感分类，这段文字的态度是positive，还是negative</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517095918.jpg" alt="img" /></p><p>为了解决这个问题，可以只看其中的一些单词</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517095923.jpg" alt="img" /></p><p>这段文字，将仅由一些单词和它们的计数代表</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517095927.jpg" alt="img" /></p><p>原始问题是：给你一句话，它属于哪一类</p><p>通过 bayes rules 变成一个比较简单容易求得的问题</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517095931.jpg" alt="img" /></p><p>问题变成，这一类中这句话出现的概率是多少，当然，别忘了公式里的另外两个概率</p><p>栗子：单词 love 在 positive 的情况下出现的概率是 0.1，在 negative 的情况下出现的概率是 0.001</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517095935.jpg" alt="img" /></p><h2 id="6-k最近邻"><a class="markdownIt-Anchor" href="#6-k最近邻"></a> 6. K最近邻</h2><p><a href="https://www.youtube.com/watch?v=zHbxbb2ye3E" target="_blank" rel="noopener">视频</a></p><p>k nearest neighbours</p><p>给一个新的数据时，离它最近的 k 个点中，哪个类别多，这个数据就属于哪一类</p><p>栗子：要区分 猫 和 狗，通过 claws 和 sound 两个feature来判断的话，圆形和三角形是已知分类的了，那么这个 star 代表的是哪一类呢</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517095938.jpg" alt="img" /></p><p>k＝3时，这三条线链接的点就是最近的三个点，那么圆形多一些，所以这个star就是属于猫</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517095942.jpg" alt="img" /></p><h2 id="7-k均值"><a class="markdownIt-Anchor" href="#7-k均值"></a> 7. K均值</h2><p><a href="https://www.youtube.com/watch?v=zHbxbb2ye3E" target="_blank" rel="noopener">视频</a></p><p>想要将一组数据，分为三类，粉色数值大，黄色数值小<br />最开心先初始化，这里面选了最简单的 3，2，1 作为各类的初始值<br />剩下的数据里，每个都与三个初始值计算距离，然后归类到离它最近的初始值所在类别</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517095946.jpg" alt="img" /></p><p>分好类后，计算每一类的平均值，作为新一轮的中心点</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517095949.jpg" alt="img" /></p><p>几轮之后，分组不再变化了，就可以停止了</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517095953.jpg" alt="img" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517095956.jpg" alt="img" /></p><h2 id="8-adaboost"><a class="markdownIt-Anchor" href="#8-adaboost"></a> 8. Adaboost</h2><p><a href="https://www.youtube.com/watch?v=rz9dnmHmZsY" target="_blank" rel="noopener">视频</a></p><p>adaboost 是 bosting 的方法之一</p><p>bosting就是把若干个分类效果并不好的分类器综合起来考虑，会得到一个效果比较好的分类器。</p><p>下图，左右两个决策树，单个看是效果不怎么好的，但是把同样的数据投入进去，把两个结果加起来考虑，就会增加可信度</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517100000.jpg" alt="img" /></p><p>adaboost 的栗子，手写识别中，在画板上可以抓取到很多 features，例如 始点的方向，始点和终点的距离等等</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517100004.jpg" alt="img" /></p><p>training 的时候，会得到每个 feature 的 weight，例如 2 和 3 的开头部分很像，这个 feature 对分类起到的作用很小，它的权重也就会较小</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517100007.jpg" alt="img" /></p><p>而这个 alpha 角 就具有很强的识别性，这个 feature 的权重就会较大，最后的预测结果是综合考虑这些 feature 的结果</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517100009.jpg" alt="img" /></p><h2 id="9-神经网络"><a class="markdownIt-Anchor" href="#9-神经网络"></a> 9. 神经网络</h2><p><a href="https://www.youtube.com/watch?v=P2HPcj8lRJE&amp;index=2&amp;list=PLjJh1vlSEYgvGod9wWiydumYl8hOXixNu" target="_blank" rel="noopener">视频</a></p><p>Neural Networks 适合一个input可能落入至少两个类别里</p><p>NN 由若干层神经元，和它们之间的联系组成<br />第一层是 input 层，最后一层是 output 层</p><p>在 hidden 层 和 output 层都有自己的 classifier</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517100013.jpg" alt="img" /></p><p>input 输入到网络中，被激活，计算的分数被传递到下一层，激活后面的神经层，最后output 层的节点上的分数代表属于各类的分数，下图例子得到分类结果为 class 1</p><p>同样的 input 被传输到不同的节点上，之所以会得到不同的结果是因为各自节点有不同的weights 和 bias</p><p>这也就是 forward propagation</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517100015.jpg" alt="img" /></p><h2 id="10-马尔可夫"><a class="markdownIt-Anchor" href="#10-马尔可夫"></a> 10. 马尔可夫</h2><p><a href="https://www.youtube.com/watch?v=56mGTszb_iM" target="_blank" rel="noopener">视频</a></p><p>Markov Chains 由 state 和 transitions 组成</p><p>栗子，根据这一句话 ‘the quick brown fox jumps over the lazy dog’，要得到 markov chain</p><p>步骤，先给每一个单词设定成一个状态，然后计算状态间转换的概率</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517100020.jpg" alt="img" /></p><p>这是一句话计算出来的概率，当你用大量文本去做统计的时候，会得到更大的状态转移矩阵，例如 the 后面可以连接的单词，及相应的概率</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517100022.jpg" alt="img" /></p><p>生活中，键盘输入法的备选结果也是一样的原理，模型会更高级</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200517100026.jpg" alt="img" /></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能/README</title>
      <link href="/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/README/"/>
      <url>/2020/08/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/README/</url>
      
        <content type="html"><![CDATA[<h1 id="人工智能ai"><a class="markdownIt-Anchor" href="#人工智能ai"></a> 人工智能【AI】</h1><ul><li><a href="%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%9A%84%E5%B8%B8%E7%94%A8%E5%8D%81%E7%A7%8D%E7%AE%97%E6%B3%95.md">人工智能的常用十种算法</a></li></ul><h2 id="数学基础"><a class="markdownIt-Anchor" href="#数学基础"></a> 数学基础</h2><ul><li><a href="%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99.md">【零】参考资料</a></li></ul><h3 id="高等数学基础"><a class="markdownIt-Anchor" href="#高等数学基础"></a> 高等数学基础</h3><ul><li><a href="%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6-CH1-%E5%85%83%E7%B4%A0%E5%92%8C%E6%9E%81%E9%99%90.md">【一】元素和极限</a></li><li><a href="%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6-CH2-%E4%B8%A4%E4%B8%AA%E9%87%8D%E8%A6%81%E7%9A%84%E6%9E%81%E9%99%90%E5%AE%9A%E7%90%86.md">【二】两个重要的极限定理</a></li><li><a href="%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6-CH3-%E5%AF%BC%E6%95%B0.md">【三】导数</a></li><li><a href="%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6-CH4-%E6%B3%B0%E5%8B%92%E5%B1%95%E5%BC%80.md">【四】泰勒展开</a></li><li><a href="%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6-CH5-%E5%81%8F%E5%AF%BC%E6%95%B0.md">【五】偏导数</a></li><li><a href="%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6-CH6-%E7%A7%AF%E5%88%86.md">【六】积分</a></li></ul><h3 id="线性代数基础"><a class="markdownIt-Anchor" href="#线性代数基础"></a> 线性代数基础</h3><ul><li><a href="%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-CH1-%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86.md">【一】基本知识</a></li><li><a href="%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-CH2-%E5%90%91%E9%87%8F%E6%93%8D%E4%BD%9C.md">【二】向量操作</a></li><li><a href="%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-CH3-%E7%9F%A9%E9%98%B5%E8%BF%90%E7%AE%97.md">【三】矩阵运算</a></li><li><a href="%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-CH4-%E7%89%B9%E6%AE%8A%E5%87%BD%E6%95%B0.md">【四】特殊函数</a></li></ul><h3 id="概率论基础"><a class="markdownIt-Anchor" href="#概率论基础"></a> 概率论基础</h3><ul><li><a href="%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%A6%82%E7%8E%87%E8%AE%BA-CH1-%E6%A6%82%E7%8E%87%E4%B8%8E%E5%88%86%E5%B8%83.md">【一】概率与分布</a></li><li><a href="%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%A6%82%E7%8E%87%E8%AE%BA-CH2-%E6%9C%9F%E6%9C%9B%E4%B8%8E%E6%96%B9%E5%B7%AE.md">【二】期望与方差</a></li><li><a href="%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%A6%82%E7%8E%87%E8%AE%BA-CH3-%E5%A4%A7%E6%95%B0%E5%AE%9A%E5%BE%8B%E5%8F%8A%E4%B8%AD%E5%BF%83%E6%9E%81%E9%99%90%E5%AE%9A%E7%90%86.md">【三】大数定律及中心极限定理</a></li><li><a href="%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%A6%82%E7%8E%87%E8%AE%BA-CH4-%E5%B8%B8%E8%A7%81%E6%A6%82%E7%8E%87%E5%88%86%E5%B8%83.md">【四】常见概率分布</a></li><li><a href="%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%A6%82%E7%8E%87%E8%AE%BA-CH5-%E5%85%88%E9%AA%8C%E5%88%86%E5%B8%83%E4%B8%8E%E5%90%8E%E9%AA%8C%E5%88%86%E5%B8%83.md">【五】先验分布与后验分布</a></li><li><a href="%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%A6%82%E7%8E%87%E8%AE%BA-CH6-%E4%BF%A1%E6%81%AF%E8%AE%BA.md">【六】信息论</a></li><li><a href="%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%A6%82%E7%8E%87%E8%AE%BA-CH7-%E5%85%B6%E4%BB%96.md">【七】其他</a></li></ul><h3 id="数值计算基础"><a class="markdownIt-Anchor" href="#数值计算基础"></a> 数值计算基础</h3><ul><li><a href="%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97-CH1-%E6%95%B0%E5%80%BC%E7%A8%B3%E5%AE%9A%E6%80%A7.md">【一】数值稳定性</a></li><li><a href="%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97-CH2-%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95.md">【二】梯度下降法</a></li><li><a href="%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97-CH3-%E4%BA%8C%E9%98%B6%E5%AF%BC%E6%95%B0%E4%B8%8E%E6%B5%B7%E6%A3%AE%E7%9F%A9%E9%98%B5.md">【三】二阶导数与海森矩阵</a></li><li><a href="%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97-CH4-%E7%89%9B%E9%A1%BF%E6%B3%95.md">【四】牛顿法</a></li><li><a href="%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97-CH5-%E6%8B%9F%E7%89%9B%E9%A1%BF%E6%B3%95.md">【五】拟牛顿法</a></li><li><a href="%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97-CH6-%E7%BA%A6%E6%9D%9F%E4%BC%98%E5%8C%96.md">【六】约束优化</a></li></ul><h3 id="蒙特卡洛方法与-mcmc-采样"><a class="markdownIt-Anchor" href="#蒙特卡洛方法与-mcmc-采样"></a> 蒙特卡洛方法与 MCMC 采样</h3><ul><li><a href="%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%96%B9%E6%B3%95%E4%B8%8EMCMC%E9%87%87%E6%A0%B7-CH1-%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%96%B9%E6%B3%95.md">【一】蒙特卡洛方法</a></li><li><a href="%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%96%B9%E6%B3%95%E4%B8%8EMCMC%E9%87%87%E6%A0%B7-CH2-%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E9%93%BE.md">【二】马尔可夫链</a></li><li><a href="%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%96%B9%E6%B3%95%E4%B8%8EMCMC%E9%87%87%E6%A0%B7-CH3-MCMC%E9%87%87%E6%A0%B7.md">【三】MCMC采样</a></li></ul><h2 id="机器学习"><a class="markdownIt-Anchor" href="#机器学习"></a> 机器学习</h2><ul><li><a href="%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%A6%82%E4%BD%95%E5%85%A5%E9%97%A8%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0.md">如何入门机器学习</a></li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200607103038.jpg" alt="" /></p><h3 id="机器学习基础"><a class="markdownIt-Anchor" href="#机器学习基础"></a> 机器学习基础</h3><ul><li><a href="%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%88%86%E7%B1%BB%E4%B8%8E%E4%B8%80%E8%88%AC%E6%80%9D%E8%B7%AF.md">机器学习的分类与一般思路</a></li></ul><p>细化机器学习路线：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200608205913.png" alt="image-20200608205911077" /></p><h3 id="西瓜书"><a class="markdownIt-Anchor" href="#西瓜书"></a> 西瓜书 🍉</h3><p>周志华《机器学习》西瓜书学习计划：<a href="https://notebook.js.org/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E8%A5%BF%E7%93%9C%E4%B9%A6/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92.pdf" target="_blank" rel="noopener">机器学习西瓜书学习计划</a> 根据计划学习：<a href="https://wugenqiang.gitee.io/file-storage/pdf.js/web/viewer.html?file=../../%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%91%A8%E5%BF%97%E5%8D%8E-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0_.pdf" target="_blank" rel="noopener">机器学习西瓜书 PDF</a></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200609135300.png" alt="image-20200609135250515" /></p><p>机器学习（西瓜书）思维导图：<a href="https://notebook.js.org/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E8%A5%BF%E7%93%9C%E4%B9%A6/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%EF%BC%88%E8%A5%BF%E7%93%9C%E4%B9%A6%EF%BC%89%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.pdf" target="_blank" rel="noopener">悄咪咪的点击我获取思维导图.pdf</a></p><ul><li><a href="%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E8%A5%BF%E7%93%9C%E4%B9%A6/CH0-%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99.md">【零】参考资料</a></li><li><a href="%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E8%A5%BF%E7%93%9C%E4%B9%A6/CH1-%E7%BB%AA%E8%AE%BA.md">【一】绪论</a></li><li><a href="%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E8%A5%BF%E7%93%9C%E4%B9%A6/CH2-%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B0%E4%B8%8E%E9%80%89%E6%8B%A9.md">【二】模型评估与选择</a></li></ul><h3 id="统计学习方法"><a class="markdownIt-Anchor" href="#统计学习方法"></a> 统计学习方法</h3><h3 id="机器学习课程-胡浩基"><a class="markdownIt-Anchor" href="#机器学习课程-胡浩基"></a> 机器学习课程 - 胡浩基</h3><p>?&gt; 偶然之间在 MOOC 上看到浙江大学胡浩基老师讲解的机器学习课程，听了几节课，觉得不错，适合入门机器学习，故整理了以下学习笔记，供往来人查阅！</p><ul><li><a href="%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B-%E8%83%A1%E6%B5%A9%E5%9F%BA/CH0-%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99.md">【零】参考资料</a></li><li><a href="%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B-%E8%83%A1%E6%B5%A9%E5%9F%BA/CH1-%E5%BC%95%E8%A8%80.md">【一】引言</a></li><li><a href="%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B-%E8%83%A1%E6%B5%A9%E5%9F%BA/CH2-%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA.md">【二】支持向量机</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>机器学习入门笔记</title>
      <link href="/2020/07/16/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/07/16/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>🔊 研究生阶段研究内容涉及机器学习、数据挖掘、图像处理以及生物信息学方向等，在此整理，止于至善，自利利他！如果有问题或者建议，欢迎来稿！</p></blockquote><ul><li><a href="https://notebook.js.org/#/%E5%85%B3%E4%BA%8E/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%AD%A6%E4%B9%A0%E5%85%AB%E9%97%AE" target="_blank" rel="noopener">🏆 研究生学习八问</a></li><li><a href="https://notebook.js.org/#/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/" target="_blank" rel="noopener">🤖 人工智能（AI）</a></li></ul><blockquote><p>🥝 打开<strong>钉钉</strong>，点击扫一扫进入下面这个群，群里很多大佬分享了许多人工智能相关的资料，包括 Python、机器学习、生物信息学、AI、数据挖掘、深度学习、计算机视觉、图像处理等等，欢迎共同维护和学习！如果你有更好的资料推荐，也可以直接上传共享，让我们一起营造出一个更好的学习氛围！使得学术研究更加符合时代的需求！Come On 🔔</p></blockquote><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/NoteBook/20200712165713.png" alt="资料分享群" /></p><p>👒 下面从上到下给出我在学习机器学习的过程中整理的学习笔记，在此做一个目录，方便查看吧，或者说也帮助正在入门的你！🎧</p><h1 id="1-python-入门学习笔记"><a class="markdownIt-Anchor" href="#1-python-入门学习笔记"></a> 1 Python 入门学习笔记</h1><ul><li><a href="https://notebook.js.org/#/Python/6%E5%B0%8F%E6%97%B6Python%E5%85%A5%E9%97%A8/6%E5%B0%8F%E6%97%B6Python%E5%85%A5%E9%97%A8" target="_blank" rel="noopener">0 - 6 小时 Python 入门</a> &gt;&gt; 推荐先跟这篇文档敲一遍，对 Python 有了初步认识后，再根据下面章节深入学习：</li><li><a href="https://notebook.js.org/#/Python/Python%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/CH1-Python%E5%9F%BA%E7%A1%80" target="_blank" rel="noopener">1 - Python 基础</a></li><li><a href="https://notebook.js.org/#/Python/Python%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/CH2-%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">2 - 函数</a></li><li><a href="https://notebook.js.org/#/Python/Python%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/CH3-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7" target="_blank" rel="noopener">3 - 高级特性</a></li><li><a href="https://notebook.js.org/#/Python/Python%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/CH4-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B" target="_blank" rel="noopener">4 - 函数式编程</a></li><li>待更新</li></ul><h1 id="2-python-数据分析"><a class="markdownIt-Anchor" href="#2-python-数据分析"></a> 2 Python 数据分析</h1><blockquote><p>🔊 推荐使用工具 <a href="https://notebook.js.org/#/Python/Jupyter-notebook%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97" target="_blank" rel="noopener">Jupyter notebook</a></p></blockquote><h1 id="3-机器学习理论入门"><a class="markdownIt-Anchor" href="#3-机器学习理论入门"></a> 3 机器学习理论入门</h1><h1 id="4-机器学习实战"><a class="markdownIt-Anchor" href="#4-机器学习实战"></a> 4 机器学习实战</h1><blockquote><p>🎉 本文将持续更新</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-Butterfly 博客搭建指南</title>
      <link href="/2020/07/14/Hexo-Butterfly%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/"/>
      <url>/2020/07/14/Hexo-Butterfly%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-butterfly-博客搭建指南"><a class="markdownIt-Anchor" href="#hexo-butterfly-博客搭建指南"></a> Hexo-Butterfly 博客搭建指南</h1><blockquote><p>在转载了原作者的配置文章基础之上，对语言和配置进行了优化与整合，尽量做到更加贴合零基础博客爱好者的配置和使用。原作者<a href="https://jerryc.me/" target="_blank" rel="noopener">博客地址</a>，原配置文档<a href="https://jerryc.me/posts/21cfbf15/" target="_blank" rel="noopener">链接</a>，同时也推荐大家阅读小康的<a href="https://www.antmoe.com/posts/a811d614/index.html" target="_blank" rel="noopener">魔改版博客</a>，nice！</p></blockquote><h2 id="1-hexo-框架搭建"><a class="markdownIt-Anchor" href="#1-hexo-框架搭建"></a> 1 Hexo 框架搭建</h2><h3 id="11-hexo-环境部署"><a class="markdownIt-Anchor" href="#11-hexo-环境部署"></a> 1.1 Hexo 环境部署</h3><p>Hexo 是一个基于 Node.js 快速、简洁且高效的博客框架，可以将 Markdown 文件快速的生成静态网页，托管在 GitHub Pages 上。</p><p>1.搭建所需软件</p><ul><li>各个软件官网：<ul><li>git：<a href="http://git-scm.com/" target="_blank" rel="noopener">http://git-scm.com/</a></li><li>node.js：<a href="http://nodejs.org/" target="_blank" rel="noopener">http://nodejs.org/</a></li></ul></li></ul><p>2.部署安装 git 和 node.js</p><p>（1）安装 git，输入：<code>git --version 出现版本号即成功</code></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200714111230.png" alt="image-20200714111221978" /></p><p>（2）安装 node.js，<code>打开 Git Bash，输入：</code>npm -v 出现版本号即成功</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200714111418.png" alt="image-20200714111416774" /></p><p>3.安装 Hexo 框架</p><p>输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200714111915.png" alt="image-20200714111914331" /></p><p>检查是否安装 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a> 完成,查询是否成功，显示<code>hexo-cli</code>版本就说明成功了</p><p>输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200714112109.png" alt="image-20200714112108073" /></p><h3 id="12-hexo-项目创建"><a class="markdownIt-Anchor" href="#12-hexo-项目创建"></a> 1.2 Hexo 项目创建</h3><ul><li><p>第一步：现在假设我要创建一个名为 <code>Hexo-Butterfly-Plus</code> 的项目，项目目录就放在：e:/work/ 目录下，所以我们在 e:/work/ 目录下创建一个 <code>Hexo-Butterfly-Plus</code> 目录。现在这个项目的全路径是：e:/work/Hexo-Butterfly-Plus，因为我在之前建好了，在这里就不再重新建啦 🔒</p></li><li><p>第二步：打开 Git Bash，进入该目录：cd e:/work/Hexo-Butterfly-Plus，然后执行：hexo init，这个时间也会比较长，也有可能要等几分钟，有显示 WARN 也不用管</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200714113210.png" alt="image-20200714113209533" /></p></li><li><p>最后执行：npm install，有显示 WARN 也不用管</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200714113346.png" alt="image-20200714113344407" /></p></li><li><p>安装完成之后，e:/work/Hexo-Butterfly-Plus 目录结构是这样的：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200714113419.png" alt="image-20200714113418616" /></p></li></ul><h3 id="13-hexo-本地测试"><a class="markdownIt-Anchor" href="#13-hexo-本地测试"></a> 1.3 Hexo 本地测试</h3><ul><li><p>现在我们启动 hexo 本地服务，看下默认的博客是怎样的，命令：<code>hexo server 或者输入 hexo s</code></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200714113809.png" alt="image-20200714113803823" /></p></li><li><p>现在用浏览器访问：<a href="http://127.0.0.1:4000/" target="_blank" rel="noopener">http://127.0.0.1:4000/</a>，效果如下图</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200714113932.png" alt="image-20200714113930603" /></p></li><li><p>如果要停止 hexo 服务：在 Git Bash 下按 <code>Ctrl + C</code> 即可</p></li></ul><h2 id="2-butterfly-主题安装与使用"><a class="markdownIt-Anchor" href="#2-butterfly-主题安装与使用"></a> 2 Butterfly 主题安装与使用</h2><p><code>hexo-theme-butterfly</code> 是 <a href="https://github.com/jerryc127/hexo-theme-butterfly" target="_blank" rel="noopener">JerryC</a> 大佬得力之作，也是我觉得最适合写阅读论文感悟总结的主题之一。</p><h3 id="21-主题安装"><a class="markdownIt-Anchor" href="#21-主题安装"></a> 2.1 主题安装</h3><p>在你的博客根目录输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https:&#x2F;&#x2F;github.com&#x2F;jerryc127&#x2F;hexo-theme-butterfly.git themes&#x2F;butterfly</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200714115056.png" alt="image-20200714115054973" /></p><h3 id="22-使用主题"><a class="markdownIt-Anchor" href="#22-使用主题"></a> 2.2 使用主题</h3><p>修改站点配置文件 _config.yml，把主题改为 butterfly</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><p>!&gt; 如果你没有 pug 以及 stylus 的渲染器，请下载安装： <code>npm install hexo-renderer-pug hexo-renderer-stylus --save</code> or <code>yarn add hexo-renderer-pug hexo-renderer-stylus</code></p><p>命令行输入 hexo s，到浏览器查看效果：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200714122600.png" alt="image-20200714122432343" /></p><h2 id="3-butterfly-主题页面"><a class="markdownIt-Anchor" href="#3-butterfly-主题页面"></a> 3 Butterfly 主题页面</h2><h3 id="31-front-matter"><a class="markdownIt-Anchor" href="#31-front-matter"></a> 3.1 Front-matter</h3><p>Front-matter 是档案最上方以 — 分隔的区域，用于指定个别档案的变数。</p><blockquote><p>如果标注可选的参数，可根据自己需要添加，不用全部都写在 markdown 里</p></blockquote><h4 id="311-page-front-matter"><a class="markdownIt-Anchor" href="#311-page-front-matter"></a> 3.1.1 Page Front-matter</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">type:</span><br><span class="line">comments:</span><br><span class="line">description:</span><br><span class="line">keywords:</span><br><span class="line">top_img:</span><br><span class="line">mathjax:</span><br><span class="line">katex:</span><br><span class="line">aside:</span><br><span class="line">aplayer：</span><br><span class="line">highlight_shrink：</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>说明：</p><table><thead><tr><th>写法</th><th>释义</th></tr></thead><tbody><tr><td>title</td><td>【必需】页面标题</td></tr><tr><td>date</td><td>【必需】页面创建日期</td></tr><tr><td>type</td><td>【必需】标签、分类和友情链接三个页面需要配置</td></tr><tr><td>updated</td><td>【可选】页面更新日期</td></tr><tr><td>description</td><td>【可选】页面描述</td></tr><tr><td>keywords</td><td>【可选】页面关键字</td></tr><tr><td>comments</td><td>【可选】显示页面评论模块(默认 true)</td></tr><tr><td>top_img</td><td>【可选】页面顶部图片</td></tr><tr><td>mathjax</td><td>【可选】显示 mathjax (当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示 katex (当设置 katex 的 per_page: false 时，才需要配置，默认 false)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载 aplayer 的 js 和 css，请参考文章下面的<code>音乐</code>配置</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置)</td></tr></tbody></table><h4 id="312-post-front-matter"><a class="markdownIt-Anchor" href="#312-post-front-matter"></a> 3.1.2 Post Front-matter</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">keywords:</span><br><span class="line">description:</span><br><span class="line">top_img:</span><br><span class="line">comments：</span><br><span class="line">cover:  </span><br><span class="line">toc:  </span><br><span class="line">toc_number:</span><br><span class="line">auto_open:</span><br><span class="line">copyright:</span><br><span class="line">mathjax:</span><br><span class="line">katex:</span><br><span class="line">aplayer：</span><br><span class="line">highlight_shrink：</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>说明：</p><table><thead><tr><th>写法</th><th>释义</th></tr></thead><tbody><tr><td>title</td><td>【必需】文章标题</td></tr><tr><td>date</td><td>【必需】文章创建日期</td></tr><tr><td>updated</td><td>【可选】文章更新日期</td></tr><tr><td>tags</td><td>【可选】文章标签</td></tr><tr><td>categories</td><td>【可选】文章分类</td></tr><tr><td>keywords</td><td>【可选】文章关键字</td></tr><tr><td>description</td><td>【可选】文章描述</td></tr><tr><td>top_img</td><td>【可选】文章顶部图片</td></tr><tr><td>cover</td><td>【可选】文章缩略图(如果没有设置 top_img，文章页顶部将显示缩略图，可设为 false/图片地址/留空</td></tr><tr><td>comments</td><td>【可选】显示文章评论模块(默认 true)</td></tr><tr><td>toc</td><td>【可选】显示文章 TOC (默认为设置中 toc 的 enable 配置)</td></tr><tr><td>toc_number</td><td>【可选】显示 toc_number (默认为设置中 toc 的 number 配置)</td></tr><tr><td>auto_open</td><td>【可选】是否自动打开 TOC (默认为设置中 toc 的 auto_open 配置)</td></tr><tr><td>copyright</td><td>【可选】显示文章版权模块 (默认为设置中 post_copyright 的 enable 配置)</td></tr><tr><td>mathjax</td><td>【可选】显示 mathjax (当设置 mathjax 的 per_page: false 时，才需要配置，默认 false )</td></tr><tr><td>katex</td><td>【可选】显示 katex (当设置 katex 的 per_page: false 时，才需要配置，默认 false)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载 aplayer 的 js 和 css，请参考文章下面的<code>音乐</code>配置</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开 (true/false) (默认为设置中 highlight_shrink 的配置)</td></tr></tbody></table><h3 id="32-标签页"><a class="markdownIt-Anchor" href="#32-标签页"></a> 3.2 标签页</h3><ol><li>前往你的 Hexo 博客的根目录</li><li>输入 hexo new page tags</li><li>你会找到 source/tags/index.md 这个文件</li><li>修改这个文件：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2020-07-14 00:00:00</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="33-分类页"><a class="markdownIt-Anchor" href="#33-分类页"></a> 3.3 分类页</h3><ol><li>前往你的 Hexo 博客的根目录</li><li>输入 hexo new page categories</li><li>你会找到 source/categories/index.md 这个文件</li><li>修改这个文件：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2020-07-14 00:00:00</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="34-友情链接"><a class="markdownIt-Anchor" href="#34-友情链接"></a> 3.4 友情链接</h3><p>为你的博客创建一个友情链接！</p><h4 id="341-创建友情链接页面"><a class="markdownIt-Anchor" href="#341-创建友情链接页面"></a> 3.4.1 创建友情链接页面</h4><ol><li>前往你的 Hexo 博客的根目录</li><li>输入 hexo new page link</li><li>你会找到 source/link/index.md 这个文件</li><li>修改这个文件：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 友情链接</span><br><span class="line">date: 2020-07-14 00:00:00</span><br><span class="line">type: &quot;link&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h4 id="342-友情链接添加"><a class="markdownIt-Anchor" href="#342-友情链接添加"></a> 3.4.2 友情链接添加</h4><p>在 Hexo 博客目录中的 source/_data，创建一个文件 link.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">友情链接</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">那些人，那些事</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">JerryC</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://jerryc.me/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://jerryc.me/image/avatar.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">今日事,今日毕</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hexo</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://hexo.io/zh-tw/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">快速、简单且强大的网誌框架</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">网站</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">值得推荐的网站</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Youtube</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://www.youtube.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">视频网站</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Weibo</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://www.weibo.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">中国最大社交分享平台</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Twitter</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://twitter.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">社交分享平台</span></span><br></pre></td></tr></table></figure><p>class_name 和 class_desc 支持 html 格式书写，如不需要，也可以留空。</p><p>🍡 效果图：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200714145302.png" alt="image-20200714145300955" /></p><h4 id="343-友情链接界面设置"><a class="markdownIt-Anchor" href="#343-友情链接界面设置"></a> 3.4.3 友情链接界面设置</h4><p>友情链接界面可以由用户自己自定义，只需要在友情链接的 md 档设置就行，以普通的 Markdown 格式书写。</p><h3 id="35-音乐"><a class="markdownIt-Anchor" href="#35-音乐"></a> 3.5 音乐</h3><p>音乐界面使用了插件 <a href="https://github.com/MoePlayer/hexo-tag-aplayer" target="_blank" rel="noopener">hexo-tag-aplayer</a>。<br />使用方法请参考插件的文档。</p><p>音乐页面只是普通的 page 页，按普通页面操作生成就行。</p><blockquote><p>以下内容可供选择配置</p></blockquote><p>插件会在每一个文件都插入 js 和 css，为了避免这一情况，目前版本内置了 aplayer 需要的 css 和 js。</p><p>首先在 Hexo 根目录 _config 里配置 asset_inject 为 false</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">asset_inject:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>然后在你需要使用 aplayer 的页面 Front-matter 添加</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aplayer:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>这样只会在需要 aplayer 的页面插入 js 和 css。</p><h3 id="36-电影"><a class="markdownIt-Anchor" href="#36-电影"></a> 3.6 电影</h3><p>电影界面使用了插件 <a href="https://github.com/mythsman/hexo-douban" target="_blank" rel="noopener">hexo-douban</a>。<br />使用方法请参考插件的文档。</p><p>注意：hexo-douban 会主动生成页面，所以不需要自己创建。对应网页的 top_img 可以在 butterfly.yml 修改。</p><h3 id="37-404-页面"><a class="markdownIt-Anchor" href="#37-404-页面"></a> 3.7 404 页面</h3><p>主题内置了一个简单的 404 页面，可在设置中开启</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># A simple 404 page</span></span><br><span class="line"><span class="attr">error_404:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">subtitle:</span> <span class="string">'Page Not Found'</span></span><br><span class="line">  <span class="attr">background:</span> <span class="string">https://i.loli.net/2020/05/19/aKOcLiyPl2JQdFD.png</span></span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200714151811.png" alt="image-20200714151810817" /></p><blockquote><p>本地预览时，访问出错的网站是不会跳到 404页面的。</p><p>如需本地预览，请访问 <a href="http://localhost:4000/404.html" target="_blank" rel="noopener">http://localhost:4000/404.html</a></p></blockquote><h2 id="4-butterfly-主题配置"><a class="markdownIt-Anchor" href="#4-butterfly-主题配置"></a> 4 Butterfly 主题配置</h2><blockquote><p>注意：下面如果不特别声明，都是修改的主题配置文件 _config.yml，当然，如果你设置了 butterfly.yml，就在这个文件里修改即可，不用再修改主题配置文件 _config.yml。</p></blockquote><h3 id="41-语言"><a class="markdownIt-Anchor" href="#41-语言"></a> 4.1 语言</h3><p>修改站点配置文件 _config.yml</p><p>默认语言是 en</p><p>主题支持三种语言</p><ul><li>default(en)</li><li>zh-CN (简体中文)</li><li>zh-TW (繁体中文)</li></ul><h3 id="42-网站资料"><a class="markdownIt-Anchor" href="#42-网站资料"></a> 4.2 网站资料</h3><p>修改网站各种资料，例如标题、副标题和邮箱等个人资料，请修改博客根目录的 _config.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> </span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">''</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">''</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> </span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">''</span></span><br></pre></td></tr></table></figure><h3 id="43-导航菜单"><a class="markdownIt-Anchor" href="#43-导航菜单"></a> 4.3 导航菜单</h3><p>在主题配置文件 _config.yml 中修改：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">Home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">Archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="attr">Tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">Categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">  <span class="string">List||fas</span> <span class="attr">fa-list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Music</span> <span class="string">||</span> <span class="string">/music/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-music</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Movie</span> <span class="string">||</span> <span class="string">/movies/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-video</span></span><br><span class="line">  <span class="attr">Link:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-link</span></span><br><span class="line">  <span class="attr">About:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure><p>必须是 <code>/xxx/</code>，后面<code>||</code>分开，然后写图标名。</p><p>注意： 导航的文字可自行更改</p><p>例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">首页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">时间轴:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-folder-open</span></span><br><span class="line">  <span class="string">清单||fa</span> <span class="attr">fa-heartbeat:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">音乐</span> <span class="string">||</span> <span class="string">/music/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-music</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">电影</span> <span class="string">||</span> <span class="string">/movies/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-film</span></span><br><span class="line">  <span class="string">友链:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-link</span></span><br><span class="line">  <span class="string">关于:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200714160808.png" alt="image-20200714160805829" /></p><h3 id="44-代码"><a class="markdownIt-Anchor" href="#44-代码"></a> 4.4 代码</h3><blockquote><p>代码块中的所有功能只适用于 Hexo 默认的 highlight 渲染</p><p>如果使用第三方的渲染器，不一定会有效</p></blockquote><h4 id="441-代码高亮主题"><a class="markdownIt-Anchor" href="#441-代码高亮主题"></a> 4.4.1 代码高亮主题</h4><ol><li>默认主题</li></ol><p>Butterfly 支持 6 种代码高亮样式：default、darker、pale night、light、ocean、mac</p><p>配置主题文件 _config.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight_theme:</span> <span class="string">mac</span></span><br></pre></td></tr></table></figure><ol start="2"><li>自定义主题</li></ol><p>请参考官方文档：<a href="https://demo.jerryc.me/posts/4aa8abbe/" target="_blank" rel="noopener">https://demo.jerryc.me/posts/4aa8abbe/</a></p><h4 id="442-代码复制"><a class="markdownIt-Anchor" href="#442-代码复制"></a> 4.4.2 代码复制</h4><p>主题支持代码复制功能</p><p>配置主题文件 _config.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight_copy:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="443-代码框展开关闭"><a class="markdownIt-Anchor" href="#443-代码框展开关闭"></a> 4.4.3 代码框展开/关闭</h4><p>在默认情况下，代码框自动展开，可设置是否所有代码框都关闭状态，点击 &gt; 可展开代码</p><ul><li>true 全部代码框不展开，需点击 &gt; 打开</li><li>false 代码狂展开，有 &gt; 点击按钮</li><li>none 不显示 &gt; 按钮</li></ul><p>配置主题文件 _config.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight_shrink:</span> <span class="literal">true</span> <span class="comment">#代码框不展开，需点击 '&gt;' 打开</span></span><br></pre></td></tr></table></figure><h4 id="444-代码换行"><a class="markdownIt-Anchor" href="#444-代码换行"></a> 4.4.4 代码换行</h4><p>在默认情况下，hexo-highlight 在编译的时候不会实现代码自动换行。如果你不希望在代码块的区域里有横向滚动条的话，那么你可以考虑开启这个功能。</p><p>配置主题文件 _config.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">code_word_wrap:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>然后找到你站点的 Hexo 配置文件_config.yml，将 line_number 改成 false:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span></span><br></pre></td></tr></table></figure><h3 id="45-社交图标"><a class="markdownIt-Anchor" href="#45-社交图标"></a> 4.5 社交图标</h3><p>Butterfly 支持 <a href="https://fontawesome.com/icons" target="_blank" rel="noopener">font-awesome v5</a> 图标.</p><p>书写格式 <code>图标名：url || 描述性文字</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">fab fa-github:</span> <span class="string">https://github.com/wugenqiang</span> <span class="string">||</span> <span class="string">Github</span></span><br><span class="line">  <span class="attr">fas fa-envelope:</span> <span class="string">mailto:18360861937@163.com</span> <span class="string">||</span> <span class="string">Email</span></span><br><span class="line">  <span class="attr">fa fa-rss:</span> <span class="string">/atom.xml</span> <span class="string">||</span> <span class="string">RSS</span> <span class="string">链接</span></span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200714163847.png" alt="image-20200714163845748" /></p><h3 id="46-主页文章节选自动节选和文章页-description"><a class="markdownIt-Anchor" href="#46-主页文章节选自动节选和文章页-description"></a> 4.6 主页文章节选(自动节选和文章页 description)</h3><p>因为主题 UI 的关係，主页文章节选只支持自动节选和文章页 description。</p><p>在 butterfly 里，有三种可供选择</p><ul><li>description 只显示 description</li><li>both 优先选择 description，如果没有配置 description，则显示自动节选的内容</li><li>auto_excerpt 只显示自动节选</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">index_post_content:</span></span><br><span class="line">  <span class="attr">method:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">500</span> <span class="comment"># if you set method to 2 or 3, the length need to config</span></span><br></pre></td></tr></table></figure><p>description 在 front-matter 里添加</p><h3 id="47-顶部图"><a class="markdownIt-Anchor" href="#47-顶部图"></a> 4.7 顶部图</h3><p>顶部图有 2 种配置：具体 url 和（留空，true 和 false，三个效果一样）</p><h4 id="471-page-页"><a class="markdownIt-Anchor" href="#471-page-页"></a> 4.7.1 page 页</h4><p>（1）当具体 url 时<br />主页的顶部图可以设置 index_img</p><p>archives页的顶部图可以设置 archive_img</p><p>其他 page 页的顶部图可以在各自的 md 页面设置 front-matter 中的 top_img</p><blockquote><p>页面如果没有设置各自的 top_img，则会显示 default_top_img 图片</p></blockquote><p>（2）当顶部图留空，true 和 false<br />主页会显示纯颜色的顶部图</p><p>其他 page 的顶部图没有设置时，也会显示纯颜色的顶部图</p><h4 id="472-post-页"><a class="markdownIt-Anchor" href="#472-post-页"></a> 4.7.2 post 页</h4><p>post 页的顶部图会优先显示各自 front-matter 中的 top_img，如果没有设置，则会缩略图（即各自 front-matter 中的 cover )，如果没有则会显示显示 default_top_img 图片</p><h3 id="48-文章置顶"><a class="markdownIt-Anchor" href="#48-文章置顶"></a> 4.8 文章置顶</h3><p>要为文章置顶，你需要安装插件(<a href="https://github.com/netcan/hexo-generator-index-pin-top" target="_blank" rel="noopener">hexo-generator-index-pin-top</a> 或者 <a href="https://github.com/hexo-next/hexo-generator-indexed" target="_blank" rel="noopener">hexo-generator-indexed</a>)</p><p>如果使用 <code>hexo-generator-index-pin-top</code>，需要先卸载掉 hexo-generator-index，然后在文章的 front-matter 区域里添加 top: true 属性来把这篇文章置顶</p><p>如果使用 <code>hexo-generator-indexed</code>, 需要先卸载掉 hexo-generator-index，然后在文章的 front-matter 区域里添加 sticky: 1 属性来把这篇文章置顶。数值越大，置顶的优先级越大</p><p>效果如图：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200714182059.png" alt="image-20200714182058187" /></p><h3 id="49-文章封面"><a class="markdownIt-Anchor" href="#49-文章封面"></a> 4.9 文章封面</h3><p>文章的 markdown 文档上,在 Front-matter 添加 cover，并填上要显示的图片地址。<br />如果不配置 cover，可以设置显示默认的 cover。</p><p>如果不想在首页显示 cover，可以设置为 false。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cover:</span></span><br><span class="line">  <span class="comment"># 是否显示文章封面</span></span><br><span class="line">  <span class="attr">index_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">aside_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">archives_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 封面显示的位置</span></span><br><span class="line">  <span class="comment"># 三个值可配置 left , right , both</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">both</span></span><br><span class="line">  <span class="comment"># 当没有设置cover时，默认的封面显示</span></span><br><span class="line">  <span class="attr">default_cover:</span></span><br></pre></td></tr></table></figure><p>当配置多张图片时,会随机选择一张作为 cover。此时写法应为</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">default_cover:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg2.png</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg3.png</span></span><br></pre></td></tr></table></figure><h3 id="410-文章页相关配置"><a class="markdownIt-Anchor" href="#410-文章页相关配置"></a> 4.10 文章页相关配置</h3><h4 id="4101-文章-meta-显示"><a class="markdownIt-Anchor" href="#4101-文章-meta-显示"></a> 4.10.1 文章 meta 显示</h4><p>这个选项是用来显示文章的相关信息的。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_meta:</span></span><br><span class="line">  <span class="attr">page:</span></span><br><span class="line">    <span class="attr">date_type:</span> <span class="string">created</span> <span class="comment"># created or updated or both 主页文章日期是创建日或者更新日或都显示</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="literal">true</span> <span class="comment"># true or false 主页是否显示分类</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="literal">false</span> <span class="comment"># true or false 主页是否显示标签</span></span><br><span class="line">  <span class="attr">post:</span></span><br><span class="line">    <span class="attr">date_type:</span> <span class="string">both</span> <span class="comment"># created or updated or both 文章页日期是创建日或者更新日或都显示</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="literal">true</span> <span class="comment"># true or false 文章页是否显示分类</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="literal">true</span> <span class="comment"># true or false 文章页是否显示标签</span></span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200714183313.png" alt="image-20200714183311960" /></p><p>在文章顶部的资料，</p><p>date_type: 可设置文章日期显示创建日期(created)或者更新日期(updated)或者两种都显示(both)</p><p>categories 是否显示分类</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200714183357.png" alt="image-20200714183355826" /></p><p>tags 是否显示标签</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200714183950.png" alt="image-20200714183949208" /></p><h4 id="4102-文章版权"><a class="markdownIt-Anchor" href="#4102-文章版权"></a> 4.10.2 文章版权</h4><p>为你的博客文章展示文章版权和许可协议。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_copyright:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">decode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">CC</span> <span class="string">BY-NC-SA</span> <span class="number">4.0</span></span><br><span class="line">  <span class="attr">license_url:</span> <span class="string">https://creativecommons.org/licenses/by-nc-sa/4.0/</span></span><br></pre></td></tr></table></figure><p>由于 Hexo 4.1 开始，默认对网址进行解码，以至于如果是中文网址，会被解码，可设置 decode: true 来显示中文网址。</p><p>如果有文章（例如：转载文章）不需要显示版权，可以在文章 Front-matter 单独设置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">copyright:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>版权显示截图：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200714191404.png" alt="image-20200714191403363" /></p><h4 id="4103-文章打赏"><a class="markdownIt-Anchor" href="#4103-文章打赏"></a> 4.10.3 文章打赏</h4><p>在你每篇文章的结尾，可以添加打赏按钮。相关二维码可以自行配置。</p><p>对于没有提供二维码的，可配置一张软件的 icon 图片，然后在 link 上添加相应的打赏链接。用户点击图片就会跳转到链接去。</p><p>link 可以不写，会默认为图片的链接。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">reward:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">QR_code:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">img:</span> <span class="string">/image/wechat.jpg</span></span><br><span class="line">      <span class="attr">link:</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">微信</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">img:</span> <span class="string">/image/alipay.jpg</span></span><br><span class="line">      <span class="attr">link:</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">支付宝</span></span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200714191815.png" alt="image-20200714191814580" /></p><h4 id="4104-toc"><a class="markdownIt-Anchor" href="#4104-toc"></a> 4.10.4 TOC</h4><p>在文章页，会有一个目录，用于显示 TOC。</p><p>enable: 是否显示 TOC<br />number: 是否显示章节数<br />auto_open: 可选择进入文章页面时，是否自动打开 sidebar 显示 TOC</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_open:</span> <span class="literal">true</span> <span class="comment"># auto open the sidebar</span></span><br></pre></td></tr></table></figure><ul><li>为特定的文章配置 TOC</li></ul><p>在你的文章 md 文件的头部，加入 toc_number、toc 和 auto_open，并配置 true 或者 fals e即可。</p><p>主题会优先判断文章 Markdown 的 Front-matter 是否有配置，如有，则以 Front-matter 的配置为准。否则，以主题配置文件中配置为准。</p><h4 id="4105-相关文章"><a class="markdownIt-Anchor" href="#4105-相关文章"></a> 4.10.5 相关文章</h4><p>相关文章推荐的原理是根据文章 tags 的比重来推荐</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">related_post:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">6</span> <span class="comment"># 显示推荐文章数目</span></span><br><span class="line">  <span class="attr">date_type:</span> <span class="string">created</span> <span class="comment"># or created or updated 文章日期显示创建日或者更新日</span></span><br></pre></td></tr></table></figure><h4 id="4106-文章锚点"><a class="markdownIt-Anchor" href="#4106-文章锚点"></a> 4.10.6 文章锚点</h4><p>开启文章锚点后，当你在文章页进行滚动时，文章链接会根据标题 ID 进行替换<br />(注意: 每替换一次，会留下一个历史记录。所以如果一篇文章有很多锚点的话，网页的历史记录会很多。)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># anchor</span></span><br><span class="line"><span class="comment"># when you scroll in post , the url will update according to header id.</span></span><br><span class="line"><span class="attr">anchor:</span> <span class="string">ture</span></span><br></pre></td></tr></table></figure><h3 id="411-头像"><a class="markdownIt-Anchor" href="#411-头像"></a> 4.11 头像</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">img:</span> <span class="string">/img/avatar.png</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">true</span> <span class="comment"># 头像会一直转圈</span></span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200714194616.gif" alt="" /></p><h3 id="412-图片描述"><a class="markdownIt-Anchor" href="#412-图片描述"></a> 4.12 图片描述</h3><p>可开启图片 Figcaption 描述文字显示</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">photofigcaption:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="413-footer-设置"><a class="markdownIt-Anchor" href="#413-footer-设置"></a> 4.13 Footer 设置</h3><h4 id="4131-博客年份"><a class="markdownIt-Anchor" href="#4131-博客年份"></a> 4.13.1 博客年份</h4><p>since 是一个来展示你站点起始时间的选项。它位于页面的最底部。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">since:</span> <span class="number">2019</span></span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200714195846.png" alt="image-20200714195844816" /></p><h4 id="4132-页脚自定义文本"><a class="markdownIt-Anchor" href="#4132-页脚自定义文本"></a> 4.13.2 页脚自定义文本</h4><p>footer_custom_text 是一个给你用来在页脚自定义文本的选项。通常你可以在这里写声明文本等。支持 HTML。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">footer_custom_text:</span> <span class="string">Hi,</span> <span class="string">welcome</span> <span class="string">to</span> <span class="string">my</span> <span class="string">&lt;a</span> <span class="string">href="https://wugenqiang.github.io/"&gt;blog&lt;/a&gt;!</span></span><br></pre></td></tr></table></figure><h4 id="4133-icp"><a class="markdownIt-Anchor" href="#4133-icp"></a> 4.13.3 ICP</h4><p>对于部分有备案的域名，可以在 ICP 配置显示。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ICP:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">http://www.beian.miit.gov.cn/state/outPortal/loginPortal.action</span></span><br><span class="line">  <span class="attr">text:</span> <span class="string">粤ICP备xxxx</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">/img/icp.png</span></span><br></pre></td></tr></table></figure><h3 id="414-右下角按钮"><a class="markdownIt-Anchor" href="#414-右下角按钮"></a> 4.14 右下角按钮</h3><h4 id="4141-简繁转换"><a class="markdownIt-Anchor" href="#4141-简繁转换"></a> 4.14.1 简繁转换</h4><p>简体繁体互换</p><p>右下角会有简繁转换按钮。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">translate:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 默认按钮显示文字(网站是简体，应设置为'default: 繁')</span></span><br><span class="line">  <span class="attr">default:</span> <span class="string">简</span></span><br><span class="line">  <span class="comment">#网站默认语言，1: 繁体中文, 2: 简体中文</span></span><br><span class="line">  <span class="attr">defaultEncoding:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment">#延迟时间,若不在前, 要设定延迟翻译时间, 如100表示100ms,默认为0</span></span><br><span class="line">  <span class="attr">translateDelay:</span> <span class="number">0</span></span><br><span class="line">  <span class="comment">#当文字是简体时，按钮显示的文字</span></span><br><span class="line">  <span class="attr">msgToTraditionalChinese:</span> <span class="string">"繁"</span></span><br><span class="line">  <span class="comment">#当文字是繁体时，按钮显示的文字</span></span><br><span class="line">  <span class="attr">msgToSimplifiedChinese:</span> <span class="string">"简"</span></span><br></pre></td></tr></table></figure><h4 id="4142-夜间模式"><a class="markdownIt-Anchor" href="#4142-夜间模式"></a> 4.14.2 夜间模式</h4><p>右下角会有夜间模式按钮</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dark mode</span></span><br><span class="line"><span class="attr">darkmode:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># dark mode和 light mode切换按钮</span></span><br><span class="line">  <span class="attr">button:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">autoChangeMode:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="4143-阅读模式"><a class="markdownIt-Anchor" href="#4143-阅读模式"></a> 4.14.3 阅读模式</h4><p>阅读模式下会去掉除文章外的内容，避免干扰阅读。</p><p>只会出现在文章页面，右下角会有阅读模式按钮。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">readmode:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="415-侧边栏设置"><a class="markdownIt-Anchor" href="#415-侧边栏设置"></a> 4.15 侧边栏设置</h3><h4 id="4151-侧边排版"><a class="markdownIt-Anchor" href="#4151-侧边排版"></a> 4.15.1 侧边排版</h4><p>可自行决定哪个项目需要显示，可决定位置，也可以设置不显示侧边栏。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aside:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">true</span> <span class="comment"># 手机页面（ 显示宽度 &lt; 768px ）是否显示 aside 内容</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">right</span> <span class="comment"># left or right</span></span><br><span class="line">  <span class="attr">card_author:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">description:</span></span><br><span class="line">  <span class="attr">card_announcement:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">content:</span> <span class="string">This</span> <span class="string">is</span> <span class="string">my</span> <span class="string">Blog</span></span><br><span class="line">  <span class="attr">card_recent_post:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">5</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">  <span class="attr">card_categories:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">8</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">expand:</span> <span class="string">none</span> <span class="comment"># none/true/false</span></span><br><span class="line">  <span class="attr">card_tags:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">40</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">color:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">card_archives:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">monthly</span> <span class="comment"># yearly or monthly</span></span><br><span class="line">    <span class="attr">format:</span> <span class="string">MMMM</span> <span class="string">YYYY</span> <span class="comment"># eg: YYYY年MM月</span></span><br><span class="line">    <span class="attr">order:</span> <span class="number">-1</span> <span class="comment"># Sort of order. 1, asc for ascending; -1, desc for descending</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">8</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">  <span class="attr">card_webinfo:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="4152-访问人数-busuanzi-uv-和-pv"><a class="markdownIt-Anchor" href="#4152-访问人数-busuanzi-uv-和-pv"></a> 4.15.2 访问人数 busuanzi (UV 和 PV)</h4><p>访问 busuanzi 的<a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">官方网站</a>查看更多的介绍。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">busuanzi:</span></span><br><span class="line">  <span class="attr">site_uv:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">site_pv:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">page_pv:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="4153-运行时间"><a class="markdownIt-Anchor" href="#4153-运行时间"></a> 4.15.3 运行时间</h4><p>网页已运行时间</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">runtimeshow:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">publish_date:</span> <span class="number">2020</span><span class="string">/7/12</span> <span class="number">00</span><span class="string">:00:00</span></span><br><span class="line">  <span class="comment">##网页开通时间</span></span><br><span class="line">  <span class="comment">#格式: 月/日/年 时间</span></span><br><span class="line">  <span class="comment">#也可以写成 年/月/日 时间</span></span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200714201857.png" alt="image-20200714201855716" /></p><h2 id="5-butterfly-主题魔改功能"><a class="markdownIt-Anchor" href="#5-butterfly-主题魔改功能"></a> 5 Butterfly 主题魔改功能</h2><h3 id="51-valine-评论"><a class="markdownIt-Anchor" href="#51-valine-评论"></a> 5.1 Valine 评论</h3><p>遵循 <a href="https://github.com/xCss/Valine" target="_blank" rel="noopener">Valine</a>的指示去配置你的 <a href="https://console.leancloud.app/" target="_blank" rel="noopener">LeanCloud</a> 应用。以及查看相应的配置说明。</p><p>然后配置主题配置文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># if you want use valine,please set this value is true</span></span><br><span class="line">  <span class="attr">appId:</span>  <span class="comment"># leancloud application app id</span></span><br><span class="line">  <span class="attr">appKey:</span>  <span class="comment"># leancloud application app key</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># comment list page size</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">monsterid</span> <span class="comment"># gravatar style https://valine.js.org/#/avatar</span></span><br><span class="line">  <span class="attr">lang:</span> <span class="string">en</span> <span class="comment"># i18n: zh-CN/zh-TW/en/ja</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">记得留下你的昵称和邮箱....可以快速收到回复</span> <span class="comment"># valine comment input placeholder(like: Please leave your footprints )</span></span><br><span class="line">  <span class="attr">guest_info:</span> <span class="string">nick,mail,link</span> <span class="comment">#valine comment header info (nick/mail/link)</span></span><br><span class="line">  <span class="attr">recordIP:</span> <span class="literal">false</span> <span class="comment"># Record reviewer IP</span></span><br><span class="line">  <span class="attr">serverURLs:</span> <span class="comment"># This configuration is suitable for domestic custom domain name users, overseas version will be automatically detected (no need to manually fill in)</span></span><br><span class="line">  <span class="attr">bg:</span> <span class="string">/image/comment_bg.png</span> <span class="comment"># valine background</span></span><br><span class="line">  <span class="attr">emojiCDN:</span> <span class="comment"># emoji CDN</span></span><br><span class="line">  <span class="attr">enableQQ:</span> <span class="literal">false</span> <span class="comment"># enable the Nickname box to automatically get QQ Nickname and QQ Avatar</span></span><br><span class="line">  <span class="attr">requiredFields:</span> <span class="string">nick,mail</span> <span class="comment"># required fields (nick/mail)</span></span><br><span class="line">  <span class="attr">count:</span> <span class="literal">true</span> <span class="comment"># dispaly comment count in top_img</span></span><br></pre></td></tr></table></figure><p>Valine 于 v1.4.5 开始支持自定义表情，如果你需要自行配置，请在 emojiCDN 配置表情 CDN。</p><p>同时在 Hexo 工作目录下的 source/_data/ 创建一个 json 文件 valine.json，等同于 Valine 需要配置的 emojiMaps，valine.json 配置方式可参考如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#123;</span> </span><br><span class="line"><span class="attr">"tv_doge":</span> <span class="string">"6ea59c827c414b4a2955fe79e0f6fd3dcd515e24.png"</span><span class="string">,</span></span><br><span class="line"><span class="string">"tv_亲亲"</span><span class="string">:</span> <span class="string">"a8111ad55953ef5e3be3327ef94eb4a39d535d06.png"</span><span class="string">,</span></span><br><span class="line"><span class="string">"tv_偷笑"</span><span class="string">:</span> <span class="string">"bb690d4107620f1c15cff29509db529a73aee261.png"</span><span class="string">,</span></span><br><span class="line"><span class="string">"tv_再见"</span><span class="string">:</span> <span class="string">"180129b8ea851044ce71caf55cc8ce44bd4a4fc8.png"</span><span class="string">,</span></span><br><span class="line"><span class="string">"tv_冷漠"</span><span class="string">:</span> <span class="string">"b9cbc755c2b3ee43be07ca13de84e5b699a3f101.png"</span><span class="string">,</span></span><br><span class="line"><span class="string">"tv_发怒"</span><span class="string">:</span> <span class="string">"34ba3cd204d5b05fec70ce08fa9fa0dd612409ff.png"</span><span class="string">,</span></span><br><span class="line"><span class="string">"tv_发财"</span><span class="string">:</span> <span class="string">"34db290afd2963723c6eb3c4560667db7253a21a.png"</span><span class="string">,</span></span><br><span class="line"><span class="string">"tv_可爱"</span><span class="string">:</span> <span class="string">"9e55fd9b500ac4b96613539f1ce2f9499e314ed9.png"</span><span class="string">,</span></span><br><span class="line"><span class="string">"tv_吐血"</span><span class="string">:</span> <span class="string">"09dd16a7aa59b77baa1155d47484409624470c77.png"</span><span class="string">,</span></span><br><span class="line"><span class="string">"tv_呆"</span><span class="string">:</span> <span class="string">"fe1179ebaa191569b0d31cecafe7a2cd1c951c9d.png"</span><span class="string">,</span></span><br><span class="line"><span class="string">"tv_呕吐"</span><span class="string">:</span> <span class="string">"9f996894a39e282ccf5e66856af49483f81870f3.png"</span><span class="string">,</span></span><br><span class="line"><span class="string">"tv_困"</span><span class="string">:</span> <span class="string">"241ee304e44c0af029adceb294399391e4737ef2.png"</span><span class="string">,</span></span><br><span class="line"><span class="string">"tv_坏笑"</span><span class="string">:</span> <span class="string">"1f0b87f731a671079842116e0991c91c2c88645a.png"</span><span class="string">,</span></span><br><span class="line"><span class="string">"tv_大佬"</span><span class="string">:</span> <span class="string">"093c1e2c490161aca397afc45573c877cdead616.png"</span><span class="string">,</span></span><br><span class="line"><span class="string">"tv_大哭"</span><span class="string">:</span> <span class="string">"23269aeb35f99daee28dda129676f6e9ea87934f.png"</span><span class="string">,</span></span><br><span class="line"><span class="string">"tv_委屈"</span><span class="string">:</span> <span class="string">"d04dba7b5465779e9755d2ab6f0a897b9b33bb77.png"</span><span class="string">,</span></span><br><span class="line"><span class="string">"tv_害羞"</span><span class="string">:</span> <span class="string">"a37683fb5642fa3ddfc7f4e5525fd13e42a2bdb1.png"</span><span class="string">,</span></span><br><span class="line"><span class="string">"tv_尴尬"</span><span class="string">:</span> <span class="string">"7cfa62dafc59798a3d3fb262d421eeeff166cfa4.png"</span><span class="string">,</span></span><br><span class="line"><span class="string">"tv_微笑"</span><span class="string">:</span> <span class="string">"70dc5c7b56f93eb61bddba11e28fb1d18fddcd4c.png"</span><span class="string">,</span></span><br><span class="line"><span class="string">"tv_思考"</span><span class="string">:</span> <span class="string">"90cf159733e558137ed20aa04d09964436f618a1.png"</span><span class="string">,</span></span><br><span class="line"><span class="string">"tv_惊吓"</span><span class="string">:</span> <span class="string">"0d15c7e2ee58e935adc6a7193ee042388adc22af.png"</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="52-搜索系统"><a class="markdownIt-Anchor" href="#52-搜索系统"></a> 5.2 搜索系统</h3><ul><li>安装 <a href="https://github.com/PaicHyperionDev/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a>。根据它的文档去做相应配置。注意格式只支持 xml。</li><li>配置主题文件</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">input_placeholder:</span> <span class="string">Search</span> <span class="string">for</span> <span class="string">Posts</span></span><br><span class="line">    <span class="attr">hits_empty:</span> <span class="string">"We didn't find any results for the search: $&#123;query&#125;"</span> <span class="comment"># if there are no result</span></span><br></pre></td></tr></table></figure><p>效果：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200714220505.png" alt="image-20200714220504185" /></p><h3 id="53-adsense-广告"><a class="markdownIt-Anchor" href="#53-adsense-广告"></a> 5.3 Adsense 广告</h3><p>（1）主题已集成谷歌广告（自动广告）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">google_adsense:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">js:</span> <span class="string">https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment"># 填入个人识别码</span></span><br><span class="line">  <span class="attr">enable_page_level_ads:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>（2）手动插入广告</p><p>主题预留了三个位置可供插入广告，分别为主页文章(每三篇文章出现广告)/aside公告之后/文章页打赏之后。<br />把 html 代码填写到对应的位置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ad:</span></span><br><span class="line">  <span class="attr">index:</span></span><br><span class="line">  <span class="attr">aside:</span></span><br><span class="line">  <span class="attr">post:</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">index:</span> <span class="string">&lt;ins</span> <span class="string">class="adsbygoogle"</span></span><br><span class="line">     <span class="string">style="display:block"</span></span><br><span class="line">     <span class="string">data-ad-client="ca-pub-1890271224952559"</span></span><br><span class="line">     <span class="string">data-ad-slot="2794965055"</span></span><br><span class="line">     <span class="string">data-ad-format="auto"</span></span><br><span class="line">     <span class="string">data-full-width-responsive="true"&gt;&lt;/ins&gt;</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line">     <span class="string">(adsbygoogle</span> <span class="string">=</span> <span class="string">window.adsbygoogle</span> <span class="string">||</span> <span class="string">[]).push(&#123;&#125;);</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="54-美化特效"><a class="markdownIt-Anchor" href="#54-美化特效"></a> 5.4 美化/特效</h3><h4 id="541-自定义主题色"><a class="markdownIt-Anchor" href="#541-自定义主题色"></a> 5.4.1 自定义主题色</h4><p>可以修改大部分 UI 颜色</p><blockquote><p>颜色值必须被双引号包裹，就像&quot;#000&quot;而不是 #000。否则将会在构建的时候报错！</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme_color:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">main:</span> <span class="string">"#49B1F5"</span></span><br><span class="line">  <span class="attr">paginator:</span> <span class="string">"#00c4b6"</span></span><br><span class="line">  <span class="attr">button_hover:</span> <span class="string">"#FF7242"</span></span><br><span class="line">  <span class="attr">text_selection:</span> <span class="string">"#00c4b6"</span></span><br><span class="line">  <span class="attr">link_color:</span> <span class="string">"#99a9bf"</span></span><br><span class="line">  <span class="attr">meta_color:</span> <span class="string">"#858585"</span></span><br><span class="line">  <span class="attr">hr_color:</span> <span class="string">"#A4D8FA"</span></span><br><span class="line">  <span class="attr">code_foreground:</span> <span class="string">"#F47466"</span></span><br><span class="line">  <span class="attr">code_background:</span> <span class="string">"rgba(27, 31, 35, .05)"</span></span><br><span class="line">  <span class="attr">toc_color:</span> <span class="string">"#00c4b6"</span></span><br><span class="line">  <span class="attr">blockquote_padding_color:</span> <span class="string">"#49b1f5"</span></span><br><span class="line">  <span class="attr">blockquote_background_color:</span> <span class="string">"#49b1f5"</span></span><br></pre></td></tr></table></figure><h4 id="542-footer-背景"><a class="markdownIt-Anchor" href="#542-footer-背景"></a> 5.4.2 footer 背景</h4><p>footer 的背景会与 top_img 的一致, 当设置 false 时，将与主题色一致。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># footer是否显示图片背景(与top_img一致)</span></span><br><span class="line"><span class="attr">footer_bg:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="543-美化页面显示"><a class="markdownIt-Anchor" href="#543-美化页面显示"></a> 5.4.3 美化页面显示</h4><p>会改变 ol、ul、h1-h5 的样式</p><p>field 配置生效的区域</p><ul><li>post 只在文章页生效</li><li>site 在全站生效</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 美化页面显示</span></span><br><span class="line"><span class="attr">beautify:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span> <span class="comment"># site/post</span></span><br><span class="line">  <span class="attr">title-prefix-icon:</span> <span class="string">'\f0c1'</span></span><br><span class="line">  <span class="attr">title-prefix-icon-color:</span> <span class="string">"#F47466"</span></span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200714224210.png" alt="image-20200714224209048" /></p><ul><li>美化页面展示，修改标题前图标为闪电 <code>title-prefix-icon:'\f0e7'</code>，颜色为黄色 <code>title-prefix-icon-color: &quot;#ffb821&quot;</code></li></ul><ul><li>主页调用金山词霸的每日一句打字效果，需注意的是：自定义副标题 sub 的时候，符号必须用 ASCII 码表示，常用的逗号为 <code>&amp;#44;</code> 句号为 <code>&amp;#46;</code> 双引号为 <code>&amp;#34;</code> 英文缩写符号为 <code>&amp;#39;</code></li><li>打开中英文之间添加空格 <code>pangu: true</code></li></ul><h4 id="544-自定义字体"><a class="markdownIt-Anchor" href="#544-自定义字体"></a> 5.4.4 自定义字体</h4><p>（1）全局字体</p><p>可自行设置字体的 font-family<br />如不需要配置，请留空</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Global font settings</span></span><br><span class="line"><span class="comment"># Don't modify the following settings unless you know how they work (非必要不要修改)</span></span><br><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">font-family:</span> <span class="string">-apple-system,</span> <span class="string">BlinkMacSystemFont,</span> <span class="string">"Segoe UI"</span><span class="string">,</span> <span class="string">"Helvetica Neue"</span><span class="string">,</span> <span class="string">Lato,</span> <span class="string">Roboto,</span> <span class="string">"PingFang SC"</span><span class="string">,</span> <span class="string">"Microsoft JhengHei"</span><span class="string">,</span> <span class="string">"Microsoft YaHei"</span><span class="string">,</span> <span class="string">sans-serif</span></span><br><span class="line">  <span class="attr">code-font:</span> <span class="string">consolas,</span> <span class="string">Menlo,</span> <span class="string">"PingFang SC"</span><span class="string">,</span> <span class="string">"Microsoft JhengHei"</span><span class="string">,</span> <span class="string">"Microsoft YaHei"</span><span class="string">,</span> <span class="string">sans-serif</span></span><br></pre></td></tr></table></figure><p>（2）Blog 标题字体</p><p>可自行设置字体的 font-family<br />如不需要配置，请留空。<br />如不需要使用网络字体，只需要把 font_link 留空就行</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Font settings for the site title and site subtitle</span></span><br><span class="line"><span class="comment"># 左上角网站名字 主页居中网站名字</span></span><br><span class="line"><span class="attr">blog_title_font:</span></span><br><span class="line">  <span class="attr">font_link:</span> <span class="string">https://fonts.googleapis.com/css?family=Titillium+Web&amp;display=swap</span></span><br><span class="line">  <span class="attr">font-family:</span> <span class="string">Titillium</span> <span class="string">Web,</span> <span class="string">'PingFang SC'</span><span class="string">,</span> <span class="string">'Hiragino Sans GB'</span><span class="string">,</span> <span class="string">'Microsoft JhengHei'</span><span class="string">,</span> <span class="string">'Microsoft YaHei'</span><span class="string">,</span> <span class="string">sans-serif</span></span><br></pre></td></tr></table></figure><p>（3）网站副标题</p><p>可设置主页中显示的网站副标题或者喜欢的座右铭。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主页subtitle</span></span><br><span class="line"><span class="attr">subtitle:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 打字效果</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 循环或者只打字一次</span></span><br><span class="line">  <span class="attr">loop:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># source调用第三方服务</span></span><br><span class="line">  <span class="comment"># source: false 关闭调用</span></span><br><span class="line">  <span class="comment"># source: 1  调用搏天api的随机语录（简体） https://api.btstu.cn/</span></span><br><span class="line">  <span class="comment"># source: 2  调用一言网的一句话（简体） https://hitokoto.cn/</span></span><br><span class="line">  <span class="comment"># source: 3  调用一句网（简体） http://yijuzhan.com/</span></span><br><span class="line">  <span class="comment"># source: 4  调用今日诗词（简体） https://www.jinrishici.com/</span></span><br><span class="line">  <span class="comment"># subtitle 会先显示 source , 再显示 sub 的内容</span></span><br><span class="line">  <span class="attr">source:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 如果有英文逗号' , ',请使用转义字元 &amp;#44;</span></span><br><span class="line">  <span class="comment"># 如果有英文双引号' " ',请使用转义字元 &amp;quot;</span></span><br><span class="line">  <span class="comment"># 开头不允许转义字元，如需要，请把整个句子用双引号包住</span></span><br><span class="line">  <span class="comment"># 例如 ”&amp;quotNever put off till tomorrow what you can do today&amp;quot"</span></span><br><span class="line">  <span class="comment"># 如果关闭打字效果，subtitle只会显示sub的第一行文字</span></span><br><span class="line">  <span class="attr">sub:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">今日事&amp;#44;今日毕</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Never</span> <span class="string">put</span> <span class="string">off</span> <span class="string">till</span> <span class="string">tomorrow</span> <span class="string">what</span> <span class="string">you</span> <span class="string">can</span> <span class="string">do</span> <span class="string">today</span></span><br></pre></td></tr></table></figure><h4 id="545-页面加载动画-preloader"><a class="markdownIt-Anchor" href="#545-页面加载动画-preloader"></a> 5.4.5 页面加载动画 preloader</h4><p>当进入网页时，因为加载速度的问题，可能会导致 top_img 图片出现断层显示，或者网页加载不全而出现等待时间，开启 preloader 后，会显示加载动画，等页面加载完，加载动画会消失。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载动画 Loading Animation</span></span><br><span class="line"><span class="attr">preloader:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="55-字数统计"><a class="markdownIt-Anchor" href="#55-字数统计"></a> 5.5 字数统计</h3><p>要为 Butterfly 配上字数统计特性, 你需要如下几个步骤:</p><p>打开 hexo 工作目录</p><p>输入命令：npm install hexo-wordcount --save</p><p>然后在主题配置文件中写入：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">wordcount:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_wordcount:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_wordcount:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200714225614.png" alt="image-20200714225613483" /></p><h3 id="56-图片大图查看模式"><a class="markdownIt-Anchor" href="#56-图片大图查看模式"></a> 5.6 图片大图查看模式</h3><h4 id="561-fancybox"><a class="markdownIt-Anchor" href="#561-fancybox"></a> 5.6.1 fancybox</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># fancybox http://fancyapps.com/fancybox/3/</span></span><br><span class="line"><span class="attr">fancybox:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="562-medium_zoom"><a class="markdownIt-Anchor" href="#562-medium_zoom"></a> 5.6.2 medium_zoom</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">medium_zoom:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="57-snackbar-弹窗"><a class="markdownIt-Anchor" href="#57-snackbar-弹窗"></a> 5.7 Snackbar 弹窗</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Snackbar 弹窗</span></span><br><span class="line"><span class="comment"># https://github.com/polonel/SnackBar</span></span><br><span class="line"><span class="comment"># position 弹窗位置</span></span><br><span class="line"><span class="comment"># 可选 top-left / top-center / top-right / bottom-left / bottom-center / bottom-right</span></span><br><span class="line"><span class="attr">snackbar:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">bottom-left</span></span><br><span class="line">  <span class="attr">bg_light:</span> <span class="string">'#49b1f5'</span> <span class="comment">#light mode时弹窗背景</span></span><br><span class="line">  <span class="attr">bg_dark:</span> <span class="string">'#2d3035'</span> <span class="comment">#dark mode时弹窗背景</span></span><br></pre></td></tr></table></figure><h3 id="58-自定义样式"><a class="markdownIt-Anchor" href="#58-自定义样式"></a> 5.8 自定义样式</h3><h4 id="581-引用外部字体和鼠标样式"><a class="markdownIt-Anchor" href="#581-引用外部字体和鼠标样式"></a> 5.8.1 引用外部字体和鼠标样式</h4><p>（1）引用格式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123; <span class="attribute">font-family</span>:MyFont;</span><br><span class="line"><span class="attribute">src</span>: <span class="built_in">url</span>(https:xxx)&#125;</span><br><span class="line"><span class="selector-tag">body</span>&#123;<span class="attribute">font-family</span>:MyFont<span class="meta">!important</span>;&#125;</span><br></pre></td></tr></table></figure><p>（2）引用方法</p><p>将引用代码添加到 <code>themes\Butterfly\source\css\_third-partynormalize.min.css</code> 末尾即可，鼠标样式亦是如此。</p><h4 id="582-修改侧栏设置及返回顶部按钮"><a class="markdownIt-Anchor" href="#582-修改侧栏设置及返回顶部按钮"></a> 5.8.2 修改侧栏设置及返回顶部按钮</h4><p>在路径 <code>themes\Butterfly\source\css\_layout\rightside.styl</code> 下加大按钮高宽度并设置圆角，调整间距，使设置按钮的子菜单不打开状态隐藏到最右侧不可见。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#rightside</span></span><br><span class="line">  <span class="selector-tag">position</span>: <span class="selector-tag">fixed</span></span><br><span class="line">  <span class="selector-tag">right</span>: <span class="selector-tag">-38px</span></span><br><span class="line">  <span class="selector-tag">bottom</span>: 10<span class="selector-tag">px</span></span><br><span class="line">  <span class="selector-tag">opacity</span>: 0</span><br><span class="line">  <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> <span class="selector-class">.3s</span></span><br><span class="line"></span><br><span class="line">  <span class="selector-id">#rightside-config-hide</span></span><br><span class="line">    <span class="selector-tag">transform</span>: <span class="selector-tag">translate</span>(40<span class="selector-tag">px</span>, 0)</span><br><span class="line">&amp; &gt; <span class="selector-tag">div</span></span><br><span class="line">  &amp; &gt; <span class="selector-tag">i</span>,</span><br><span class="line">  &amp; &gt; <span class="selector-tag">a</span>,</span><br><span class="line">  &amp; &gt; <span class="selector-tag">div</span></span><br><span class="line">    <span class="selector-tag">display</span>: <span class="selector-tag">block</span></span><br><span class="line">    <span class="selector-tag">margin-bottom</span>: 2<span class="selector-tag">px</span></span><br><span class="line">    <span class="selector-tag">width</span>: 36<span class="selector-tag">px</span></span><br><span class="line">    <span class="selector-tag">height</span>: 36<span class="selector-tag">px</span></span><br><span class="line">    background-color: $light-blue</span><br><span class="line">    color: $button-color</span><br><span class="line">    <span class="selector-tag">text-align</span>: <span class="selector-tag">center</span></span><br><span class="line">    <span class="selector-tag">font-size</span>: 16<span class="selector-tag">px</span></span><br><span class="line">    <span class="selector-tag">line-height</span>: 35<span class="selector-tag">px</span></span><br><span class="line">    <span class="selector-tag">margin-bottom</span>: 4<span class="selector-tag">px</span></span><br><span class="line">    <span class="selector-tag">margin-right</span>: 4<span class="selector-tag">px</span></span><br><span class="line">    <span class="selector-tag">cursor</span>: <span class="selector-tag">pointer</span></span><br><span class="line">    <span class="selector-tag">border-radius</span>: 3<span class="selector-tag">px</span></span><br></pre></td></tr></table></figure><h4 id="583-文章目录美化"><a class="markdownIt-Anchor" href="#583-文章目录美化"></a> 5.8.3 文章目录美化</h4><ul><li>调整左侧边距 0.5rem 为 2rem</li><li>选择某一目录时，背景框宽度为最大且为方形，修改选中时边框为圆润且适应标题长度，路径 <code>themes\Butterfly\source\css\_layout\sidebar.styl</code> 下修改或增加以下内容</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.toc-link</span></span><br><span class="line"></span><br><span class="line">  &amp;<span class="selector-class">.active</span></span><br><span class="line">    border-right-color: darken($theme-toc-color, 20%)</span><br><span class="line">    background: $theme-toc-color</span><br><span class="line">    color: $sidebar-active-color</span><br><span class="line">    <span class="selector-tag">border-radius</span>: 5<span class="selector-tag">px</span></span><br><span class="line">    <span class="selector-tag">width</span>: <span class="selector-tag">max-content</span></span><br><span class="line">    <span class="selector-tag">padding-right</span>: 5<span class="selector-tag">px</span></span><br><span class="line">    <span class="selector-tag">padding-left</span>: 5<span class="selector-tag">px</span></span><br></pre></td></tr></table></figure><h3 id="59-如何在页脚养鱼"><a class="markdownIt-Anchor" href="#59-如何在页脚养鱼"></a> 5.9 如何在页脚养鱼</h3><p>参考博主：<a href="https://xiabor.com/714f.html" target="_blank" rel="noopener">木槿</a></p><p>效果就在页脚，是不是很想要？这里简述 butterfly 主题的引入方法，其他主题类似，实在不行建议更换 butterfly 主题</p><ul><li><p>先将扒来的 code 转为 pug</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200715110304.png" alt="htmltopug" /></p><p>写进 <code>\themes\butterfly\layout\includes\footer.pug</code> 末尾</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#jsi-flying-fish-container.container</span><br><span class="line">script(src='js/fish.js')</span><br><span class="line">style.</span><br><span class="line"></span><br><span class="line">@media only screen and (max-width: 767px)&#123;</span><br><span class="line">#sidebar_search_box input[type=text]&#123;width:calc(100% - 24px)&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200715114201.png" alt="image-20200715114200023" /></p></li><li><p>然后在主题配置文件中找到 <code>inject</code> 引入 js: <a href="https://cdn.jsdelivr.net/gh/xiabo2/CDN@latest/fish.js" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/xiabo2/CDN@latest/fish.js</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/gh/xiabo2/CDN@latest/fish.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200715113008.png" alt="image-20200715113007109" /></p></li><li><p>引入之后效果如下，页脚太高，<code>themes\butterfly\source\css\_layout\footer.styl</code> 调整下 css 即可 (补充：调整页脚阴影透明度为 0.1)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#footer-wrap</span><br><span class="line">position: absolute</span><br><span class="line">padding: 1.2rem 1rem 1.4rem</span><br><span class="line">color: $light-grey</span><br><span class="line">text-align: center</span><br><span class="line">left: 0</span><br><span class="line">right: 0</span><br><span class="line">top:0</span><br><span class="line">bottom: 0</span><br><span class="line"></span><br><span class="line">#footer</span><br><span class="line">  if hexo-config(&#39;footer_bg&#39;) !&#x3D; false</span><br><span class="line">    &amp;:before</span><br><span class="line">    position: absolute</span><br><span class="line">    width: 100%</span><br><span class="line">    height: 100%</span><br><span class="line">    background-color: alpha($dark-black, .1)</span><br><span class="line">    content: &#39;&#39;</span><br></pre></td></tr></table></figure></li><li><p>效果图：</p></li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200715114541.gif" alt="" /></p><h4 id="591-最新方法"><a class="markdownIt-Anchor" href="#591-最新方法"></a> 5.9.1 最新方法</h4><p>在主题配置的 <code>inject</code> 引入 js: <a href="https://cdn.jsdelivr.net/gh/xiabo2/CDN@latest/fishes.js" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/xiabo2/CDN@latest/fishes.js</a> <strong>即可</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/gh/xiabo2/CDN@latest/fishes.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>调整页脚阴影透明度 <code>themes\butterfly\source\css\_layout\footer.styl</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-color: alpha($dark-black, .1)</span><br></pre></td></tr></table></figure><h3 id="510-添加说说功能"><a class="markdownIt-Anchor" href="#510-添加说说功能"></a> 5.10 添加说说功能</h3><p>参考博客：<a href="https://blog.csdn.net/weixin_44186409/article/details/106557394" target="_blank" rel="noopener">Artitalk</a> 和 <a href="https://blog.csdn.net/cungudafa/article/details/105938885" target="_blank" rel="noopener">https://blog.csdn.net/cungudafa/article/details/105938885</a></p><p>官方文档：<a href="https://artitalk.js.org/" target="_blank" rel="noopener">artitalk.js.org</a></p><p>效果图：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200715224327.png" alt="效果图1" /></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200715230845.png" alt="效果图2" /></p><h2 id="6-部署到-github"><a class="markdownIt-Anchor" href="#6-部署到-github"></a> 6 部署到 GitHub</h2><p>这里默认已经注册过了 GitHub 账户并且已经创建了相关仓库，比如我的：<a href="https://github.com/wugenqiang/PaperSummary" target="_blank" rel="noopener">https://github.com/wugenqiang/PaperSummary</a></p><h3 id="61-上传文件到-github"><a class="markdownIt-Anchor" href="#61-上传文件到-github"></a> 6.1 上传文件到 GitHub</h3><ul><li>配置 <code>_config.yml</code> 中的 repo 信息：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span>  <span class="string">https://github.com/wugenqiang/PaperSummary.git</span> <span class="comment">#你的仓库地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>直接通过 hexo 来发布到 GitHub，需要安装以下插件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-deployer-git</span> <span class="string">--save</span></span><br></pre></td></tr></table></figure><p>安装成功后，执行以下命令：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">g</span> <span class="string">-d</span></span><br></pre></td></tr></table></figure><p>刷新 github 对应的 repository 页面，即可看到提交的内容：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200715101413.png" alt="image-20200715101206051" /></p><h3 id="62-配置静态站点"><a class="markdownIt-Anchor" href="#62-配置静态站点"></a> 6.2 配置静态站点</h3><p>点击 Settings，进入 GitHub Pages 配置：</p><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200715101407.png" alt="image-20200715101406287" /></p><h2 id="7-效果展示"><a class="markdownIt-Anchor" href="#7-效果展示"></a> 7 效果展示</h2><ul><li><a href="https://wugenqiang.github.io/PaperSummary/" target="_blank" rel="noopener">https://wugenqiang.github.io/PaperSummary/</a></li></ul><p><img src= "/img/loading.gif" data-src="https://gitee.com/wugenqiang/PictureBed/raw/master/images01/20200715102235.png" alt="效果展示" /></p>]]></content>
      
      
      <categories>
          
          <category> Hexo-Butterfly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo-Butterfly博客搭建指南 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
